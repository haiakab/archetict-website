{"version":3,"file":"index.umd.js","sources":["../src/index.ts"],"sourcesContent":["// symbols\nconst OWN_KEYS_SYMBOL = Symbol();\nconst TRACK_MEMO_SYMBOL = Symbol();\nconst GET_ORIGINAL_SYMBOL = Symbol();\n\n// properties\nconst AFFECTED_PROPERTY = 'a';\nconst FROZEN_PROPERTY = 'f';\nconst PROXY_PROPERTY = 'p';\nconst PROXY_CACHE_PROPERTY = 'c';\nconst NEXT_OBJECT_PROPERTY = 'n';\nconst CHANGED_PROPERTY = 'g';\n\n// get object prototype\nconst getProto = Object.getPrototypeOf;\n\nconst objectsToTrack = new WeakMap<object, boolean>();\n\n// check if obj is a plain object or an array\nconst isObjectToTrack = <T>(obj: T): obj is T extends object ? T : never => (\n  obj && (objectsToTrack.has(obj as unknown as object)\n    ? objectsToTrack.get(obj as unknown as object) as boolean\n    : (getProto(obj) === Object.prototype || getProto(obj) === Array.prototype)\n  )\n);\n\n// check if it is object\nconst isObject = (x: unknown): x is object => (\n  typeof x === 'object' && x !== null\n);\n\n// check if frozen\nconst isFrozen = (obj: object) => (\n  Object.isFrozen(obj) || (\n    // Object.isFrozen() doesn't detect non-writable properties\n    // See: https://github.com/dai-shi/proxy-compare/pull/8\n    Object.values(Object.getOwnPropertyDescriptors(obj)).some(\n      (descriptor) => !descriptor.writable,\n    )\n  )\n);\n\n// copy frozen object\nconst unfreeze = (obj: object) => {\n  if (Array.isArray(obj)) {\n    // Arrays need a special way to copy\n    return Array.from(obj);\n  }\n  // For non-array objects, we create a new object keeping the prototype\n  // with changing all configurable options (otherwise, proxies will complain)\n  const descriptors = Object.getOwnPropertyDescriptors(obj);\n  Object.values(descriptors).forEach((desc) => { desc.configurable = true; });\n  return Object.create(getProto(obj), descriptors);\n};\n\ntype Affected = WeakMap<object, Set<string | symbol>>;\ntype ProxyCache<T extends object> = WeakMap<object, ProxyHandler<T>>;\ntype ProxyHandler<T extends object> = {\n  [FROZEN_PROPERTY]: boolean;\n  [PROXY_PROPERTY]?: T;\n  [PROXY_CACHE_PROPERTY]?: ProxyCache<object>;\n  [AFFECTED_PROPERTY]?: Affected;\n  get(target: T, key: string | symbol): unknown;\n  has(target: T, key: string | symbol): boolean;\n  ownKeys(target: T): (string | symbol)[];\n  set?(target: T, key: string | symbol, value: unknown): boolean;\n  deleteProperty?(target: T, key: string | symbol): boolean;\n};\n\nconst createProxyHandler = <T extends object>(origObj: T, frozen: boolean) => {\n  let trackObject = false; // for trackMemo\n  const recordUsage = (h: ProxyHandler<T>, key: string | symbol) => {\n    if (!trackObject) {\n      let used = (h[AFFECTED_PROPERTY] as Affected).get(origObj);\n      if (!used) {\n        used = new Set();\n        (h[AFFECTED_PROPERTY] as Affected).set(origObj, used);\n      }\n      used.add(key);\n    }\n  };\n  const recordObjectAsUsed = (h: ProxyHandler<T>) => {\n    trackObject = true;\n    (h[AFFECTED_PROPERTY] as Affected).delete(origObj);\n  };\n  const handler: ProxyHandler<T> = {\n    [FROZEN_PROPERTY]: frozen,\n    get(target, key) {\n      if (key === GET_ORIGINAL_SYMBOL) {\n        return origObj;\n      }\n      recordUsage(this, key);\n      return createProxy(\n        (target as any)[key],\n        (this[AFFECTED_PROPERTY] as Affected),\n        this[PROXY_CACHE_PROPERTY],\n      );\n    },\n    has(target, key) {\n      if (key === TRACK_MEMO_SYMBOL) {\n        recordObjectAsUsed(this);\n        return true;\n      }\n      // LIMITATION:\n      // We simply record the same as get.\n      // This means { a: {} } and { a: {} } is detected as changed,\n      // if 'a' in obj is handled.\n      recordUsage(this, key);\n      return key in target;\n    },\n    ownKeys(target) {\n      recordUsage(this, OWN_KEYS_SYMBOL);\n      return Reflect.ownKeys(target);\n    },\n  };\n  if (frozen) {\n    handler.set = handler.deleteProperty = () => false;\n  }\n  return handler;\n};\n\n/**\n * Create a proxy.\n *\n * This function will create a proxy at top level and proxy nested objects as you access them,\n * in order to keep track of which properties were accessed via get/has proxy handlers:\n *\n * NOTE: Printing of WeakMap is hard to inspect and not very readable\n * for this purpose you can use the `affectedToPathList` helper.\n *\n * @param {object} obj - Object that will be wrapped on the proxy.\n * @param {WeakMap<object, unknown>} affected -\n * WeakMap that will hold the tracking of which properties in the proxied object were accessed.\n * @param {WeakMap<object, unknown>} [proxyCache] -\n * WeakMap that will help keep referential identity for proxies.\n * @returns {Proxy<object>} - Object wrapped in a proxy.\n *\n * @example\n * import { createProxy } from 'proxy-compare';\n *\n * const original = { a: \"1\", c: \"2\", d: { e: \"3\" } };\n * const affected = new WeakMap();\n * const proxy = createProxy(original, affected);\n *\n * proxy.a // Will mark as used and track its value.\n * // This will update the affected WeakMap with original as key\n * // and a Set with \"a\"\n *\n * proxy.d // Will mark \"d\" as accessed to track and proxy itself ({ e: \"3\" }).\n * // This will update the affected WeakMap with original as key\n * // and a Set with \"d\"\n */\nexport const createProxy = <T>(\n  obj: T,\n  affected: WeakMap<object, unknown>,\n  proxyCache?: WeakMap<object, unknown>,\n): T => {\n  if (!isObjectToTrack(obj)) return obj;\n  const origObj = (\n    obj as { [GET_ORIGINAL_SYMBOL]?: typeof obj }\n  )[GET_ORIGINAL_SYMBOL]; // unwrap proxy\n  const target = origObj || obj;\n  const frozen = isFrozen(target);\n  let proxyHandler: ProxyHandler<typeof target> | undefined = (\n    proxyCache && (proxyCache as ProxyCache<typeof target>).get(target)\n  );\n  if (!proxyHandler || proxyHandler[FROZEN_PROPERTY] !== frozen) {\n    proxyHandler = createProxyHandler<T extends object ? T : never>(target, frozen);\n    proxyHandler[PROXY_PROPERTY] = new Proxy(\n      frozen ? unfreeze(target) : target,\n      proxyHandler,\n    ) as typeof target;\n    if (proxyCache) {\n      proxyCache.set(target, proxyHandler);\n    }\n  }\n  proxyHandler[AFFECTED_PROPERTY] = affected as Affected;\n  proxyHandler[PROXY_CACHE_PROPERTY] = proxyCache as ProxyCache<object> | undefined;\n  return proxyHandler[PROXY_PROPERTY] as typeof target;\n};\n\nconst isOwnKeysChanged = (origObj: object, nextObj: object) => {\n  const origKeys = Reflect.ownKeys(origObj);\n  const nextKeys = Reflect.ownKeys(nextObj);\n  return origKeys.length !== nextKeys.length\n    || origKeys.some((k, i) => k !== nextKeys[i]);\n};\n\ntype ChangedCache = WeakMap<object, {\n  [NEXT_OBJECT_PROPERTY]: object;\n  [CHANGED_PROPERTY]: boolean;\n}>;\n\n/**\n * Compare changes on objects.\n *\n * This will compare the affected properties on tracked objects inside the proxy\n * to check if there were any changes made to it,\n * by default if no property was accessed on the proxy it will attempt to do a\n * reference equality check for the objects provided (Object.is(a, b)). If you access a property\n * on the proxy, then isChanged will only compare the affected properties.\n *\n * @param {object} origObj - The original object to compare.\n * @param {object} nextObj - Object to compare with the original one.\n * @param {WeakMap<object, unknown>} affected -\n * WeakMap that holds the tracking of which properties in the proxied object were accessed.\n * @param {WeakMap<object, unknown>} [cache] -\n * WeakMap that holds a cache of the comparisons for better performance with repetitive comparisons,\n * and to avoid infinite loop with circular structures.\n * @returns {boolean} - Boolean indicating if the affected property on the object has changed.\n *\n * @example\n * import { createProxy, isChanged } from 'proxy-compare';\n *\n * const original = { a: \"1\", c: \"2\", d: { e: \"3\" } };\n * const affected = new WeakMap();\n *\n * const proxy = createProxy(original, affected);\n *\n * proxy.a\n *\n * isChanged(original, { a: \"1\" }, affected) // false\n *\n * proxy.a = \"2\"\n *\n * isChanged(original, { a: \"1\" }, affected) // true\n */\n\nexport const isChanged = (\n  origObj: unknown,\n  nextObj: unknown,\n  affected: WeakMap<object, unknown>,\n  cache?: WeakMap<object, unknown>,\n): boolean => {\n  if (Object.is(origObj, nextObj)) {\n    return false;\n  }\n  if (!isObject(origObj) || !isObject(nextObj)) return true;\n  const used = (affected as Affected).get(origObj);\n  if (!used) return true;\n  if (cache) {\n    const hit = (cache as ChangedCache).get(origObj);\n    if (hit && hit[NEXT_OBJECT_PROPERTY] === nextObj) {\n      return hit[CHANGED_PROPERTY];\n    }\n    // for object with cycles\n    (cache as ChangedCache).set(origObj, {\n      [NEXT_OBJECT_PROPERTY]: nextObj,\n      [CHANGED_PROPERTY]: false,\n    });\n  }\n  let changed: boolean | null = null;\n  // eslint-disable-next-line no-restricted-syntax\n  for (const key of used) {\n    const c = key === OWN_KEYS_SYMBOL ? isOwnKeysChanged(origObj, nextObj)\n      : isChanged(\n        (origObj as any)[key],\n        (nextObj as any)[key],\n        affected,\n        cache,\n      );\n    if (c === true || c === false) changed = c;\n    if (changed) break;\n  }\n  if (changed === null) changed = true;\n  if (cache) {\n    cache.set(origObj, {\n      [NEXT_OBJECT_PROPERTY]: nextObj,\n      [CHANGED_PROPERTY]: changed,\n    });\n  }\n  return changed;\n};\n\n// explicitly track object with memo\nexport const trackMemo = (obj: unknown) => {\n  if (isObjectToTrack(obj)) {\n    return TRACK_MEMO_SYMBOL in obj;\n  }\n  return false;\n};\n\n/**\n * Unwrap proxy to get the original object.\n *\n * Used to retrieve the original object used to create the proxy instance with `createProxy`.\n *\n * @param {Proxy<object>} obj -  The proxy wrapper of the originial object.\n * @returns {object | null} - Return either the unwrapped object if exists.\n *\n * @example\n * import { createProxy, getUntracked } from 'proxy-compare';\n *\n * const original = { a: \"1\", c: \"2\", d: { e: \"3\" } };\n * const affected = new WeakMap();\n *\n * const proxy = createProxy(original, affected);\n * const originalFromProxy = getUntracked(proxy)\n *\n * Obejct.is(original, originalFromProxy) // true\n * isChanged(original, originalFromProxy, affected) // false\n */\nexport const getUntracked = <T>(obj: T): T | null => {\n  if (isObjectToTrack(obj)) {\n    return (obj as { [GET_ORIGINAL_SYMBOL]?: T })[GET_ORIGINAL_SYMBOL] || null;\n  }\n  return null;\n};\n\n/**\n * Mark object to be tracked.\n *\n * This function marks an object that will be passed into `createProxy`\n * as marked to track or not. By default only Array and Object are marked to track,\n * so this is useful for example to mark a class instance to track or to mark a object\n * to be untracked when creating your proxy.\n *\n * @param {object} obj - Object to mark as tracked or not.\n * @param {mark} boolean - Boolean indicating whether you want to track this object or not.\n * @returns {undefined} - No return.\n *\n * @example\n * import { createProxy, markToTrack, isChanged } from 'proxy-compare';\n *\n * const nested = { e: \"3\" }\n *\n * markToTrack(nested, false)\n *\n * const original = { a: \"1\", c: \"2\", d: nested };\n * const affected = new WeakMap();\n *\n * const proxy = createProxy(original, affected);\n *\n * proxy.d.e\n *\n * isChanged(original, { d: { e: \"3\" } }, affected) // true\n */\nexport const markToTrack = (obj: object, mark = true) => {\n  objectsToTrack.set(obj, mark);\n};\n\n// convert affected to path list\nexport const affectedToPathList = (\n  obj: unknown,\n  affected: WeakMap<object, unknown>,\n) => {\n  const list: (string | symbol)[][] = [];\n  const walk = (x: unknown, path?: (string | symbol)[]) => {\n    const used = (affected as Affected).get(x as object);\n    if (used) {\n      used.forEach((key) => {\n        walk((x as any)[key], path ? [...path, key] : [key]);\n      });\n    } else if (path) {\n      list.push(path);\n    }\n  };\n  walk(obj);\n  return list;\n};\n"],"names":["OWN_KEYS_SYMBOL","Symbol","TRACK_MEMO_SYMBOL","GET_ORIGINAL_SYMBOL","getProto","Object","getPrototypeOf","objectsToTrack","WeakMap","isObjectToTrack","obj","has","get","prototype","Array","isObject","x","createProxy","affected","proxyCache","target","frozen","isFrozen","values","getOwnPropertyDescriptors","some","descriptor","writable","proxyHandler","origObj","trackObject","recordUsage","h","key","used","Set","set","add","handler","this","ownKeys","Reflect","deleteProperty","createProxyHandler","Proxy","isArray","from","descriptors","forEach","desc","configurable","create","unfreeze","isOwnKeysChanged","nextObj","origKeys","nextKeys","length","k","i","list","walk","path","push","isChanged","cache","is","hit","changed","c","mark"],"mappings":"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"}