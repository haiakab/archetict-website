{"ast":null,"code":"import _extends from '@babel/runtime/helpers/esm/extends';\nimport _objectWithoutPropertiesLoose from '@babel/runtime/helpers/esm/objectWithoutPropertiesLoose';\nimport { forwardRef, useRef, useLayoutEffect, createElement } from 'react';\nimport { useThree } from '@react-three/fiber';\nimport mergeRefs from 'react-merge-refs';\nconst PerspectiveCamera = /*#__PURE__*/forwardRef((_ref, ref) => {\n  let {\n    makeDefault = false\n  } = _ref,\n      props = _objectWithoutPropertiesLoose(_ref, [\"makeDefault\"]);\n\n  const set = useThree(({\n    set\n  }) => set);\n  const camera = useThree(({\n    camera\n  }) => camera);\n  const size = useThree(({\n    size\n  }) => size);\n  const cameraRef = useRef();\n  useLayoutEffect(() => {\n    const {\n      current: cam\n    } = cameraRef;\n\n    if (cam) {\n      cam.aspect = size.width / size.height;\n      cam.updateProjectionMatrix();\n    }\n  }, [size, props]);\n  useLayoutEffect(() => {\n    if (makeDefault && cameraRef.current) {\n      const oldCam = camera;\n      set(() => ({\n        camera: cameraRef.current\n      }));\n      return () => set(() => ({\n        camera: oldCam\n      }));\n    }\n  }, [camera, cameraRef, makeDefault, set]);\n  return /*#__PURE__*/createElement(\"perspectiveCamera\", _extends({\n    ref: mergeRefs([cameraRef, ref])\n  }, props));\n});\nexport { PerspectiveCamera };","map":{"version":3,"sources":["/Users/haiakablan/Documents/לוטוס/קורס/Architecture-web/node_modules/@react-three/drei/core/PerspectiveCamera.js"],"names":["_extends","_objectWithoutPropertiesLoose","forwardRef","useRef","useLayoutEffect","createElement","useThree","mergeRefs","PerspectiveCamera","_ref","ref","makeDefault","props","set","camera","size","cameraRef","current","cam","aspect","width","height","updateProjectionMatrix","oldCam"],"mappings":"AAAA,OAAOA,QAAP,MAAqB,oCAArB;AACA,OAAOC,6BAAP,MAA0C,yDAA1C;AACA,SAASC,UAAT,EAAqBC,MAArB,EAA6BC,eAA7B,EAA8CC,aAA9C,QAAmE,OAAnE;AACA,SAASC,QAAT,QAAyB,oBAAzB;AACA,OAAOC,SAAP,MAAsB,kBAAtB;AAEA,MAAMC,iBAAiB,GAAG,aAAaN,UAAU,CAAC,CAACO,IAAD,EAAOC,GAAP,KAAe;AAC/D,MAAI;AACFC,IAAAA,WAAW,GAAG;AADZ,MAEAF,IAFJ;AAAA,MAGIG,KAAK,GAAGX,6BAA6B,CAACQ,IAAD,EAAO,CAAC,aAAD,CAAP,CAHzC;;AAKA,QAAMI,GAAG,GAAGP,QAAQ,CAAC,CAAC;AACpBO,IAAAA;AADoB,GAAD,KAEfA,GAFc,CAApB;AAGA,QAAMC,MAAM,GAAGR,QAAQ,CAAC,CAAC;AACvBQ,IAAAA;AADuB,GAAD,KAElBA,MAFiB,CAAvB;AAGA,QAAMC,IAAI,GAAGT,QAAQ,CAAC,CAAC;AACrBS,IAAAA;AADqB,GAAD,KAEhBA,IAFe,CAArB;AAGA,QAAMC,SAAS,GAAGb,MAAM,EAAxB;AACAC,EAAAA,eAAe,CAAC,MAAM;AACpB,UAAM;AACJa,MAAAA,OAAO,EAAEC;AADL,QAEFF,SAFJ;;AAIA,QAAIE,GAAJ,EAAS;AACPA,MAAAA,GAAG,CAACC,MAAJ,GAAaJ,IAAI,CAACK,KAAL,GAAaL,IAAI,CAACM,MAA/B;AACAH,MAAAA,GAAG,CAACI,sBAAJ;AACD;AACF,GATc,EASZ,CAACP,IAAD,EAAOH,KAAP,CATY,CAAf;AAUAR,EAAAA,eAAe,CAAC,MAAM;AACpB,QAAIO,WAAW,IAAIK,SAAS,CAACC,OAA7B,EAAsC;AACpC,YAAMM,MAAM,GAAGT,MAAf;AACAD,MAAAA,GAAG,CAAC,OAAO;AACTC,QAAAA,MAAM,EAAEE,SAAS,CAACC;AADT,OAAP,CAAD,CAAH;AAGA,aAAO,MAAMJ,GAAG,CAAC,OAAO;AACtBC,QAAAA,MAAM,EAAES;AADc,OAAP,CAAD,CAAhB;AAGD;AACF,GAVc,EAUZ,CAACT,MAAD,EAASE,SAAT,EAAoBL,WAApB,EAAiCE,GAAjC,CAVY,CAAf;AAWA,SAAO,aAAaR,aAAa,CAAC,mBAAD,EAAsBL,QAAQ,CAAC;AAC9DU,IAAAA,GAAG,EAAEH,SAAS,CAAC,CAACS,SAAD,EAAYN,GAAZ,CAAD;AADgD,GAAD,EAE5DE,KAF4D,CAA9B,CAAjC;AAGD,CAxCgD,CAAjD;AA0CA,SAASJ,iBAAT","sourcesContent":["import _extends from '@babel/runtime/helpers/esm/extends';\nimport _objectWithoutPropertiesLoose from '@babel/runtime/helpers/esm/objectWithoutPropertiesLoose';\nimport { forwardRef, useRef, useLayoutEffect, createElement } from 'react';\nimport { useThree } from '@react-three/fiber';\nimport mergeRefs from 'react-merge-refs';\n\nconst PerspectiveCamera = /*#__PURE__*/forwardRef((_ref, ref) => {\n  let {\n    makeDefault = false\n  } = _ref,\n      props = _objectWithoutPropertiesLoose(_ref, [\"makeDefault\"]);\n\n  const set = useThree(({\n    set\n  }) => set);\n  const camera = useThree(({\n    camera\n  }) => camera);\n  const size = useThree(({\n    size\n  }) => size);\n  const cameraRef = useRef();\n  useLayoutEffect(() => {\n    const {\n      current: cam\n    } = cameraRef;\n\n    if (cam) {\n      cam.aspect = size.width / size.height;\n      cam.updateProjectionMatrix();\n    }\n  }, [size, props]);\n  useLayoutEffect(() => {\n    if (makeDefault && cameraRef.current) {\n      const oldCam = camera;\n      set(() => ({\n        camera: cameraRef.current\n      }));\n      return () => set(() => ({\n        camera: oldCam\n      }));\n    }\n  }, [camera, cameraRef, makeDefault, set]);\n  return /*#__PURE__*/createElement(\"perspectiveCamera\", _extends({\n    ref: mergeRefs([cameraRef, ref])\n  }, props));\n});\n\nexport { PerspectiveCamera };\n"]},"metadata":{},"sourceType":"module"}