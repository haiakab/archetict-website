{"ast":null,"code":"import { DataTexture, LuminanceFormat, LinearFilter, Color, Vector3, InstancedBufferGeometry, Sphere, Box3, InstancedBufferAttribute, PlaneBufferGeometry, Vector2, Vector4, Matrix3, MeshBasicMaterial, DoubleSide, Matrix4, Mesh } from 'three';\nimport { defineWorkerModule, ThenableWorkerModule } from 'troika-worker-utils';\nimport { createDerivedMaterial, voidMainRegExp } from 'troika-three-utils';\n/**\r\n * Initializes and returns a function to generate an SDF texture for a given glyph.\r\n * @param {function} createGlyphSegmentsIndex - factory for a GlyphSegmentsIndex implementation.\r\n * @param {number} config.sdfExponent\r\n * @param {number} config.sdfMargin\r\n *\r\n * @return {function(Object): {renderingBounds: [minX, minY, maxX, maxY], textureData: Uint8Array}}\r\n */\n\nfunction createSDFGenerator(createGlyphSegmentsIndex, config) {\n  const {\n    sdfExponent,\n    sdfMargin\n  } = config;\n  /**\r\n   * How many straight line segments to use when approximating a glyph's quadratic/cubic bezier curves.\r\n   */\n\n  const CURVE_POINTS = 16;\n  /**\r\n   * Find the point on a quadratic bezier curve at t where t is in the range [0, 1]\r\n   */\n\n  function pointOnQuadraticBezier(x0, y0, x1, y1, x2, y2, t) {\n    const t2 = 1 - t;\n    return {\n      x: t2 * t2 * x0 + 2 * t2 * t * x1 + t * t * x2,\n      y: t2 * t2 * y0 + 2 * t2 * t * y1 + t * t * y2\n    };\n  }\n  /**\r\n   * Find the point on a cubic bezier curve at t where t is in the range [0, 1]\r\n   */\n\n\n  function pointOnCubicBezier(x0, y0, x1, y1, x2, y2, x3, y3, t) {\n    const t2 = 1 - t;\n    return {\n      x: t2 * t2 * t2 * x0 + 3 * t2 * t2 * t * x1 + 3 * t2 * t * t * x2 + t * t * t * x3,\n      y: t2 * t2 * t2 * y0 + 3 * t2 * t2 * t * y1 + 3 * t2 * t * t * y2 + t * t * t * y3\n    };\n  }\n  /**\r\n   * Generate an SDF texture segment for a single glyph.\r\n   * @param {object} glyphObj\r\n   * @param {number} sdfSize - the length of one side of the SDF image.\r\n   *        Larger images encode more details. Must be a power of 2.\r\n   * @return {{textureData: Uint8Array, renderingBounds: *[]}}\r\n   */\n\n\n  function generateSDF(glyphObj, sdfSize) {\n    //console.time('glyphSDF')\n    const textureData = new Uint8Array(sdfSize * sdfSize); // Determine mapping between glyph grid coords and sdf grid coords\n\n    const glyphW = glyphObj.xMax - glyphObj.xMin;\n    const glyphH = glyphObj.yMax - glyphObj.yMin; // Choose a maximum search distance radius in font units, based on the glyph's max dimensions\n\n    const fontUnitsMaxSearchDist = Math.max(glyphW, glyphH); // Margin - add an extra 0.5 over the configured value because the outer 0.5 doesn't contain\n    // useful interpolated values and will be ignored anyway.\n\n    const fontUnitsMargin = Math.max(glyphW, glyphH) / sdfSize * (sdfMargin * sdfSize + 0.5); // Metrics of the texture/quad in font units\n\n    const textureMinFontX = glyphObj.xMin - fontUnitsMargin;\n    const textureMinFontY = glyphObj.yMin - fontUnitsMargin;\n    const textureMaxFontX = glyphObj.xMax + fontUnitsMargin;\n    const textureMaxFontY = glyphObj.yMax + fontUnitsMargin;\n    const fontUnitsTextureWidth = textureMaxFontX - textureMinFontX;\n    const fontUnitsTextureHeight = textureMaxFontY - textureMinFontY;\n    const fontUnitsTextureMaxDim = Math.max(fontUnitsTextureWidth, fontUnitsTextureHeight);\n\n    function textureXToFontX(x) {\n      return textureMinFontX + fontUnitsTextureWidth * x / sdfSize;\n    }\n\n    function textureYToFontY(y) {\n      return textureMinFontY + fontUnitsTextureHeight * y / sdfSize;\n    }\n\n    if (glyphObj.pathCommandCount) {\n      //whitespace chars will have no commands, so we can skip all this\n      // Decompose all paths into straight line segments and add them to a quadtree\n      const lineSegmentsIndex = createGlyphSegmentsIndex(glyphObj);\n      let firstX, firstY, prevX, prevY;\n      glyphObj.forEachPathCommand((type, x0, y0, x1, y1, x2, y2) => {\n        switch (type) {\n          case 'M':\n            prevX = firstX = x0;\n            prevY = firstY = y0;\n            break;\n\n          case 'L':\n            if (x0 !== prevX || y0 !== prevY) {\n              //yup, some fonts have zero-length line commands\n              lineSegmentsIndex.addLineSegment(prevX, prevY, prevX = x0, prevY = y0);\n            }\n\n            break;\n\n          case 'Q':\n            {\n              let prevPoint = {\n                x: prevX,\n                y: prevY\n              };\n\n              for (let i = 1; i < CURVE_POINTS; i++) {\n                let nextPoint = pointOnQuadraticBezier(prevX, prevY, x0, y0, x1, y1, i / (CURVE_POINTS - 1));\n                lineSegmentsIndex.addLineSegment(prevPoint.x, prevPoint.y, nextPoint.x, nextPoint.y);\n                prevPoint = nextPoint;\n              }\n\n              prevX = x1;\n              prevY = y1;\n              break;\n            }\n\n          case 'C':\n            {\n              let prevPoint = {\n                x: prevX,\n                y: prevY\n              };\n\n              for (let i = 1; i < CURVE_POINTS; i++) {\n                let nextPoint = pointOnCubicBezier(prevX, prevY, x0, y0, x1, y1, x2, y2, i / (CURVE_POINTS - 1));\n                lineSegmentsIndex.addLineSegment(prevPoint.x, prevPoint.y, nextPoint.x, nextPoint.y);\n                prevPoint = nextPoint;\n              }\n\n              prevX = x2;\n              prevY = y2;\n              break;\n            }\n\n          case 'Z':\n            if (prevX !== firstX || prevY !== firstY) {\n              lineSegmentsIndex.addLineSegment(prevX, prevY, firstX, firstY);\n            }\n\n            break;\n        }\n      }); // For each target SDF texel, find the distance from its center to its nearest line segment,\n      // map that distance to an alpha value, and write that alpha to the texel\n\n      for (let sdfX = 0; sdfX < sdfSize; sdfX++) {\n        for (let sdfY = 0; sdfY < sdfSize; sdfY++) {\n          const signedDist = lineSegmentsIndex.findNearestSignedDistance(textureXToFontX(sdfX + 0.5), textureYToFontY(sdfY + 0.5), fontUnitsMaxSearchDist); // Use an exponential scale to ensure the texels very near the glyph path have adequate\n          // precision, while allowing the distance field to cover the entire texture, given that\n          // there are only 8 bits available. Formula visualized: https://www.desmos.com/calculator/uiaq5aqiam\n\n          let alpha = Math.pow(1 - Math.abs(signedDist) / fontUnitsTextureMaxDim, sdfExponent) / 2;\n\n          if (signedDist < 0) {\n            alpha = 1 - alpha;\n          }\n\n          alpha = Math.max(0, Math.min(255, Math.round(alpha * 255))); //clamp\n\n          textureData[sdfY * sdfSize + sdfX] = alpha;\n        }\n      }\n    } //console.timeEnd('glyphSDF')\n\n\n    return {\n      textureData: textureData,\n      renderingBounds: [textureMinFontX, textureMinFontY, textureMaxFontX, textureMaxFontY]\n    };\n  }\n\n  return generateSDF;\n}\n/**\r\n * Creates a self-contained environment for processing text rendering requests.\r\n *\r\n * It is important that this function has no closure dependencies, so that it can be easily injected\r\n * into the source for a Worker without requiring a build step or complex dependency loading. All its\r\n * dependencies must be passed in at initialization.\r\n *\r\n * @param {function} fontParser - a function that accepts an ArrayBuffer of the font data and returns\r\n * a standardized structure giving access to the font and its glyphs:\r\n *   {\r\n *     unitsPerEm: number,\r\n *     ascender: number,\r\n *     descender: number,\r\n *     forEachGlyph(string, fontSize, letterSpacing, callback) {\r\n *       //invokes callback for each glyph to render, passing it an object:\r\n *       callback({\r\n *         index: number,\r\n *         advanceWidth: number,\r\n *         xMin: number,\r\n *         yMin: number,\r\n *         xMax: number,\r\n *         yMax: number,\r\n *         pathCommandCount: number,\r\n *         forEachPathCommand(callback) {\r\n *           //invokes callback for each path command, with args:\r\n *           callback(\r\n *             type: 'M|L|C|Q|Z',\r\n *             ...args //0 to 6 args depending on the type\r\n *           )\r\n *         }\r\n *       })\r\n *     }\r\n *   }\r\n * @param {function} sdfGenerator - a function that accepts a glyph object and generates an SDF texture\r\n * from it.\r\n * @param {Object} config\r\n * @return {Object}\r\n */\n\n\nfunction createFontProcessor(fontParser, sdfGenerator, config) {\n  const {\n    defaultFontURL\n  } = config;\n  /**\r\n   * @private\r\n   * Holds data about font glyphs and how they relate to SDF atlases\r\n   *\r\n   * {\r\n   *   'fontUrl@sdfSize': {\r\n   *     fontObj: {}, //result of the fontParser\r\n   *     glyphs: {\r\n   *       [glyphIndex]: {\r\n   *         atlasIndex: 0,\r\n   *         glyphObj: {}, //glyph object from the fontParser\r\n   *         renderingBounds: [x0, y0, x1, y1]\r\n   *       },\r\n   *       ...\r\n   *     },\r\n   *     glyphCount: 123\r\n   *   }\r\n   * }\r\n   */\n\n  const fontAtlases = Object.create(null);\n  /**\r\n   * Holds parsed font objects by url\r\n   */\n\n  const fonts = Object.create(null);\n  const INF = Infinity;\n  /**\r\n   * Load a given font url\r\n   */\n\n  function doLoadFont(url, callback) {\n    function tryLoad() {\n      const onError = err => {\n        console.error(`Failure loading font ${url}${url === defaultFontURL ? '' : '; trying fallback'}`, err);\n\n        if (url !== defaultFontURL) {\n          url = defaultFontURL;\n          tryLoad();\n        }\n      };\n\n      try {\n        const request = new XMLHttpRequest();\n        request.open('get', url, true);\n        request.responseType = 'arraybuffer';\n\n        request.onload = function () {\n          if (request.status >= 400) {\n            onError(new Error(request.statusText));\n          } else if (request.status > 0) {\n            try {\n              const fontObj = fontParser(request.response);\n              callback(fontObj);\n            } catch (e) {\n              onError(e);\n            }\n          }\n        };\n\n        request.onerror = onError;\n        request.send();\n      } catch (err) {\n        onError(err);\n      }\n    }\n\n    tryLoad();\n  }\n  /**\r\n   * Load a given font url if needed, invoking a callback when it's loaded. If already\r\n   * loaded, the callback will be called synchronously.\r\n   */\n\n\n  function loadFont(fontUrl, callback) {\n    if (!fontUrl) fontUrl = defaultFontURL;\n    let font = fonts[fontUrl];\n\n    if (font) {\n      // if currently loading font, add to callbacks, otherwise execute immediately\n      if (font.pending) {\n        font.pending.push(callback);\n      } else {\n        callback(font);\n      }\n    } else {\n      fonts[fontUrl] = {\n        pending: [callback]\n      };\n      doLoadFont(fontUrl, fontObj => {\n        let callbacks = fonts[fontUrl].pending;\n        fonts[fontUrl] = fontObj;\n        callbacks.forEach(cb => cb(fontObj));\n      });\n    }\n  }\n  /**\r\n   * Get the atlas data for a given font url, loading it from the network and initializing\r\n   * its atlas data objects if necessary.\r\n   */\n\n\n  function getSdfAtlas(fontUrl, sdfGlyphSize, callback) {\n    if (!fontUrl) fontUrl = defaultFontURL;\n    let atlasKey = `${fontUrl}@${sdfGlyphSize}`;\n    let atlas = fontAtlases[atlasKey];\n\n    if (atlas) {\n      callback(atlas);\n    } else {\n      loadFont(fontUrl, fontObj => {\n        atlas = fontAtlases[atlasKey] || (fontAtlases[atlasKey] = {\n          fontObj: fontObj,\n          glyphs: {},\n          glyphCount: 0\n        });\n        callback(atlas);\n      });\n    }\n  }\n  /**\r\n   * Main entry point.\r\n   * Process a text string with given font and formatting parameters, and return all info\r\n   * necessary to render all its glyphs.\r\n   */\n\n\n  function process({\n    text = '',\n    font = defaultFontURL,\n    sdfGlyphSize = 64,\n    fontSize = 1,\n    letterSpacing = 0,\n    lineHeight = 'normal',\n    maxWidth = INF,\n    textAlign = 'left',\n    textIndent = 0,\n    whiteSpace = 'normal',\n    overflowWrap = 'normal',\n    anchorX = 0,\n    anchorY = 0,\n    includeCaretPositions = false,\n    chunkedBoundsSize = 8192,\n    colorRanges = null\n  }, callback, metricsOnly = false) {\n    const mainStart = now();\n    const timings = {\n      total: 0,\n      fontLoad: 0,\n      layout: 0,\n      sdf: {},\n      sdfTotal: 0\n    }; // Ensure newlines are normalized\n\n    if (text.indexOf('\\r') > -1) {\n      console.warn('FontProcessor.process: got text with \\\\r chars; normalizing to \\\\n');\n      text = text.replace(/\\r\\n/g, '\\n').replace(/\\r/g, '\\n');\n    } // Ensure we've got numbers not strings\n\n\n    fontSize = +fontSize;\n    letterSpacing = +letterSpacing;\n    maxWidth = +maxWidth;\n    lineHeight = lineHeight || 'normal';\n    textIndent = +textIndent;\n    getSdfAtlas(font, sdfGlyphSize, atlas => {\n      const fontObj = atlas.fontObj;\n      const hasMaxWidth = isFinite(maxWidth);\n      let newGlyphs = null;\n      let glyphBounds = null;\n      let glyphAtlasIndices = null;\n      let glyphColors = null;\n      let caretPositions = null;\n      let visibleBounds = null;\n      let chunkedBounds = null;\n      let maxLineWidth = 0;\n      let renderableGlyphCount = 0;\n      let canWrap = whiteSpace !== 'nowrap';\n      const {\n        ascender,\n        descender,\n        unitsPerEm\n      } = fontObj;\n      timings.fontLoad = now() - mainStart;\n      const layoutStart = now(); // Find conversion between native font units and fontSize units; this will already be done\n      // for the gx/gy values below but everything else we'll need to convert\n\n      const fontSizeMult = fontSize / unitsPerEm; // Determine appropriate value for 'normal' line height based on the font's actual metrics\n      // TODO this does not guarantee individual glyphs won't exceed the line height, e.g. Roboto; should we use yMin/Max instead?\n\n      if (lineHeight === 'normal') {\n        lineHeight = (ascender - descender) / unitsPerEm;\n      } // Determine line height and leading adjustments\n\n\n      lineHeight = lineHeight * fontSize;\n      const halfLeading = (lineHeight - (ascender - descender) * fontSizeMult) / 2;\n      const topBaseline = -(ascender * fontSizeMult + halfLeading);\n      const caretHeight = Math.min(lineHeight, (ascender - descender) * fontSizeMult);\n      const caretBottomOffset = (ascender + descender) / 2 * fontSizeMult - caretHeight / 2; // Distribute glyphs into lines based on wrapping\n\n      let lineXOffset = textIndent;\n      let currentLine = new TextLine();\n      const lines = [currentLine];\n      fontObj.forEachGlyph(text, fontSize, letterSpacing, (glyphObj, glyphX, charIndex) => {\n        const char = text.charAt(charIndex);\n        const glyphWidth = glyphObj.advanceWidth * fontSizeMult;\n        const curLineCount = currentLine.count;\n        let nextLine; // Calc isWhitespace and isEmpty once per glyphObj\n\n        if (!('isEmpty' in glyphObj)) {\n          glyphObj.isWhitespace = !!char && /\\s/.test(char);\n          glyphObj.isEmpty = glyphObj.xMin === glyphObj.xMax || glyphObj.yMin === glyphObj.yMax;\n        }\n\n        if (!glyphObj.isWhitespace && !glyphObj.isEmpty) {\n          renderableGlyphCount++;\n        } // If a non-whitespace character overflows the max width, we need to soft-wrap\n\n\n        if (canWrap && hasMaxWidth && !glyphObj.isWhitespace && glyphX + glyphWidth + lineXOffset > maxWidth && curLineCount) {\n          // If it's the first char after a whitespace, start a new line\n          if (currentLine.glyphAt(curLineCount - 1).glyphObj.isWhitespace) {\n            nextLine = new TextLine();\n            lineXOffset = -glyphX;\n          } else {\n            // Back up looking for a whitespace character to wrap at\n            for (let i = curLineCount; i--;) {\n              // If we got the start of the line there's no soft break point; make hard break if overflowWrap='break-word'\n              if (i === 0 && overflowWrap === 'break-word') {\n                nextLine = new TextLine();\n                lineXOffset = -glyphX;\n                break;\n              } // Found a soft break point; move all chars since it to a new line\n              else if (currentLine.glyphAt(i).glyphObj.isWhitespace) {\n                  nextLine = currentLine.splitAt(i + 1);\n                  const adjustX = nextLine.glyphAt(0).x;\n                  lineXOffset -= adjustX;\n\n                  for (let j = nextLine.count; j--;) {\n                    nextLine.glyphAt(j).x -= adjustX;\n                  }\n\n                  break;\n                }\n            }\n          }\n\n          if (nextLine) {\n            currentLine.isSoftWrapped = true;\n            currentLine = nextLine;\n            lines.push(currentLine);\n            maxLineWidth = maxWidth; //after soft wrapping use maxWidth as calculated width\n          }\n        }\n\n        let fly = currentLine.glyphAt(currentLine.count);\n        fly.glyphObj = glyphObj;\n        fly.x = glyphX + lineXOffset;\n        fly.width = glyphWidth;\n        fly.charIndex = charIndex; // Handle hard line breaks\n\n        if (char === '\\n') {\n          currentLine = new TextLine();\n          lines.push(currentLine);\n          lineXOffset = -(glyphX + glyphWidth + letterSpacing * fontSize) + textIndent;\n        }\n      }); // Calculate width of each line (excluding trailing whitespace) and maximum block width\n\n      lines.forEach(line => {\n        for (let i = line.count; i--;) {\n          let {\n            glyphObj,\n            x,\n            width\n          } = line.glyphAt(i);\n\n          if (!glyphObj.isWhitespace) {\n            line.width = x + width;\n\n            if (line.width > maxLineWidth) {\n              maxLineWidth = line.width;\n            }\n\n            return;\n          }\n        }\n      }); // Find overall position adjustments for anchoring\n\n      let anchorXOffset = 0;\n      let anchorYOffset = 0;\n\n      if (anchorX) {\n        if (typeof anchorX === 'number') {\n          anchorXOffset = -anchorX;\n        } else if (typeof anchorX === 'string') {\n          anchorXOffset = -maxLineWidth * (anchorX === 'left' ? 0 : anchorX === 'center' ? 0.5 : anchorX === 'right' ? 1 : parsePercent(anchorX));\n        }\n      }\n\n      if (anchorY) {\n        if (typeof anchorY === 'number') {\n          anchorYOffset = -anchorY;\n        } else if (typeof anchorY === 'string') {\n          let height = lines.length * lineHeight;\n          anchorYOffset = anchorY === 'top' ? 0 : anchorY === 'top-baseline' ? -topBaseline : anchorY === 'middle' ? height / 2 : anchorY === 'bottom' ? height : anchorY === 'bottom-baseline' ? height - halfLeading + descender * fontSizeMult : parsePercent(anchorY) * height;\n        }\n      }\n\n      if (!metricsOnly) {\n        // Process each line, applying alignment offsets, adding each glyph to the atlas, and\n        // collecting all renderable glyphs into a single collection.\n        glyphBounds = new Float32Array(renderableGlyphCount * 4);\n        glyphAtlasIndices = new Float32Array(renderableGlyphCount);\n        visibleBounds = [INF, INF, -INF, -INF];\n        chunkedBounds = [];\n        let lineYOffset = topBaseline;\n\n        if (includeCaretPositions) {\n          caretPositions = new Float32Array(text.length * 3);\n        }\n\n        if (colorRanges) {\n          glyphColors = new Uint8Array(renderableGlyphCount * 3);\n        }\n\n        let renderableGlyphIndex = 0;\n        let prevCharIndex = -1;\n        let colorCharIndex = -1;\n        let chunk;\n        let currentColor;\n        lines.forEach(line => {\n          const {\n            count: lineGlyphCount,\n            width: lineWidth\n          } = line; // Ignore empty lines\n\n          if (lineGlyphCount > 0) {\n            // Find x offset for horizontal alignment\n            let lineXOffset = 0;\n            let justifyAdjust = 0;\n\n            if (textAlign === 'center') {\n              lineXOffset = (maxLineWidth - lineWidth) / 2;\n            } else if (textAlign === 'right') {\n              lineXOffset = maxLineWidth - lineWidth;\n            } else if (textAlign === 'justify' && line.isSoftWrapped) {\n              // just count the non-trailing whitespace characters, and we'll adjust the offsets per\n              // character in the next loop\n              let whitespaceCount = 0;\n\n              for (let i = lineGlyphCount; i--;) {\n                if (!line.glyphAt(i).glyphObj.isWhitespace) {\n                  while (i--) {\n                    if (!line.glyphAt(i).glyphObj) {\n                      debugger;\n                    }\n\n                    if (line.glyphAt(i).glyphObj.isWhitespace) {\n                      whitespaceCount++;\n                    }\n                  }\n\n                  break;\n                }\n              }\n\n              justifyAdjust = (maxLineWidth - lineWidth) / whitespaceCount;\n            }\n\n            for (let i = 0; i < lineGlyphCount; i++) {\n              const glyphInfo = line.glyphAt(i);\n              const glyphObj = glyphInfo.glyphObj; // Apply position adjustments\n\n              if (lineXOffset) glyphInfo.x += lineXOffset; // Expand whitespaces for justify alignment\n\n              if (justifyAdjust !== 0 && glyphObj.isWhitespace) {\n                lineXOffset += justifyAdjust;\n                glyphInfo.width += justifyAdjust;\n              } // Add caret positions\n\n\n              if (includeCaretPositions) {\n                const {\n                  charIndex\n                } = glyphInfo;\n                caretPositions[charIndex * 3] = glyphInfo.x + anchorXOffset; //left edge x\n\n                caretPositions[charIndex * 3 + 1] = glyphInfo.x + glyphInfo.width + anchorXOffset; //right edge x\n\n                caretPositions[charIndex * 3 + 2] = lineYOffset + caretBottomOffset + anchorYOffset; //common bottom y\n                // If we skipped any chars from the previous glyph (due to ligature subs), copy the\n                // previous glyph's info to those missing char indices. In the future we may try to\n                // use the font's LigatureCaretList table to get interior caret positions.\n\n                while (charIndex - prevCharIndex > 1) {\n                  caretPositions[(prevCharIndex + 1) * 3] = caretPositions[prevCharIndex * 3 + 1];\n                  caretPositions[(prevCharIndex + 1) * 3 + 1] = caretPositions[prevCharIndex * 3 + 1];\n                  caretPositions[(prevCharIndex + 1) * 3 + 2] = caretPositions[prevCharIndex * 3 + 2];\n                  prevCharIndex++;\n                }\n\n                prevCharIndex = charIndex;\n              } // Track current color range\n\n\n              if (colorRanges) {\n                const {\n                  charIndex\n                } = glyphInfo;\n\n                while (charIndex > colorCharIndex) {\n                  colorCharIndex++;\n\n                  if (colorRanges.hasOwnProperty(colorCharIndex)) {\n                    currentColor = colorRanges[colorCharIndex];\n                  }\n                }\n              } // Get atlas data for renderable glyphs\n\n\n              if (!glyphObj.isWhitespace && !glyphObj.isEmpty) {\n                const idx = renderableGlyphIndex++; // If we haven't seen this glyph yet, generate its SDF\n\n                let glyphAtlasInfo = atlas.glyphs[glyphObj.index];\n\n                if (!glyphAtlasInfo) {\n                  const sdfStart = now();\n                  const glyphSDFData = sdfGenerator(glyphObj, sdfGlyphSize);\n                  timings.sdf[text.charAt(glyphInfo.charIndex)] = now() - sdfStart; // Assign this glyph the next available atlas index\n\n                  glyphSDFData.atlasIndex = atlas.glyphCount++; // Queue it up in the response's newGlyphs list\n\n                  if (!newGlyphs) newGlyphs = [];\n                  newGlyphs.push(glyphSDFData); // Store its metadata (not the texture) in our atlas info\n\n                  glyphAtlasInfo = atlas.glyphs[glyphObj.index] = {\n                    atlasIndex: glyphSDFData.atlasIndex,\n                    glyphObj: glyphObj,\n                    renderingBounds: glyphSDFData.renderingBounds\n                  };\n                } // Determine final glyph quad bounds and add them to the glyphBounds array\n\n\n                const bounds = glyphAtlasInfo.renderingBounds;\n                const startIdx = idx * 4;\n                const xStart = glyphInfo.x + anchorXOffset;\n                const yStart = lineYOffset + anchorYOffset;\n                glyphBounds[startIdx] = xStart + bounds[0] * fontSizeMult;\n                glyphBounds[startIdx + 1] = yStart + bounds[1] * fontSizeMult;\n                glyphBounds[startIdx + 2] = xStart + bounds[2] * fontSizeMult;\n                glyphBounds[startIdx + 3] = yStart + bounds[3] * fontSizeMult; // Track total visible bounds\n\n                const visX0 = xStart + glyphObj.xMin * fontSizeMult;\n                const visY0 = yStart + glyphObj.yMin * fontSizeMult;\n                const visX1 = xStart + glyphObj.xMax * fontSizeMult;\n                const visY1 = yStart + glyphObj.yMax * fontSizeMult;\n                if (visX0 < visibleBounds[0]) visibleBounds[0] = visX0;\n                if (visY0 < visibleBounds[1]) visibleBounds[1] = visY0;\n                if (visX1 > visibleBounds[2]) visibleBounds[2] = visX1;\n                if (visY1 > visibleBounds[3]) visibleBounds[3] = visY1; // Track bounding rects for each chunk of N glyphs\n\n                if (idx % chunkedBoundsSize === 0) {\n                  chunk = {\n                    start: idx,\n                    end: idx,\n                    rect: [INF, INF, -INF, -INF]\n                  };\n                  chunkedBounds.push(chunk);\n                }\n\n                chunk.end++;\n                const chunkRect = chunk.rect;\n                if (visX0 < chunkRect[0]) chunkRect[0] = visX0;\n                if (visY0 < chunkRect[1]) chunkRect[1] = visY0;\n                if (visX1 > chunkRect[2]) chunkRect[2] = visX1;\n                if (visY1 > chunkRect[3]) chunkRect[3] = visY1; // Add to atlas indices array\n\n                glyphAtlasIndices[idx] = glyphAtlasInfo.atlasIndex; // Add colors\n\n                if (colorRanges) {\n                  const start = idx * 3;\n                  glyphColors[start] = currentColor >> 16 & 255;\n                  glyphColors[start + 1] = currentColor >> 8 & 255;\n                  glyphColors[start + 2] = currentColor & 255;\n                }\n              }\n            }\n          } // Increment y offset for next line\n\n\n          lineYOffset -= lineHeight;\n        });\n      } // Timing stats\n\n\n      for (let ch in timings.sdf) {\n        timings.sdfTotal += timings.sdf[ch];\n      }\n\n      timings.layout = now() - layoutStart - timings.sdfTotal;\n      timings.total = now() - mainStart;\n      callback({\n        glyphBounds,\n        //rendering quad bounds for each glyph [x1, y1, x2, y2]\n        glyphAtlasIndices,\n        //atlas indices for each glyph\n        caretPositions,\n        //x,y of bottom of cursor position before each char, plus one after last char\n        caretHeight,\n        //height of cursor from bottom to top\n        glyphColors,\n        //color for each glyph, if color ranges supplied\n        chunkedBounds,\n        //total rects per (n=chunkedBoundsSize) consecutive glyphs\n        ascender: ascender * fontSizeMult,\n        //font ascender\n        descender: descender * fontSizeMult,\n        //font descender\n        lineHeight,\n        //computed line height\n        topBaseline,\n        //y coordinate of the top line's baseline\n        blockBounds: [//bounds for the whole block of text, including vertical padding for lineHeight\n        anchorXOffset, anchorYOffset - lines.length * lineHeight, anchorXOffset + maxLineWidth, anchorYOffset],\n        visibleBounds,\n        //total bounds of visible text paths, may be larger or smaller than totalBounds\n        newGlyphSDFs: newGlyphs,\n        //if this request included any new SDFs for the atlas, they'll be included here\n        timings\n      });\n    });\n  }\n  /**\r\n   * For a given text string and font parameters, determine the resulting block dimensions\r\n   * after wrapping for the given maxWidth.\r\n   * @param args\r\n   * @param callback\r\n   */\n\n\n  function measure(args, callback) {\n    process(args, result => {\n      const [x0, y0, x1, y1] = result.blockBounds;\n      callback({\n        width: x1 - x0,\n        height: y1 - y0\n      });\n    }, {\n      metricsOnly: true\n    });\n  }\n\n  function parsePercent(str) {\n    let match = str.match(/^([\\d.]+)%$/);\n    let pct = match ? parseFloat(match[1]) : NaN;\n    return isNaN(pct) ? 0 : pct / 100;\n  }\n\n  function now() {\n    return (self.performance || Date).now();\n  } // Array-backed structure for a single line's glyphs data\n\n\n  function TextLine() {\n    this.data = [];\n  }\n\n  TextLine.prototype = {\n    width: 0,\n    isSoftWrapped: false,\n\n    get count() {\n      return Math.ceil(this.data.length / 4);\n    },\n\n    glyphAt(i) {\n      let fly = TextLine.flyweight;\n      fly.data = this.data;\n      fly.index = i;\n      return fly;\n    },\n\n    splitAt(i) {\n      let newLine = new TextLine();\n      newLine.data = this.data.splice(i * 4);\n      return newLine;\n    }\n\n  };\n  TextLine.flyweight = ['glyphObj', 'x', 'width', 'charIndex'].reduce((obj, prop, i, all) => {\n    Object.defineProperty(obj, prop, {\n      get() {\n        return this.data[this.index * 4 + i];\n      },\n\n      set(val) {\n        this.data[this.index * 4 + i] = val;\n      }\n\n    });\n    return obj;\n  }, {\n    data: null,\n    index: 0\n  });\n  return {\n    process,\n    measure,\n    loadFont\n  };\n}\n/**\r\n * Index for performing fast spatial searches of a glyph's line segments.\r\n * @return {{addLineSegment:function, findNearestSignedDistance:function}}\r\n */\n\n\nfunction createGlyphSegmentsIndex() {\n  let needsSort = false;\n  const segments = [];\n\n  function sortSegments() {\n    if (needsSort) {\n      // sort by maxX, this will let us short-circuit some loops below\n      segments.sort(function (a, b) {\n        return a.maxX - b.maxX;\n      });\n      needsSort = false;\n    }\n  }\n  /**\r\n   * Add a line segment to the index.\r\n   * @param x0\r\n   * @param y0\r\n   * @param x1\r\n   * @param y1\r\n   */\n\n\n  function addLineSegment(x0, y0, x1, y1) {\n    const segment = {\n      x0,\n      y0,\n      x1,\n      y1,\n      minX: Math.min(x0, x1),\n      minY: Math.min(y0, y1),\n      maxX: Math.max(x0, x1),\n      maxY: Math.max(y0, y1)\n    };\n    segments.push(segment);\n    needsSort = true;\n  }\n  /**\r\n   * For a given x/y, search the index for the closest line segment and return\r\n   * its signed distance. Negative = inside, positive = outside, zero = on edge\r\n   * @param x\r\n   * @param y\r\n   * @returns {number}\r\n   */\n\n\n  function findNearestSignedDistance(x, y) {\n    sortSegments();\n    let closestDistSq = Infinity;\n    let closestDist = Infinity;\n\n    for (let i = segments.length; i--;) {\n      const seg = segments[i];\n      if (seg.maxX + closestDist <= x) break; //sorting by maxX means no more can be closer, so we can short-circuit\n\n      if (x + closestDist > seg.minX && y - closestDist < seg.maxY && y + closestDist > seg.minY) {\n        const distSq = absSquareDistanceToLineSegment(x, y, seg.x0, seg.y0, seg.x1, seg.y1);\n\n        if (distSq < closestDistSq) {\n          closestDistSq = distSq;\n          closestDist = Math.sqrt(closestDistSq);\n        }\n      }\n    } // Flip to negative distance if inside the poly\n\n\n    if (isPointInPoly(x, y)) {\n      closestDist = -closestDist;\n    }\n\n    return closestDist;\n  } // Determine whether the given point lies inside or outside the glyph. Uses a simple\n  // ray casting algorithm using a ray pointing east from the point.\n\n\n  function isPointInPoly(x, y) {\n    sortSegments();\n    let inside = false;\n\n    for (let i = segments.length; i--;) {\n      const seg = segments[i];\n      if (seg.maxX <= x) break; //sorting by maxX means no more can cross, so we can short-circuit\n\n      if (seg.minY < y && seg.maxY > y) {\n        const intersects = seg.y0 > y !== seg.y1 > y && x < (seg.x1 - seg.x0) * (y - seg.y0) / (seg.y1 - seg.y0) + seg.x0;\n\n        if (intersects) {\n          inside = !inside;\n        }\n      }\n    }\n\n    return inside;\n  } // Find the absolute distance from a point to a line segment at closest approach\n\n\n  function absSquareDistanceToLineSegment(x, y, lineX0, lineY0, lineX1, lineY1) {\n    const ldx = lineX1 - lineX0;\n    const ldy = lineY1 - lineY0;\n    const lengthSq = ldx * ldx + ldy * ldy;\n    const t = lengthSq ? Math.max(0, Math.min(1, ((x - lineX0) * ldx + (y - lineY0) * ldy) / lengthSq)) : 0;\n    const dx = x - (lineX0 + t * ldx);\n    const dy = y - (lineY0 + t * ldy);\n    return dx * dx + dy * dy;\n  }\n\n  return {\n    addLineSegment,\n    findNearestSignedDistance\n  };\n} // Custom bundle of Typr.js (https://github.com/photopea/Typr.js) for use in troika-3d-text. \n// Original MIT license applies: https://github.com/photopea/Typr.js/blob/gh-pages/LICENSE\n\n\nfunction typrFactory() {\n  const window = self; // Begin Typr.js\n\n  var Typr = {};\n\n  Typr.parse = function (buff) {\n    var bin = Typr._bin;\n    var data = new Uint8Array(buff);\n    var tag = bin.readASCII(data, 0, 4);\n\n    if (tag == \"ttcf\") {\n      var offset = 4;\n      var majV = bin.readUshort(data, offset);\n      offset += 2;\n      var minV = bin.readUshort(data, offset);\n      offset += 2;\n      var numF = bin.readUint(data, offset);\n      offset += 4;\n      var fnts = [];\n\n      for (var i = 0; i < numF; i++) {\n        var foff = bin.readUint(data, offset);\n        offset += 4;\n        fnts.push(Typr._readFont(data, foff));\n      }\n\n      return fnts;\n    } else return [Typr._readFont(data, 0)];\n  };\n\n  Typr._readFont = function (data, offset) {\n    var bin = Typr._bin;\n    var ooff = offset;\n    var sfnt_version = bin.readFixed(data, offset);\n    offset += 4;\n    var numTables = bin.readUshort(data, offset);\n    offset += 2;\n    var searchRange = bin.readUshort(data, offset);\n    offset += 2;\n    var entrySelector = bin.readUshort(data, offset);\n    offset += 2;\n    var rangeShift = bin.readUshort(data, offset);\n    offset += 2;\n    var tags = [\"cmap\", \"head\", \"hhea\", \"maxp\", \"hmtx\", \"name\", \"OS/2\", \"post\", //\"cvt\",\n    //\"fpgm\",\n    \"loca\", \"glyf\", \"kern\", //\"prep\"\n    //\"gasp\"\n    \"CFF \", \"GPOS\", \"GSUB\", \"SVG \" //\"VORG\",\n    ];\n    var obj = {\n      _data: data,\n      _offset: ooff\n    }; //console.log(sfnt_version, numTables, searchRange, entrySelector, rangeShift);\n\n    var tabs = {};\n\n    for (var i = 0; i < numTables; i++) {\n      var tag = bin.readASCII(data, offset, 4);\n      offset += 4;\n      var checkSum = bin.readUint(data, offset);\n      offset += 4;\n      var toffset = bin.readUint(data, offset);\n      offset += 4;\n      var length = bin.readUint(data, offset);\n      offset += 4;\n      tabs[tag] = {\n        offset: toffset,\n        length: length\n      }; //if(tags.indexOf(tag)==-1) console.log(\"unknown tag\", tag, length);\n    }\n\n    for (var i = 0; i < tags.length; i++) {\n      var t = tags[i]; //console.log(t);\n      //if(tabs[t]) console.log(t, tabs[t].offset, tabs[t].length);\n\n      if (tabs[t]) obj[t.trim()] = Typr[t.trim()].parse(data, tabs[t].offset, tabs[t].length, obj);\n    }\n\n    return obj;\n  };\n\n  Typr._tabOffset = function (data, tab, foff) {\n    var bin = Typr._bin;\n    var numTables = bin.readUshort(data, foff + 4);\n    var offset = foff + 12;\n\n    for (var i = 0; i < numTables; i++) {\n      var tag = bin.readASCII(data, offset, 4);\n      offset += 4;\n      var checkSum = bin.readUint(data, offset);\n      offset += 4;\n      var toffset = bin.readUint(data, offset);\n      offset += 4;\n      var length = bin.readUint(data, offset);\n      offset += 4;\n      if (tag == tab) return toffset;\n    }\n\n    return 0;\n  };\n\n  Typr._bin = {\n    readFixed: function (data, o) {\n      return (data[o] << 8 | data[o + 1]) + (data[o + 2] << 8 | data[o + 3]) / (256 * 256 + 4);\n    },\n    readF2dot14: function (data, o) {\n      var num = Typr._bin.readShort(data, o);\n\n      return num / 16384;\n    },\n    readInt: function (buff, p) {\n      //if(p>=buff.length) throw \"error\";\n      var a = Typr._bin.t.uint8;\n      a[0] = buff[p + 3];\n      a[1] = buff[p + 2];\n      a[2] = buff[p + 1];\n      a[3] = buff[p];\n      return Typr._bin.t.int32[0];\n    },\n    readInt8: function (buff, p) {\n      //if(p>=buff.length) throw \"error\";\n      var a = Typr._bin.t.uint8;\n      a[0] = buff[p];\n      return Typr._bin.t.int8[0];\n    },\n    readShort: function (buff, p) {\n      //if(p>=buff.length) throw \"error\";\n      var a = Typr._bin.t.uint8;\n      a[1] = buff[p];\n      a[0] = buff[p + 1];\n      return Typr._bin.t.int16[0];\n    },\n    readUshort: function (buff, p) {\n      //if(p>=buff.length) throw \"error\";\n      return buff[p] << 8 | buff[p + 1];\n    },\n    readUshorts: function (buff, p, len) {\n      var arr = [];\n\n      for (var i = 0; i < len; i++) arr.push(Typr._bin.readUshort(buff, p + i * 2));\n\n      return arr;\n    },\n    readUint: function (buff, p) {\n      //if(p>=buff.length) throw \"error\";\n      var a = Typr._bin.t.uint8;\n      a[3] = buff[p];\n      a[2] = buff[p + 1];\n      a[1] = buff[p + 2];\n      a[0] = buff[p + 3];\n      return Typr._bin.t.uint32[0];\n    },\n    readUint64: function (buff, p) {\n      //if(p>=buff.length) throw \"error\";\n      return Typr._bin.readUint(buff, p) * (0xffffffff + 1) + Typr._bin.readUint(buff, p + 4);\n    },\n    readASCII: function (buff, p, l) // l : length in Characters (not Bytes)\n    {\n      //if(p>=buff.length) throw \"error\";\n      var s = \"\";\n\n      for (var i = 0; i < l; i++) s += String.fromCharCode(buff[p + i]);\n\n      return s;\n    },\n    readUnicode: function (buff, p, l) {\n      //if(p>=buff.length) throw \"error\";\n      var s = \"\";\n\n      for (var i = 0; i < l; i++) {\n        var c = buff[p++] << 8 | buff[p++];\n        s += String.fromCharCode(c);\n      }\n\n      return s;\n    },\n    _tdec: window[\"TextDecoder\"] ? new window[\"TextDecoder\"]() : null,\n    readUTF8: function (buff, p, l) {\n      var tdec = Typr._bin._tdec;\n      if (tdec && p == 0 && l == buff.length) return tdec[\"decode\"](buff);\n      return Typr._bin.readASCII(buff, p, l);\n    },\n    readBytes: function (buff, p, l) {\n      //if(p>=buff.length) throw \"error\";\n      var arr = [];\n\n      for (var i = 0; i < l; i++) arr.push(buff[p + i]);\n\n      return arr;\n    },\n    readASCIIArray: function (buff, p, l) // l : length in Characters (not Bytes)\n    {\n      //if(p>=buff.length) throw \"error\";\n      var s = [];\n\n      for (var i = 0; i < l; i++) s.push(String.fromCharCode(buff[p + i]));\n\n      return s;\n    }\n  };\n  Typr._bin.t = {\n    buff: new ArrayBuffer(8)\n  };\n  Typr._bin.t.int8 = new Int8Array(Typr._bin.t.buff);\n  Typr._bin.t.uint8 = new Uint8Array(Typr._bin.t.buff);\n  Typr._bin.t.int16 = new Int16Array(Typr._bin.t.buff);\n  Typr._bin.t.uint16 = new Uint16Array(Typr._bin.t.buff);\n  Typr._bin.t.int32 = new Int32Array(Typr._bin.t.buff);\n  Typr._bin.t.uint32 = new Uint32Array(Typr._bin.t.buff); // OpenType Layout Common Table Formats\n\n  Typr._lctf = {};\n\n  Typr._lctf.parse = function (data, offset, length, font, subt) {\n    var bin = Typr._bin;\n    var obj = {};\n    var offset0 = offset;\n    var tableVersion = bin.readFixed(data, offset);\n    offset += 4;\n    var offScriptList = bin.readUshort(data, offset);\n    offset += 2;\n    var offFeatureList = bin.readUshort(data, offset);\n    offset += 2;\n    var offLookupList = bin.readUshort(data, offset);\n    offset += 2;\n    obj.scriptList = Typr._lctf.readScriptList(data, offset0 + offScriptList);\n    obj.featureList = Typr._lctf.readFeatureList(data, offset0 + offFeatureList);\n    obj.lookupList = Typr._lctf.readLookupList(data, offset0 + offLookupList, subt);\n    return obj;\n  };\n\n  Typr._lctf.readLookupList = function (data, offset, subt) {\n    var bin = Typr._bin;\n    var offset0 = offset;\n    var obj = [];\n    var count = bin.readUshort(data, offset);\n    offset += 2;\n\n    for (var i = 0; i < count; i++) {\n      var noff = bin.readUshort(data, offset);\n      offset += 2;\n\n      var lut = Typr._lctf.readLookupTable(data, offset0 + noff, subt);\n\n      obj.push(lut);\n    }\n\n    return obj;\n  };\n\n  Typr._lctf.readLookupTable = function (data, offset, subt) {\n    //console.log(\"Parsing lookup table\", offset);\n    var bin = Typr._bin;\n    var offset0 = offset;\n    var obj = {\n      tabs: []\n    };\n    obj.ltype = bin.readUshort(data, offset);\n    offset += 2;\n    obj.flag = bin.readUshort(data, offset);\n    offset += 2;\n    var cnt = bin.readUshort(data, offset);\n    offset += 2;\n\n    for (var i = 0; i < cnt; i++) {\n      var noff = bin.readUshort(data, offset);\n      offset += 2;\n      var tab = subt(data, obj.ltype, offset0 + noff); //console.log(obj.type, tab);\n\n      obj.tabs.push(tab);\n    }\n\n    return obj;\n  };\n\n  Typr._lctf.numOfOnes = function (n) {\n    var num = 0;\n\n    for (var i = 0; i < 32; i++) if ((n >>> i & 1) != 0) num++;\n\n    return num;\n  };\n\n  Typr._lctf.readClassDef = function (data, offset) {\n    var bin = Typr._bin;\n    var obj = [];\n    var format = bin.readUshort(data, offset);\n    offset += 2;\n\n    if (format == 1) {\n      var startGlyph = bin.readUshort(data, offset);\n      offset += 2;\n      var glyphCount = bin.readUshort(data, offset);\n      offset += 2;\n\n      for (var i = 0; i < glyphCount; i++) {\n        obj.push(startGlyph + i);\n        obj.push(startGlyph + i);\n        obj.push(bin.readUshort(data, offset));\n        offset += 2;\n      }\n    }\n\n    if (format == 2) {\n      var count = bin.readUshort(data, offset);\n      offset += 2;\n\n      for (var i = 0; i < count; i++) {\n        obj.push(bin.readUshort(data, offset));\n        offset += 2;\n        obj.push(bin.readUshort(data, offset));\n        offset += 2;\n        obj.push(bin.readUshort(data, offset));\n        offset += 2;\n      }\n    }\n\n    return obj;\n  };\n\n  Typr._lctf.getInterval = function (tab, val) {\n    for (var i = 0; i < tab.length; i += 3) {\n      var start = tab[i],\n          end = tab[i + 1],\n          index = tab[i + 2];\n      if (start <= val && val <= end) return i;\n    }\n\n    return -1;\n  };\n\n  Typr._lctf.readCoverage = function (data, offset) {\n    var bin = Typr._bin;\n    var cvg = {};\n    cvg.fmt = bin.readUshort(data, offset);\n    offset += 2;\n    var count = bin.readUshort(data, offset);\n    offset += 2; //console.log(\"parsing coverage\", offset-4, format, count);\n\n    if (cvg.fmt == 1) cvg.tab = bin.readUshorts(data, offset, count);\n    if (cvg.fmt == 2) cvg.tab = bin.readUshorts(data, offset, count * 3);\n    return cvg;\n  };\n\n  Typr._lctf.coverageIndex = function (cvg, val) {\n    var tab = cvg.tab;\n    if (cvg.fmt == 1) return tab.indexOf(val);\n\n    if (cvg.fmt == 2) {\n      var ind = Typr._lctf.getInterval(tab, val);\n\n      if (ind != -1) return tab[ind + 2] + (val - tab[ind]);\n    }\n\n    return -1;\n  };\n\n  Typr._lctf.readFeatureList = function (data, offset) {\n    var bin = Typr._bin;\n    var offset0 = offset;\n    var obj = [];\n    var count = bin.readUshort(data, offset);\n    offset += 2;\n\n    for (var i = 0; i < count; i++) {\n      var tag = bin.readASCII(data, offset, 4);\n      offset += 4;\n      var noff = bin.readUshort(data, offset);\n      offset += 2;\n      obj.push({\n        tag: tag.trim(),\n        tab: Typr._lctf.readFeatureTable(data, offset0 + noff)\n      });\n    }\n\n    return obj;\n  };\n\n  Typr._lctf.readFeatureTable = function (data, offset) {\n    var bin = Typr._bin;\n    var featureParams = bin.readUshort(data, offset);\n    offset += 2; // = 0\n\n    var lookupCount = bin.readUshort(data, offset);\n    offset += 2;\n    var indices = [];\n\n    for (var i = 0; i < lookupCount; i++) indices.push(bin.readUshort(data, offset + 2 * i));\n\n    return indices;\n  };\n\n  Typr._lctf.readScriptList = function (data, offset) {\n    var bin = Typr._bin;\n    var offset0 = offset;\n    var obj = {};\n    var count = bin.readUshort(data, offset);\n    offset += 2;\n\n    for (var i = 0; i < count; i++) {\n      var tag = bin.readASCII(data, offset, 4);\n      offset += 4;\n      var noff = bin.readUshort(data, offset);\n      offset += 2;\n      obj[tag.trim()] = Typr._lctf.readScriptTable(data, offset0 + noff);\n    }\n\n    return obj;\n  };\n\n  Typr._lctf.readScriptTable = function (data, offset) {\n    var bin = Typr._bin;\n    var offset0 = offset;\n    var obj = {};\n    var defLangSysOff = bin.readUshort(data, offset);\n    offset += 2;\n    obj.default = Typr._lctf.readLangSysTable(data, offset0 + defLangSysOff);\n    var langSysCount = bin.readUshort(data, offset);\n    offset += 2;\n\n    for (var i = 0; i < langSysCount; i++) {\n      var tag = bin.readASCII(data, offset, 4);\n      offset += 4;\n      var langSysOff = bin.readUshort(data, offset);\n      offset += 2;\n      obj[tag.trim()] = Typr._lctf.readLangSysTable(data, offset0 + langSysOff);\n    }\n\n    return obj;\n  };\n\n  Typr._lctf.readLangSysTable = function (data, offset) {\n    var bin = Typr._bin;\n    var obj = {};\n    var lookupOrder = bin.readUshort(data, offset);\n    offset += 2; //if(lookupOrder!=0)  throw \"lookupOrder not 0\";\n\n    obj.reqFeature = bin.readUshort(data, offset);\n    offset += 2; //if(obj.reqFeature != 0xffff) throw \"reqFeatureIndex != 0xffff\";\n    //console.log(lookupOrder, obj.reqFeature);\n\n    var featureCount = bin.readUshort(data, offset);\n    offset += 2;\n    obj.features = bin.readUshorts(data, offset, featureCount);\n    return obj;\n  };\n\n  Typr.CFF = {};\n\n  Typr.CFF.parse = function (data, offset, length) {\n    var bin = Typr._bin;\n    data = new Uint8Array(data.buffer, offset, length);\n    offset = 0; // Header\n\n    var major = data[offset];\n    offset++;\n    var minor = data[offset];\n    offset++;\n    var hdrSize = data[offset];\n    offset++;\n    var offsize = data[offset];\n    offset++; //console.log(major, minor, hdrSize, offsize);\n    // Name INDEX\n\n    var ninds = [];\n    offset = Typr.CFF.readIndex(data, offset, ninds);\n    var names = [];\n\n    for (var i = 0; i < ninds.length - 1; i++) names.push(bin.readASCII(data, offset + ninds[i], ninds[i + 1] - ninds[i]));\n\n    offset += ninds[ninds.length - 1]; // Top DICT INDEX\n\n    var tdinds = [];\n    offset = Typr.CFF.readIndex(data, offset, tdinds); //console.log(tdinds);\n    // Top DICT Data\n\n    var topDicts = [];\n\n    for (var i = 0; i < tdinds.length - 1; i++) topDicts.push(Typr.CFF.readDict(data, offset + tdinds[i], offset + tdinds[i + 1]));\n\n    offset += tdinds[tdinds.length - 1];\n    var topdict = topDicts[0]; //console.log(topdict);\n    // String INDEX\n\n    var sinds = [];\n    offset = Typr.CFF.readIndex(data, offset, sinds); // String Data\n\n    var strings = [];\n\n    for (var i = 0; i < sinds.length - 1; i++) strings.push(bin.readASCII(data, offset + sinds[i], sinds[i + 1] - sinds[i]));\n\n    offset += sinds[sinds.length - 1]; // Global Subr INDEX  (subroutines)\t\t\n\n    Typr.CFF.readSubrs(data, offset, topdict); // charstrings\n\n    if (topdict.CharStrings) {\n      offset = topdict.CharStrings;\n      var sinds = [];\n      offset = Typr.CFF.readIndex(data, offset, sinds);\n      var cstr = [];\n\n      for (var i = 0; i < sinds.length - 1; i++) cstr.push(bin.readBytes(data, offset + sinds[i], sinds[i + 1] - sinds[i])); //offset += sinds[sinds.length-1];\n\n\n      topdict.CharStrings = cstr; //console.log(topdict.CharStrings);\n    } // CID font\n\n\n    if (topdict.ROS) {\n      offset = topdict.FDArray;\n      var fdind = [];\n      offset = Typr.CFF.readIndex(data, offset, fdind);\n      topdict.FDArray = [];\n\n      for (var i = 0; i < fdind.length - 1; i++) {\n        var dict = Typr.CFF.readDict(data, offset + fdind[i], offset + fdind[i + 1]);\n\n        Typr.CFF._readFDict(data, dict, strings);\n\n        topdict.FDArray.push(dict);\n      }\n\n      offset += fdind[fdind.length - 1];\n      offset = topdict.FDSelect;\n      topdict.FDSelect = [];\n      var fmt = data[offset];\n      offset++;\n\n      if (fmt == 3) {\n        var rns = bin.readUshort(data, offset);\n        offset += 2;\n\n        for (var i = 0; i < rns + 1; i++) {\n          topdict.FDSelect.push(bin.readUshort(data, offset), data[offset + 2]);\n          offset += 3;\n        }\n      } else throw fmt;\n    } // Encoding\n\n\n    if (topdict.Encoding) topdict.Encoding = Typr.CFF.readEncoding(data, topdict.Encoding, topdict.CharStrings.length); // charset\n\n    if (topdict.charset) topdict.charset = Typr.CFF.readCharset(data, topdict.charset, topdict.CharStrings.length);\n\n    Typr.CFF._readFDict(data, topdict, strings);\n\n    return topdict;\n  };\n\n  Typr.CFF._readFDict = function (data, dict, ss) {\n    var offset;\n\n    if (dict.Private) {\n      offset = dict.Private[1];\n      dict.Private = Typr.CFF.readDict(data, offset, offset + dict.Private[0]);\n      if (dict.Private.Subrs) Typr.CFF.readSubrs(data, offset + dict.Private.Subrs, dict.Private);\n    }\n\n    for (var p in dict) if ([\"FamilyName\", \"FontName\", \"FullName\", \"Notice\", \"version\", \"Copyright\"].indexOf(p) != -1) dict[p] = ss[dict[p] - 426 + 35];\n  };\n\n  Typr.CFF.readSubrs = function (data, offset, obj) {\n    var bin = Typr._bin;\n    var gsubinds = [];\n    offset = Typr.CFF.readIndex(data, offset, gsubinds);\n    var bias,\n        nSubrs = gsubinds.length;\n    if (nSubrs < 1240) bias = 107;else if (nSubrs < 33900) bias = 1131;else bias = 32768;\n    obj.Bias = bias;\n    obj.Subrs = [];\n\n    for (var i = 0; i < gsubinds.length - 1; i++) obj.Subrs.push(bin.readBytes(data, offset + gsubinds[i], gsubinds[i + 1] - gsubinds[i])); //offset += gsubinds[gsubinds.length-1];\n\n  };\n\n  Typr.CFF.tableSE = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 0, 111, 112, 113, 114, 0, 115, 116, 117, 118, 119, 120, 121, 122, 0, 123, 0, 124, 125, 126, 127, 128, 129, 130, 131, 0, 132, 133, 0, 134, 135, 136, 137, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 138, 0, 139, 0, 0, 0, 0, 140, 141, 142, 143, 0, 0, 0, 0, 0, 144, 0, 0, 0, 145, 0, 0, 146, 147, 148, 149, 0, 0, 0, 0];\n\n  Typr.CFF.glyphByUnicode = function (cff, code) {\n    for (var i = 0; i < cff.charset.length; i++) if (cff.charset[i] == code) return i;\n\n    return -1;\n  };\n\n  Typr.CFF.glyphBySE = function (cff, charcode) // glyph by standard encoding\n  {\n    if (charcode < 0 || charcode > 255) return -1;\n    return Typr.CFF.glyphByUnicode(cff, Typr.CFF.tableSE[charcode]);\n  };\n\n  Typr.CFF.readEncoding = function (data, offset, num) {\n    var bin = Typr._bin;\n    var array = ['.notdef'];\n    var format = data[offset];\n    offset++; //console.log(\"Encoding\");\n    //console.log(format);\n\n    if (format == 0) {\n      var nCodes = data[offset];\n      offset++;\n\n      for (var i = 0; i < nCodes; i++) array.push(data[offset + i]);\n    }\n    /*\r\n    else if(format==1 || format==2)\r\n    {\r\n    \twhile(charset.length<num)\r\n    \t{\r\n    \t\tvar first = bin.readUshort(data, offset);  offset+=2;\r\n    \t\tvar nLeft=0;\r\n    \t\tif(format==1) {  nLeft = data[offset];  offset++;  }\r\n    \t\telse          {  nLeft = bin.readUshort(data, offset);  offset+=2;  }\r\n    \t\tfor(var i=0; i<=nLeft; i++)  {  charset.push(first);  first++;  }\r\n    \t}\r\n    }\r\n    */\n    else throw \"error: unknown encoding format: \" + format;\n\n    return array;\n  };\n\n  Typr.CFF.readCharset = function (data, offset, num) {\n    var bin = Typr._bin;\n    var charset = ['.notdef'];\n    var format = data[offset];\n    offset++;\n\n    if (format == 0) {\n      for (var i = 0; i < num; i++) {\n        var first = bin.readUshort(data, offset);\n        offset += 2;\n        charset.push(first);\n      }\n    } else if (format == 1 || format == 2) {\n      while (charset.length < num) {\n        var first = bin.readUshort(data, offset);\n        offset += 2;\n        var nLeft = 0;\n\n        if (format == 1) {\n          nLeft = data[offset];\n          offset++;\n        } else {\n          nLeft = bin.readUshort(data, offset);\n          offset += 2;\n        }\n\n        for (var i = 0; i <= nLeft; i++) {\n          charset.push(first);\n          first++;\n        }\n      }\n    } else throw \"error: format: \" + format;\n\n    return charset;\n  };\n\n  Typr.CFF.readIndex = function (data, offset, inds) {\n    var bin = Typr._bin;\n    var count = bin.readUshort(data, offset) + 1;\n    offset += 2;\n    var offsize = data[offset];\n    offset++;\n    if (offsize == 1) for (var i = 0; i < count; i++) inds.push(data[offset + i]);else if (offsize == 2) for (var i = 0; i < count; i++) inds.push(bin.readUshort(data, offset + i * 2));else if (offsize == 3) for (var i = 0; i < count; i++) inds.push(bin.readUint(data, offset + i * 3 - 1) & 0x00ffffff);else if (count != 1) throw \"unsupported offset size: \" + offsize + \", count: \" + count;\n    offset += count * offsize;\n    return offset - 1;\n  };\n\n  Typr.CFF.getCharString = function (data, offset, o) {\n    var bin = Typr._bin;\n    var b0 = data[offset],\n        b1 = data[offset + 1],\n        b2 = data[offset + 2],\n        b3 = data[offset + 3],\n        b4 = data[offset + 4];\n    var vs = 1;\n    var op = null,\n        val = null; // operand\n\n    if (b0 <= 20) {\n      op = b0;\n      vs = 1;\n    }\n\n    if (b0 == 12) {\n      op = b0 * 100 + b1;\n      vs = 2;\n    } //if(b0==19 || b0==20) { op = b0/*+\" \"+b1*/;  vs=2; }\n\n\n    if (21 <= b0 && b0 <= 27) {\n      op = b0;\n      vs = 1;\n    }\n\n    if (b0 == 28) {\n      val = bin.readShort(data, offset + 1);\n      vs = 3;\n    }\n\n    if (29 <= b0 && b0 <= 31) {\n      op = b0;\n      vs = 1;\n    }\n\n    if (32 <= b0 && b0 <= 246) {\n      val = b0 - 139;\n      vs = 1;\n    }\n\n    if (247 <= b0 && b0 <= 250) {\n      val = (b0 - 247) * 256 + b1 + 108;\n      vs = 2;\n    }\n\n    if (251 <= b0 && b0 <= 254) {\n      val = -(b0 - 251) * 256 - b1 - 108;\n      vs = 2;\n    }\n\n    if (b0 == 255) {\n      val = bin.readInt(data, offset + 1) / 0xffff;\n      vs = 5;\n    }\n\n    o.val = val != null ? val : \"o\" + op;\n    o.size = vs;\n  };\n\n  Typr.CFF.readCharString = function (data, offset, length) {\n    var end = offset + length;\n    var bin = Typr._bin;\n    var arr = [];\n\n    while (offset < end) {\n      var b0 = data[offset],\n          b1 = data[offset + 1],\n          b2 = data[offset + 2],\n          b3 = data[offset + 3],\n          b4 = data[offset + 4];\n      var vs = 1;\n      var op = null,\n          val = null; // operand\n\n      if (b0 <= 20) {\n        op = b0;\n        vs = 1;\n      }\n\n      if (b0 == 12) {\n        op = b0 * 100 + b1;\n        vs = 2;\n      }\n\n      if (b0 == 19 || b0 == 20) {\n        op = b0\n        /*+\" \"+b1*/\n        ;\n        vs = 2;\n      }\n\n      if (21 <= b0 && b0 <= 27) {\n        op = b0;\n        vs = 1;\n      }\n\n      if (b0 == 28) {\n        val = bin.readShort(data, offset + 1);\n        vs = 3;\n      }\n\n      if (29 <= b0 && b0 <= 31) {\n        op = b0;\n        vs = 1;\n      }\n\n      if (32 <= b0 && b0 <= 246) {\n        val = b0 - 139;\n        vs = 1;\n      }\n\n      if (247 <= b0 && b0 <= 250) {\n        val = (b0 - 247) * 256 + b1 + 108;\n        vs = 2;\n      }\n\n      if (251 <= b0 && b0 <= 254) {\n        val = -(b0 - 251) * 256 - b1 - 108;\n        vs = 2;\n      }\n\n      if (b0 == 255) {\n        val = bin.readInt(data, offset + 1) / 0xffff;\n        vs = 5;\n      }\n\n      arr.push(val != null ? val : \"o\" + op);\n      offset += vs; //var cv = arr[arr.length-1];\n      //if(cv==undefined) throw \"error\";\n      //console.log()\n    }\n\n    return arr;\n  };\n\n  Typr.CFF.readDict = function (data, offset, end) {\n    var bin = Typr._bin; //var dict = [];\n\n    var dict = {};\n    var carr = [];\n\n    while (offset < end) {\n      var b0 = data[offset],\n          b1 = data[offset + 1],\n          b2 = data[offset + 2],\n          b3 = data[offset + 3],\n          b4 = data[offset + 4];\n      var vs = 1;\n      var key = null,\n          val = null; // operand\n\n      if (b0 == 28) {\n        val = bin.readShort(data, offset + 1);\n        vs = 3;\n      }\n\n      if (b0 == 29) {\n        val = bin.readInt(data, offset + 1);\n        vs = 5;\n      }\n\n      if (32 <= b0 && b0 <= 246) {\n        val = b0 - 139;\n        vs = 1;\n      }\n\n      if (247 <= b0 && b0 <= 250) {\n        val = (b0 - 247) * 256 + b1 + 108;\n        vs = 2;\n      }\n\n      if (251 <= b0 && b0 <= 254) {\n        val = -(b0 - 251) * 256 - b1 - 108;\n        vs = 2;\n      }\n\n      if (b0 == 255) {\n        val = bin.readInt(data, offset + 1) / 0xffff;\n        vs = 5;\n        throw \"unknown number\";\n      }\n\n      if (b0 == 30) {\n        var nibs = [];\n        vs = 1;\n\n        while (true) {\n          var b = data[offset + vs];\n          vs++;\n          var nib0 = b >> 4,\n              nib1 = b & 0xf;\n          if (nib0 != 0xf) nibs.push(nib0);\n          if (nib1 != 0xf) nibs.push(nib1);\n          if (nib1 == 0xf) break;\n        }\n\n        var s = \"\";\n        var chars = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, \".\", \"e\", \"e-\", \"reserved\", \"-\", \"endOfNumber\"];\n\n        for (var i = 0; i < nibs.length; i++) s += chars[nibs[i]]; //console.log(nibs);\n\n\n        val = parseFloat(s);\n      }\n\n      if (b0 <= 21) // operator\n        {\n          var keys = [\"version\", \"Notice\", \"FullName\", \"FamilyName\", \"Weight\", \"FontBBox\", \"BlueValues\", \"OtherBlues\", \"FamilyBlues\", \"FamilyOtherBlues\", \"StdHW\", \"StdVW\", \"escape\", \"UniqueID\", \"XUID\", \"charset\", \"Encoding\", \"CharStrings\", \"Private\", \"Subrs\", \"defaultWidthX\", \"nominalWidthX\"];\n          key = keys[b0];\n          vs = 1;\n\n          if (b0 == 12) {\n            var keys = [\"Copyright\", \"isFixedPitch\", \"ItalicAngle\", \"UnderlinePosition\", \"UnderlineThickness\", \"PaintType\", \"CharstringType\", \"FontMatrix\", \"StrokeWidth\", \"BlueScale\", \"BlueShift\", \"BlueFuzz\", \"StemSnapH\", \"StemSnapV\", \"ForceBold\", 0, 0, \"LanguageGroup\", \"ExpansionFactor\", \"initialRandomSeed\", \"SyntheticBase\", \"PostScript\", \"BaseFontName\", \"BaseFontBlend\", 0, 0, 0, 0, 0, 0, \"ROS\", \"CIDFontVersion\", \"CIDFontRevision\", \"CIDFontType\", \"CIDCount\", \"UIDBase\", \"FDArray\", \"FDSelect\", \"FontName\"];\n            key = keys[b1];\n            vs = 2;\n          }\n        }\n\n      if (key != null) {\n        dict[key] = carr.length == 1 ? carr[0] : carr;\n        carr = [];\n      } else carr.push(val);\n\n      offset += vs;\n    }\n\n    return dict;\n  };\n\n  Typr.cmap = {};\n\n  Typr.cmap.parse = function (data, offset, length) {\n    data = new Uint8Array(data.buffer, offset, length);\n    offset = 0;\n    var bin = Typr._bin;\n    var obj = {};\n    var version = bin.readUshort(data, offset);\n    offset += 2;\n    var numTables = bin.readUshort(data, offset);\n    offset += 2; //console.log(version, numTables);\n\n    var offs = [];\n    obj.tables = [];\n\n    for (var i = 0; i < numTables; i++) {\n      var platformID = bin.readUshort(data, offset);\n      offset += 2;\n      var encodingID = bin.readUshort(data, offset);\n      offset += 2;\n      var noffset = bin.readUint(data, offset);\n      offset += 4;\n      var id = \"p\" + platformID + \"e\" + encodingID; //console.log(\"cmap subtable\", platformID, encodingID, noffset);\n\n      var tind = offs.indexOf(noffset);\n\n      if (tind == -1) {\n        tind = obj.tables.length;\n        var subt;\n        offs.push(noffset);\n        var format = bin.readUshort(data, noffset);\n        if (format == 0) subt = Typr.cmap.parse0(data, noffset);else if (format == 4) subt = Typr.cmap.parse4(data, noffset);else if (format == 6) subt = Typr.cmap.parse6(data, noffset);else if (format == 12) subt = Typr.cmap.parse12(data, noffset);else console.log(\"unknown format: \" + format, platformID, encodingID, noffset);\n        obj.tables.push(subt);\n      }\n\n      if (obj[id] != null) throw \"multiple tables for one platform+encoding\";\n      obj[id] = tind;\n    }\n\n    return obj;\n  };\n\n  Typr.cmap.parse0 = function (data, offset) {\n    var bin = Typr._bin;\n    var obj = {};\n    obj.format = bin.readUshort(data, offset);\n    offset += 2;\n    var len = bin.readUshort(data, offset);\n    offset += 2;\n    var lang = bin.readUshort(data, offset);\n    offset += 2;\n    obj.map = [];\n\n    for (var i = 0; i < len - 6; i++) obj.map.push(data[offset + i]);\n\n    return obj;\n  };\n\n  Typr.cmap.parse4 = function (data, offset) {\n    var bin = Typr._bin;\n    var offset0 = offset;\n    var obj = {};\n    obj.format = bin.readUshort(data, offset);\n    offset += 2;\n    var length = bin.readUshort(data, offset);\n    offset += 2;\n    var language = bin.readUshort(data, offset);\n    offset += 2;\n    var segCountX2 = bin.readUshort(data, offset);\n    offset += 2;\n    var segCount = segCountX2 / 2;\n    obj.searchRange = bin.readUshort(data, offset);\n    offset += 2;\n    obj.entrySelector = bin.readUshort(data, offset);\n    offset += 2;\n    obj.rangeShift = bin.readUshort(data, offset);\n    offset += 2;\n    obj.endCount = bin.readUshorts(data, offset, segCount);\n    offset += segCount * 2;\n    offset += 2;\n    obj.startCount = bin.readUshorts(data, offset, segCount);\n    offset += segCount * 2;\n    obj.idDelta = [];\n\n    for (var i = 0; i < segCount; i++) {\n      obj.idDelta.push(bin.readShort(data, offset));\n      offset += 2;\n    }\n\n    obj.idRangeOffset = bin.readUshorts(data, offset, segCount);\n    offset += segCount * 2;\n    obj.glyphIdArray = [];\n\n    while (offset < offset0 + length) {\n      obj.glyphIdArray.push(bin.readUshort(data, offset));\n      offset += 2;\n    }\n\n    return obj;\n  };\n\n  Typr.cmap.parse6 = function (data, offset) {\n    var bin = Typr._bin;\n    var obj = {};\n    obj.format = bin.readUshort(data, offset);\n    offset += 2;\n    var length = bin.readUshort(data, offset);\n    offset += 2;\n    var language = bin.readUshort(data, offset);\n    offset += 2;\n    obj.firstCode = bin.readUshort(data, offset);\n    offset += 2;\n    var entryCount = bin.readUshort(data, offset);\n    offset += 2;\n    obj.glyphIdArray = [];\n\n    for (var i = 0; i < entryCount; i++) {\n      obj.glyphIdArray.push(bin.readUshort(data, offset));\n      offset += 2;\n    }\n\n    return obj;\n  };\n\n  Typr.cmap.parse12 = function (data, offset) {\n    var bin = Typr._bin;\n    var obj = {};\n    obj.format = bin.readUshort(data, offset);\n    offset += 2;\n    offset += 2;\n    var length = bin.readUint(data, offset);\n    offset += 4;\n    var lang = bin.readUint(data, offset);\n    offset += 4;\n    var nGroups = bin.readUint(data, offset);\n    offset += 4;\n    obj.groups = [];\n\n    for (var i = 0; i < nGroups; i++) {\n      var off = offset + i * 12;\n      var startCharCode = bin.readUint(data, off + 0);\n      var endCharCode = bin.readUint(data, off + 4);\n      var startGlyphID = bin.readUint(data, off + 8);\n      obj.groups.push([startCharCode, endCharCode, startGlyphID]);\n    }\n\n    return obj;\n  };\n\n  Typr.glyf = {};\n\n  Typr.glyf.parse = function (data, offset, length, font) {\n    var obj = [];\n\n    for (var g = 0; g < font.maxp.numGlyphs; g++) obj.push(null);\n\n    return obj;\n  };\n\n  Typr.glyf._parseGlyf = function (font, g) {\n    var bin = Typr._bin;\n    var data = font._data;\n    var offset = Typr._tabOffset(data, \"glyf\", font._offset) + font.loca[g];\n    if (font.loca[g] == font.loca[g + 1]) return null;\n    var gl = {};\n    gl.noc = bin.readShort(data, offset);\n    offset += 2; // number of contours\n\n    gl.xMin = bin.readShort(data, offset);\n    offset += 2;\n    gl.yMin = bin.readShort(data, offset);\n    offset += 2;\n    gl.xMax = bin.readShort(data, offset);\n    offset += 2;\n    gl.yMax = bin.readShort(data, offset);\n    offset += 2;\n    if (gl.xMin >= gl.xMax || gl.yMin >= gl.yMax) return null;\n\n    if (gl.noc > 0) {\n      gl.endPts = [];\n\n      for (var i = 0; i < gl.noc; i++) {\n        gl.endPts.push(bin.readUshort(data, offset));\n        offset += 2;\n      }\n\n      var instructionLength = bin.readUshort(data, offset);\n      offset += 2;\n      if (data.length - offset < instructionLength) return null;\n      gl.instructions = bin.readBytes(data, offset, instructionLength);\n      offset += instructionLength;\n      var crdnum = gl.endPts[gl.noc - 1] + 1;\n      gl.flags = [];\n\n      for (var i = 0; i < crdnum; i++) {\n        var flag = data[offset];\n        offset++;\n        gl.flags.push(flag);\n\n        if ((flag & 8) != 0) {\n          var rep = data[offset];\n          offset++;\n\n          for (var j = 0; j < rep; j++) {\n            gl.flags.push(flag);\n            i++;\n          }\n        }\n      }\n\n      gl.xs = [];\n\n      for (var i = 0; i < crdnum; i++) {\n        var i8 = (gl.flags[i] & 2) != 0,\n            same = (gl.flags[i] & 16) != 0;\n\n        if (i8) {\n          gl.xs.push(same ? data[offset] : -data[offset]);\n          offset++;\n        } else {\n          if (same) gl.xs.push(0);else {\n            gl.xs.push(bin.readShort(data, offset));\n            offset += 2;\n          }\n        }\n      }\n\n      gl.ys = [];\n\n      for (var i = 0; i < crdnum; i++) {\n        var i8 = (gl.flags[i] & 4) != 0,\n            same = (gl.flags[i] & 32) != 0;\n\n        if (i8) {\n          gl.ys.push(same ? data[offset] : -data[offset]);\n          offset++;\n        } else {\n          if (same) gl.ys.push(0);else {\n            gl.ys.push(bin.readShort(data, offset));\n            offset += 2;\n          }\n        }\n      }\n\n      var x = 0,\n          y = 0;\n\n      for (var i = 0; i < crdnum; i++) {\n        x += gl.xs[i];\n        y += gl.ys[i];\n        gl.xs[i] = x;\n        gl.ys[i] = y;\n      } //console.log(endPtsOfContours, instructionLength, instructions, flags, xCoordinates, yCoordinates);\n\n    } else {\n      var ARG_1_AND_2_ARE_WORDS = 1 << 0;\n      var ARGS_ARE_XY_VALUES = 1 << 1;\n      var WE_HAVE_A_SCALE = 1 << 3;\n      var MORE_COMPONENTS = 1 << 5;\n      var WE_HAVE_AN_X_AND_Y_SCALE = 1 << 6;\n      var WE_HAVE_A_TWO_BY_TWO = 1 << 7;\n      var WE_HAVE_INSTRUCTIONS = 1 << 8;\n      gl.parts = [];\n      var flags;\n\n      do {\n        flags = bin.readUshort(data, offset);\n        offset += 2;\n        var part = {\n          m: {\n            a: 1,\n            b: 0,\n            c: 0,\n            d: 1,\n            tx: 0,\n            ty: 0\n          },\n          p1: -1,\n          p2: -1\n        };\n        gl.parts.push(part);\n        part.glyphIndex = bin.readUshort(data, offset);\n        offset += 2;\n\n        if (flags & ARG_1_AND_2_ARE_WORDS) {\n          var arg1 = bin.readShort(data, offset);\n          offset += 2;\n          var arg2 = bin.readShort(data, offset);\n          offset += 2;\n        } else {\n          var arg1 = bin.readInt8(data, offset);\n          offset++;\n          var arg2 = bin.readInt8(data, offset);\n          offset++;\n        }\n\n        if (flags & ARGS_ARE_XY_VALUES) {\n          part.m.tx = arg1;\n          part.m.ty = arg2;\n        } else {\n          part.p1 = arg1;\n          part.p2 = arg2;\n        } //part.m.tx = arg1;  part.m.ty = arg2;\n        //else { throw \"params are not XY values\"; }\n\n\n        if (flags & WE_HAVE_A_SCALE) {\n          part.m.a = part.m.d = bin.readF2dot14(data, offset);\n          offset += 2;\n        } else if (flags & WE_HAVE_AN_X_AND_Y_SCALE) {\n          part.m.a = bin.readF2dot14(data, offset);\n          offset += 2;\n          part.m.d = bin.readF2dot14(data, offset);\n          offset += 2;\n        } else if (flags & WE_HAVE_A_TWO_BY_TWO) {\n          part.m.a = bin.readF2dot14(data, offset);\n          offset += 2;\n          part.m.b = bin.readF2dot14(data, offset);\n          offset += 2;\n          part.m.c = bin.readF2dot14(data, offset);\n          offset += 2;\n          part.m.d = bin.readF2dot14(data, offset);\n          offset += 2;\n        }\n      } while (flags & MORE_COMPONENTS);\n\n      if (flags & WE_HAVE_INSTRUCTIONS) {\n        var numInstr = bin.readUshort(data, offset);\n        offset += 2;\n        gl.instr = [];\n\n        for (var i = 0; i < numInstr; i++) {\n          gl.instr.push(data[offset]);\n          offset++;\n        }\n      }\n    }\n\n    return gl;\n  };\n\n  Typr.GPOS = {};\n\n  Typr.GPOS.parse = function (data, offset, length, font) {\n    return Typr._lctf.parse(data, offset, length, font, Typr.GPOS.subt);\n  };\n\n  Typr.GPOS.subt = function (data, ltype, offset) // lookup type\n  {\n    var bin = Typr._bin,\n        offset0 = offset,\n        tab = {};\n    tab.fmt = bin.readUshort(data, offset);\n    offset += 2; //console.log(ltype, tab.fmt);\n\n    if (ltype == 1 || ltype == 2 || ltype == 3 || ltype == 7 || ltype == 8 && tab.fmt <= 2) {\n      var covOff = bin.readUshort(data, offset);\n      offset += 2;\n      tab.coverage = Typr._lctf.readCoverage(data, covOff + offset0);\n    }\n\n    if (ltype == 1 && tab.fmt == 1) {\n      var valFmt1 = bin.readUshort(data, offset);\n      offset += 2;\n\n      var ones1 = Typr._lctf.numOfOnes(valFmt1);\n\n      if (valFmt1 != 0) tab.pos = Typr.GPOS.readValueRecord(data, offset, valFmt1);\n    } else if (ltype == 2) {\n      var valFmt1 = bin.readUshort(data, offset);\n      offset += 2;\n      var valFmt2 = bin.readUshort(data, offset);\n      offset += 2;\n\n      var ones1 = Typr._lctf.numOfOnes(valFmt1);\n\n      var ones2 = Typr._lctf.numOfOnes(valFmt2);\n\n      if (tab.fmt == 1) {\n        tab.pairsets = [];\n        var psc = bin.readUshort(data, offset);\n        offset += 2; // PairSetCount\n\n        for (var i = 0; i < psc; i++) {\n          var psoff = offset0 + bin.readUshort(data, offset);\n          offset += 2;\n          var pvc = bin.readUshort(data, psoff);\n          psoff += 2;\n          var arr = [];\n\n          for (var j = 0; j < pvc; j++) {\n            var gid2 = bin.readUshort(data, psoff);\n            psoff += 2;\n            var value1, value2;\n\n            if (valFmt1 != 0) {\n              value1 = Typr.GPOS.readValueRecord(data, psoff, valFmt1);\n              psoff += ones1 * 2;\n            }\n\n            if (valFmt2 != 0) {\n              value2 = Typr.GPOS.readValueRecord(data, psoff, valFmt2);\n              psoff += ones2 * 2;\n            } //if(value1!=null) throw \"e\";\n\n\n            arr.push({\n              gid2: gid2,\n              val1: value1,\n              val2: value2\n            });\n          }\n\n          tab.pairsets.push(arr);\n        }\n      }\n\n      if (tab.fmt == 2) {\n        var classDef1 = bin.readUshort(data, offset);\n        offset += 2;\n        var classDef2 = bin.readUshort(data, offset);\n        offset += 2;\n        var class1Count = bin.readUshort(data, offset);\n        offset += 2;\n        var class2Count = bin.readUshort(data, offset);\n        offset += 2;\n        tab.classDef1 = Typr._lctf.readClassDef(data, offset0 + classDef1);\n        tab.classDef2 = Typr._lctf.readClassDef(data, offset0 + classDef2);\n        tab.matrix = [];\n\n        for (var i = 0; i < class1Count; i++) {\n          var row = [];\n\n          for (var j = 0; j < class2Count; j++) {\n            var value1 = null,\n                value2 = null;\n\n            if (tab.valFmt1 != 0) {\n              value1 = Typr.GPOS.readValueRecord(data, offset, tab.valFmt1);\n              offset += ones1 * 2;\n            }\n\n            if (tab.valFmt2 != 0) {\n              value2 = Typr.GPOS.readValueRecord(data, offset, tab.valFmt2);\n              offset += ones2 * 2;\n            }\n\n            row.push({\n              val1: value1,\n              val2: value2\n            });\n          }\n\n          tab.matrix.push(row);\n        }\n      }\n    } else ;\n\n    return tab;\n  };\n\n  Typr.GPOS.readValueRecord = function (data, offset, valFmt) {\n    var bin = Typr._bin;\n    var arr = [];\n    arr.push(valFmt & 1 ? bin.readShort(data, offset) : 0);\n    offset += valFmt & 1 ? 2 : 0; // X_PLACEMENT\n\n    arr.push(valFmt & 2 ? bin.readShort(data, offset) : 0);\n    offset += valFmt & 2 ? 2 : 0; // Y_PLACEMENT\n\n    arr.push(valFmt & 4 ? bin.readShort(data, offset) : 0);\n    offset += valFmt & 4 ? 2 : 0; // X_ADVANCE\n\n    arr.push(valFmt & 8 ? bin.readShort(data, offset) : 0);\n    offset += valFmt & 8 ? 2 : 0; // Y_ADVANCE\n\n    return arr;\n  };\n\n  Typr.GSUB = {};\n\n  Typr.GSUB.parse = function (data, offset, length, font) {\n    return Typr._lctf.parse(data, offset, length, font, Typr.GSUB.subt);\n  };\n\n  Typr.GSUB.subt = function (data, ltype, offset) // lookup type\n  {\n    var bin = Typr._bin,\n        offset0 = offset,\n        tab = {};\n    tab.fmt = bin.readUshort(data, offset);\n    offset += 2;\n    if (ltype != 1 && ltype != 4 && ltype != 5 && ltype != 6) return null;\n\n    if (ltype == 1 || ltype == 4 || ltype == 5 && tab.fmt <= 2 || ltype == 6 && tab.fmt <= 2) {\n      var covOff = bin.readUshort(data, offset);\n      offset += 2;\n      tab.coverage = Typr._lctf.readCoverage(data, offset0 + covOff); // not always is coverage here\n    }\n\n    if (ltype == 1) {\n      if (tab.fmt == 1) {\n        tab.delta = bin.readShort(data, offset);\n        offset += 2;\n      } else if (tab.fmt == 2) {\n        var cnt = bin.readUshort(data, offset);\n        offset += 2;\n        tab.newg = bin.readUshorts(data, offset, cnt);\n        offset += tab.newg.length * 2;\n      }\n    } //  Ligature Substitution Subtable\n    else if (ltype == 4) {\n        tab.vals = [];\n        var cnt = bin.readUshort(data, offset);\n        offset += 2;\n\n        for (var i = 0; i < cnt; i++) {\n          var loff = bin.readUshort(data, offset);\n          offset += 2;\n          tab.vals.push(Typr.GSUB.readLigatureSet(data, offset0 + loff));\n        } //console.log(tab.coverage);\n        //console.log(tab.vals);\n\n      } //  Contextual Substitution Subtable\n      else if (ltype == 5) {\n          if (tab.fmt == 2) {\n            var cDefOffset = bin.readUshort(data, offset);\n            offset += 2;\n            tab.cDef = Typr._lctf.readClassDef(data, offset0 + cDefOffset);\n            tab.scset = [];\n            var subClassSetCount = bin.readUshort(data, offset);\n            offset += 2;\n\n            for (var i = 0; i < subClassSetCount; i++) {\n              var scsOff = bin.readUshort(data, offset);\n              offset += 2;\n              tab.scset.push(scsOff == 0 ? null : Typr.GSUB.readSubClassSet(data, offset0 + scsOff));\n            }\n          } //else console.log(\"unknown table format\", tab.fmt);\n\n        } //*\n        else if (ltype == 6) {\n            /*\r\n            if(tab.fmt==2) {\r\n            \tvar btDef = bin.readUshort(data, offset);  offset+=2;\r\n            \tvar inDef = bin.readUshort(data, offset);  offset+=2;\r\n            \tvar laDef = bin.readUshort(data, offset);  offset+=2;\r\n            \t\r\n            \ttab.btDef = Typr._lctf.readClassDef(data, offset0 + btDef);\r\n            \ttab.inDef = Typr._lctf.readClassDef(data, offset0 + inDef);\r\n            \ttab.laDef = Typr._lctf.readClassDef(data, offset0 + laDef);\r\n            \t\r\n            \ttab.scset = [];\r\n            \tvar cnt = bin.readUshort(data, offset);  offset+=2;\r\n            \tfor(var i=0; i<cnt; i++) {\r\n            \t\tvar loff = bin.readUshort(data, offset);  offset+=2;\r\n            \t\ttab.scset.push(Typr.GSUB.readChainSubClassSet(data, offset0+loff));\r\n            \t}\r\n            }\r\n            */\n            if (tab.fmt == 3) {\n              for (var i = 0; i < 3; i++) {\n                var cnt = bin.readUshort(data, offset);\n                offset += 2;\n                var cvgs = [];\n\n                for (var j = 0; j < cnt; j++) cvgs.push(Typr._lctf.readCoverage(data, offset0 + bin.readUshort(data, offset + j * 2)));\n\n                offset += cnt * 2;\n                if (i == 0) tab.backCvg = cvgs;\n                if (i == 1) tab.inptCvg = cvgs;\n                if (i == 2) tab.ahedCvg = cvgs;\n              }\n\n              var cnt = bin.readUshort(data, offset);\n              offset += 2;\n              tab.lookupRec = Typr.GSUB.readSubstLookupRecords(data, offset, cnt);\n            } //console.log(tab);\n\n          } //*/\n    //if(tab.coverage.indexOf(3)!=-1) console.log(ltype, fmt, tab);\n\n\n    return tab;\n  };\n\n  Typr.GSUB.readSubClassSet = function (data, offset) {\n    var rUs = Typr._bin.readUshort,\n        offset0 = offset,\n        lset = [];\n    var cnt = rUs(data, offset);\n    offset += 2;\n\n    for (var i = 0; i < cnt; i++) {\n      var loff = rUs(data, offset);\n      offset += 2;\n      lset.push(Typr.GSUB.readSubClassRule(data, offset0 + loff));\n    }\n\n    return lset;\n  };\n\n  Typr.GSUB.readSubClassRule = function (data, offset) {\n    var rUs = Typr._bin.readUshort,\n        rule = {};\n    var gcount = rUs(data, offset);\n    offset += 2;\n    var scount = rUs(data, offset);\n    offset += 2;\n    rule.input = [];\n\n    for (var i = 0; i < gcount - 1; i++) {\n      rule.input.push(rUs(data, offset));\n      offset += 2;\n    }\n\n    rule.substLookupRecords = Typr.GSUB.readSubstLookupRecords(data, offset, scount);\n    return rule;\n  };\n\n  Typr.GSUB.readSubstLookupRecords = function (data, offset, cnt) {\n    var rUs = Typr._bin.readUshort;\n    var out = [];\n\n    for (var i = 0; i < cnt; i++) {\n      out.push(rUs(data, offset), rUs(data, offset + 2));\n      offset += 4;\n    }\n\n    return out;\n  };\n\n  Typr.GSUB.readChainSubClassSet = function (data, offset) {\n    var bin = Typr._bin,\n        offset0 = offset,\n        lset = [];\n    var cnt = bin.readUshort(data, offset);\n    offset += 2;\n\n    for (var i = 0; i < cnt; i++) {\n      var loff = bin.readUshort(data, offset);\n      offset += 2;\n      lset.push(Typr.GSUB.readChainSubClassRule(data, offset0 + loff));\n    }\n\n    return lset;\n  };\n\n  Typr.GSUB.readChainSubClassRule = function (data, offset) {\n    var bin = Typr._bin,\n        rule = {};\n    var pps = [\"backtrack\", \"input\", \"lookahead\"];\n\n    for (var pi = 0; pi < pps.length; pi++) {\n      var cnt = bin.readUshort(data, offset);\n      offset += 2;\n      if (pi == 1) cnt--;\n      rule[pps[pi]] = bin.readUshorts(data, offset, cnt);\n      offset += rule[pps[pi]].length * 2;\n    }\n\n    var cnt = bin.readUshort(data, offset);\n    offset += 2;\n    rule.subst = bin.readUshorts(data, offset, cnt * 2);\n    offset += rule.subst.length * 2;\n    return rule;\n  };\n\n  Typr.GSUB.readLigatureSet = function (data, offset) {\n    var bin = Typr._bin,\n        offset0 = offset,\n        lset = [];\n    var lcnt = bin.readUshort(data, offset);\n    offset += 2;\n\n    for (var j = 0; j < lcnt; j++) {\n      var loff = bin.readUshort(data, offset);\n      offset += 2;\n      lset.push(Typr.GSUB.readLigature(data, offset0 + loff));\n    }\n\n    return lset;\n  };\n\n  Typr.GSUB.readLigature = function (data, offset) {\n    var bin = Typr._bin,\n        lig = {\n      chain: []\n    };\n    lig.nglyph = bin.readUshort(data, offset);\n    offset += 2;\n    var ccnt = bin.readUshort(data, offset);\n    offset += 2;\n\n    for (var k = 0; k < ccnt - 1; k++) {\n      lig.chain.push(bin.readUshort(data, offset));\n      offset += 2;\n    }\n\n    return lig;\n  };\n\n  Typr.head = {};\n\n  Typr.head.parse = function (data, offset, length) {\n    var bin = Typr._bin;\n    var obj = {};\n    var tableVersion = bin.readFixed(data, offset);\n    offset += 4;\n    obj.fontRevision = bin.readFixed(data, offset);\n    offset += 4;\n    var checkSumAdjustment = bin.readUint(data, offset);\n    offset += 4;\n    var magicNumber = bin.readUint(data, offset);\n    offset += 4;\n    obj.flags = bin.readUshort(data, offset);\n    offset += 2;\n    obj.unitsPerEm = bin.readUshort(data, offset);\n    offset += 2;\n    obj.created = bin.readUint64(data, offset);\n    offset += 8;\n    obj.modified = bin.readUint64(data, offset);\n    offset += 8;\n    obj.xMin = bin.readShort(data, offset);\n    offset += 2;\n    obj.yMin = bin.readShort(data, offset);\n    offset += 2;\n    obj.xMax = bin.readShort(data, offset);\n    offset += 2;\n    obj.yMax = bin.readShort(data, offset);\n    offset += 2;\n    obj.macStyle = bin.readUshort(data, offset);\n    offset += 2;\n    obj.lowestRecPPEM = bin.readUshort(data, offset);\n    offset += 2;\n    obj.fontDirectionHint = bin.readShort(data, offset);\n    offset += 2;\n    obj.indexToLocFormat = bin.readShort(data, offset);\n    offset += 2;\n    obj.glyphDataFormat = bin.readShort(data, offset);\n    offset += 2;\n    return obj;\n  };\n\n  Typr.hhea = {};\n\n  Typr.hhea.parse = function (data, offset, length) {\n    var bin = Typr._bin;\n    var obj = {};\n    var tableVersion = bin.readFixed(data, offset);\n    offset += 4;\n    obj.ascender = bin.readShort(data, offset);\n    offset += 2;\n    obj.descender = bin.readShort(data, offset);\n    offset += 2;\n    obj.lineGap = bin.readShort(data, offset);\n    offset += 2;\n    obj.advanceWidthMax = bin.readUshort(data, offset);\n    offset += 2;\n    obj.minLeftSideBearing = bin.readShort(data, offset);\n    offset += 2;\n    obj.minRightSideBearing = bin.readShort(data, offset);\n    offset += 2;\n    obj.xMaxExtent = bin.readShort(data, offset);\n    offset += 2;\n    obj.caretSlopeRise = bin.readShort(data, offset);\n    offset += 2;\n    obj.caretSlopeRun = bin.readShort(data, offset);\n    offset += 2;\n    obj.caretOffset = bin.readShort(data, offset);\n    offset += 2;\n    offset += 4 * 2;\n    obj.metricDataFormat = bin.readShort(data, offset);\n    offset += 2;\n    obj.numberOfHMetrics = bin.readUshort(data, offset);\n    offset += 2;\n    return obj;\n  };\n\n  Typr.hmtx = {};\n\n  Typr.hmtx.parse = function (data, offset, length, font) {\n    var bin = Typr._bin;\n    var obj = {};\n    obj.aWidth = [];\n    obj.lsBearing = [];\n    var aw = 0,\n        lsb = 0;\n\n    for (var i = 0; i < font.maxp.numGlyphs; i++) {\n      if (i < font.hhea.numberOfHMetrics) {\n        aw = bin.readUshort(data, offset);\n        offset += 2;\n        lsb = bin.readShort(data, offset);\n        offset += 2;\n      }\n\n      obj.aWidth.push(aw);\n      obj.lsBearing.push(lsb);\n    }\n\n    return obj;\n  };\n\n  Typr.kern = {};\n\n  Typr.kern.parse = function (data, offset, length, font) {\n    var bin = Typr._bin;\n    var version = bin.readUshort(data, offset);\n    offset += 2;\n    if (version == 1) return Typr.kern.parseV1(data, offset - 2, length, font);\n    var nTables = bin.readUshort(data, offset);\n    offset += 2;\n    var map = {\n      glyph1: [],\n      rval: []\n    };\n\n    for (var i = 0; i < nTables; i++) {\n      offset += 2; // skip version\n\n      var length = bin.readUshort(data, offset);\n      offset += 2;\n      var coverage = bin.readUshort(data, offset);\n      offset += 2;\n      var format = coverage >>> 8;\n      /* I have seen format 128 once, that's why I do */\n\n      format &= 0xf;\n      if (format == 0) offset = Typr.kern.readFormat0(data, offset, map);else throw \"unknown kern table format: \" + format;\n    }\n\n    return map;\n  };\n\n  Typr.kern.parseV1 = function (data, offset, length, font) {\n    var bin = Typr._bin;\n    var version = bin.readFixed(data, offset);\n    offset += 4;\n    var nTables = bin.readUint(data, offset);\n    offset += 4;\n    var map = {\n      glyph1: [],\n      rval: []\n    };\n\n    for (var i = 0; i < nTables; i++) {\n      var length = bin.readUint(data, offset);\n      offset += 4;\n      var coverage = bin.readUshort(data, offset);\n      offset += 2;\n      var tupleIndex = bin.readUshort(data, offset);\n      offset += 2;\n      var format = coverage >>> 8;\n      /* I have seen format 128 once, that's why I do */\n\n      format &= 0xf;\n      if (format == 0) offset = Typr.kern.readFormat0(data, offset, map);else throw \"unknown kern table format: \" + format;\n    }\n\n    return map;\n  };\n\n  Typr.kern.readFormat0 = function (data, offset, map) {\n    var bin = Typr._bin;\n    var pleft = -1;\n    var nPairs = bin.readUshort(data, offset);\n    offset += 2;\n    var searchRange = bin.readUshort(data, offset);\n    offset += 2;\n    var entrySelector = bin.readUshort(data, offset);\n    offset += 2;\n    var rangeShift = bin.readUshort(data, offset);\n    offset += 2;\n\n    for (var j = 0; j < nPairs; j++) {\n      var left = bin.readUshort(data, offset);\n      offset += 2;\n      var right = bin.readUshort(data, offset);\n      offset += 2;\n      var value = bin.readShort(data, offset);\n      offset += 2;\n\n      if (left != pleft) {\n        map.glyph1.push(left);\n        map.rval.push({\n          glyph2: [],\n          vals: []\n        });\n      }\n\n      var rval = map.rval[map.rval.length - 1];\n      rval.glyph2.push(right);\n      rval.vals.push(value);\n      pleft = left;\n    }\n\n    return offset;\n  };\n\n  Typr.loca = {};\n\n  Typr.loca.parse = function (data, offset, length, font) {\n    var bin = Typr._bin;\n    var obj = [];\n    var ver = font.head.indexToLocFormat; //console.log(\"loca\", ver, length, 4*font.maxp.numGlyphs);\n\n    var len = font.maxp.numGlyphs + 1;\n    if (ver == 0) for (var i = 0; i < len; i++) obj.push(bin.readUshort(data, offset + (i << 1)) << 1);\n    if (ver == 1) for (var i = 0; i < len; i++) obj.push(bin.readUint(data, offset + (i << 2)));\n    return obj;\n  };\n\n  Typr.maxp = {};\n\n  Typr.maxp.parse = function (data, offset, length) {\n    //console.log(data.length, offset, length);\n    var bin = Typr._bin;\n    var obj = {}; // both versions 0.5 and 1.0\n\n    var ver = bin.readUint(data, offset);\n    offset += 4;\n    obj.numGlyphs = bin.readUshort(data, offset);\n    offset += 2; // only 1.0\n\n    if (ver == 0x00010000) {\n      obj.maxPoints = bin.readUshort(data, offset);\n      offset += 2;\n      obj.maxContours = bin.readUshort(data, offset);\n      offset += 2;\n      obj.maxCompositePoints = bin.readUshort(data, offset);\n      offset += 2;\n      obj.maxCompositeContours = bin.readUshort(data, offset);\n      offset += 2;\n      obj.maxZones = bin.readUshort(data, offset);\n      offset += 2;\n      obj.maxTwilightPoints = bin.readUshort(data, offset);\n      offset += 2;\n      obj.maxStorage = bin.readUshort(data, offset);\n      offset += 2;\n      obj.maxFunctionDefs = bin.readUshort(data, offset);\n      offset += 2;\n      obj.maxInstructionDefs = bin.readUshort(data, offset);\n      offset += 2;\n      obj.maxStackElements = bin.readUshort(data, offset);\n      offset += 2;\n      obj.maxSizeOfInstructions = bin.readUshort(data, offset);\n      offset += 2;\n      obj.maxComponentElements = bin.readUshort(data, offset);\n      offset += 2;\n      obj.maxComponentDepth = bin.readUshort(data, offset);\n      offset += 2;\n    }\n\n    return obj;\n  };\n\n  Typr.name = {};\n\n  Typr.name.parse = function (data, offset, length) {\n    var bin = Typr._bin;\n    var obj = {};\n    var format = bin.readUshort(data, offset);\n    offset += 2;\n    var count = bin.readUshort(data, offset);\n    offset += 2;\n    var stringOffset = bin.readUshort(data, offset);\n    offset += 2; //console.log(format,count);\n\n    var names = [\"copyright\", \"fontFamily\", \"fontSubfamily\", \"ID\", \"fullName\", \"version\", \"postScriptName\", \"trademark\", \"manufacturer\", \"designer\", \"description\", \"urlVendor\", \"urlDesigner\", \"licence\", \"licenceURL\", \"---\", \"typoFamilyName\", \"typoSubfamilyName\", \"compatibleFull\", \"sampleText\", \"postScriptCID\", \"wwsFamilyName\", \"wwsSubfamilyName\", \"lightPalette\", \"darkPalette\"];\n    var offset0 = offset;\n\n    for (var i = 0; i < count; i++) {\n      var platformID = bin.readUshort(data, offset);\n      offset += 2;\n      var encodingID = bin.readUshort(data, offset);\n      offset += 2;\n      var languageID = bin.readUshort(data, offset);\n      offset += 2;\n      var nameID = bin.readUshort(data, offset);\n      offset += 2;\n      var slen = bin.readUshort(data, offset);\n      offset += 2;\n      var noffset = bin.readUshort(data, offset);\n      offset += 2; //console.log(platformID, encodingID, languageID.toString(16), nameID, length, noffset);\n\n      var cname = names[nameID];\n      var soff = offset0 + count * 12 + noffset;\n      var str;\n      if (platformID == 0) str = bin.readUnicode(data, soff, slen / 2);else if (platformID == 3 && encodingID == 0) str = bin.readUnicode(data, soff, slen / 2);else if (encodingID == 0) str = bin.readASCII(data, soff, slen);else if (encodingID == 1) str = bin.readUnicode(data, soff, slen / 2);else if (encodingID == 3) str = bin.readUnicode(data, soff, slen / 2);else if (platformID == 1) {\n        str = bin.readASCII(data, soff, slen);\n        console.log(\"reading unknown MAC encoding \" + encodingID + \" as ASCII\");\n      } else throw \"unknown encoding \" + encodingID + \", platformID: \" + platformID;\n      var tid = \"p\" + platformID + \",\" + languageID.toString(16); //Typr._platforms[platformID];\n\n      if (obj[tid] == null) obj[tid] = {};\n      obj[tid][cname] = str;\n      obj[tid]._lang = languageID; //console.log(tid, obj[tid]);\n    }\n    /*\r\n    if(format == 1)\r\n    {\r\n    \tvar langTagCount = bin.readUshort(data, offset);  offset += 2;\r\n    \tfor(var i=0; i<langTagCount; i++)\r\n    \t{\r\n    \t\tvar length  = bin.readUshort(data, offset);  offset += 2;\r\n    \t\tvar noffset = bin.readUshort(data, offset);  offset += 2;\r\n    \t}\r\n    }\r\n    */\n    //console.log(obj);\n\n\n    for (var p in obj) if (obj[p].postScriptName != null && obj[p]._lang == 0x0409) return obj[p]; // United States\n\n\n    for (var p in obj) if (obj[p].postScriptName != null && obj[p]._lang == 0x0000) return obj[p]; // Universal\n\n\n    for (var p in obj) if (obj[p].postScriptName != null && obj[p]._lang == 0x0c0c) return obj[p]; // Canada\n\n\n    for (var p in obj) if (obj[p].postScriptName != null) return obj[p];\n\n    var tname;\n\n    for (var p in obj) {\n      tname = p;\n      break;\n    }\n\n    console.log(\"returning name table with languageID \" + obj[tname]._lang);\n    return obj[tname];\n  };\n\n  Typr[\"OS/2\"] = {};\n\n  Typr[\"OS/2\"].parse = function (data, offset, length) {\n    var bin = Typr._bin;\n    var ver = bin.readUshort(data, offset);\n    offset += 2;\n    var obj = {};\n    if (ver == 0) Typr[\"OS/2\"].version0(data, offset, obj);else if (ver == 1) Typr[\"OS/2\"].version1(data, offset, obj);else if (ver == 2 || ver == 3 || ver == 4) Typr[\"OS/2\"].version2(data, offset, obj);else if (ver == 5) Typr[\"OS/2\"].version5(data, offset, obj);else throw \"unknown OS/2 table version: \" + ver;\n    return obj;\n  };\n\n  Typr[\"OS/2\"].version0 = function (data, offset, obj) {\n    var bin = Typr._bin;\n    obj.xAvgCharWidth = bin.readShort(data, offset);\n    offset += 2;\n    obj.usWeightClass = bin.readUshort(data, offset);\n    offset += 2;\n    obj.usWidthClass = bin.readUshort(data, offset);\n    offset += 2;\n    obj.fsType = bin.readUshort(data, offset);\n    offset += 2;\n    obj.ySubscriptXSize = bin.readShort(data, offset);\n    offset += 2;\n    obj.ySubscriptYSize = bin.readShort(data, offset);\n    offset += 2;\n    obj.ySubscriptXOffset = bin.readShort(data, offset);\n    offset += 2;\n    obj.ySubscriptYOffset = bin.readShort(data, offset);\n    offset += 2;\n    obj.ySuperscriptXSize = bin.readShort(data, offset);\n    offset += 2;\n    obj.ySuperscriptYSize = bin.readShort(data, offset);\n    offset += 2;\n    obj.ySuperscriptXOffset = bin.readShort(data, offset);\n    offset += 2;\n    obj.ySuperscriptYOffset = bin.readShort(data, offset);\n    offset += 2;\n    obj.yStrikeoutSize = bin.readShort(data, offset);\n    offset += 2;\n    obj.yStrikeoutPosition = bin.readShort(data, offset);\n    offset += 2;\n    obj.sFamilyClass = bin.readShort(data, offset);\n    offset += 2;\n    obj.panose = bin.readBytes(data, offset, 10);\n    offset += 10;\n    obj.ulUnicodeRange1 = bin.readUint(data, offset);\n    offset += 4;\n    obj.ulUnicodeRange2 = bin.readUint(data, offset);\n    offset += 4;\n    obj.ulUnicodeRange3 = bin.readUint(data, offset);\n    offset += 4;\n    obj.ulUnicodeRange4 = bin.readUint(data, offset);\n    offset += 4;\n    obj.achVendID = [bin.readInt8(data, offset), bin.readInt8(data, offset + 1), bin.readInt8(data, offset + 2), bin.readInt8(data, offset + 3)];\n    offset += 4;\n    obj.fsSelection = bin.readUshort(data, offset);\n    offset += 2;\n    obj.usFirstCharIndex = bin.readUshort(data, offset);\n    offset += 2;\n    obj.usLastCharIndex = bin.readUshort(data, offset);\n    offset += 2;\n    obj.sTypoAscender = bin.readShort(data, offset);\n    offset += 2;\n    obj.sTypoDescender = bin.readShort(data, offset);\n    offset += 2;\n    obj.sTypoLineGap = bin.readShort(data, offset);\n    offset += 2;\n    obj.usWinAscent = bin.readUshort(data, offset);\n    offset += 2;\n    obj.usWinDescent = bin.readUshort(data, offset);\n    offset += 2;\n    return offset;\n  };\n\n  Typr[\"OS/2\"].version1 = function (data, offset, obj) {\n    var bin = Typr._bin;\n    offset = Typr[\"OS/2\"].version0(data, offset, obj);\n    obj.ulCodePageRange1 = bin.readUint(data, offset);\n    offset += 4;\n    obj.ulCodePageRange2 = bin.readUint(data, offset);\n    offset += 4;\n    return offset;\n  };\n\n  Typr[\"OS/2\"].version2 = function (data, offset, obj) {\n    var bin = Typr._bin;\n    offset = Typr[\"OS/2\"].version1(data, offset, obj);\n    obj.sxHeight = bin.readShort(data, offset);\n    offset += 2;\n    obj.sCapHeight = bin.readShort(data, offset);\n    offset += 2;\n    obj.usDefault = bin.readUshort(data, offset);\n    offset += 2;\n    obj.usBreak = bin.readUshort(data, offset);\n    offset += 2;\n    obj.usMaxContext = bin.readUshort(data, offset);\n    offset += 2;\n    return offset;\n  };\n\n  Typr[\"OS/2\"].version5 = function (data, offset, obj) {\n    var bin = Typr._bin;\n    offset = Typr[\"OS/2\"].version2(data, offset, obj);\n    obj.usLowerOpticalPointSize = bin.readUshort(data, offset);\n    offset += 2;\n    obj.usUpperOpticalPointSize = bin.readUshort(data, offset);\n    offset += 2;\n    return offset;\n  };\n\n  Typr.post = {};\n\n  Typr.post.parse = function (data, offset, length) {\n    var bin = Typr._bin;\n    var obj = {};\n    obj.version = bin.readFixed(data, offset);\n    offset += 4;\n    obj.italicAngle = bin.readFixed(data, offset);\n    offset += 4;\n    obj.underlinePosition = bin.readShort(data, offset);\n    offset += 2;\n    obj.underlineThickness = bin.readShort(data, offset);\n    offset += 2;\n    return obj;\n  };\n\n  Typr.SVG = {};\n\n  Typr.SVG.parse = function (data, offset, length) {\n    var bin = Typr._bin;\n    var obj = {\n      entries: []\n    };\n    var offset0 = offset;\n    var tableVersion = bin.readUshort(data, offset);\n    offset += 2;\n    var svgDocIndexOffset = bin.readUint(data, offset);\n    offset += 4;\n    var reserved = bin.readUint(data, offset);\n    offset += 4;\n    offset = svgDocIndexOffset + offset0;\n    var numEntries = bin.readUshort(data, offset);\n    offset += 2;\n\n    for (var i = 0; i < numEntries; i++) {\n      var startGlyphID = bin.readUshort(data, offset);\n      offset += 2;\n      var endGlyphID = bin.readUshort(data, offset);\n      offset += 2;\n      var svgDocOffset = bin.readUint(data, offset);\n      offset += 4;\n      var svgDocLength = bin.readUint(data, offset);\n      offset += 4;\n      var sbuf = new Uint8Array(data.buffer, offset0 + svgDocOffset + svgDocIndexOffset, svgDocLength);\n      var svg = bin.readUTF8(sbuf, 0, sbuf.length);\n\n      for (var f = startGlyphID; f <= endGlyphID; f++) {\n        obj.entries[f] = svg;\n      }\n    }\n\n    return obj;\n  };\n\n  Typr.SVG.toPath = function (str) {\n    var pth = {\n      cmds: [],\n      crds: []\n    };\n    if (str == null) return pth;\n    var prsr = new DOMParser();\n    var doc = prsr[\"parseFromString\"](str, \"image/svg+xml\");\n    var svg = doc.firstChild;\n\n    while (svg.tagName != \"svg\") svg = svg.nextSibling;\n\n    var vb = svg.getAttribute(\"viewBox\");\n    if (vb) vb = vb.trim().split(\" \").map(parseFloat);else vb = [0, 0, 1000, 1000];\n\n    Typr.SVG._toPath(svg.children, pth);\n\n    for (var i = 0; i < pth.crds.length; i += 2) {\n      var x = pth.crds[i],\n          y = pth.crds[i + 1];\n      x -= vb[0];\n      y -= vb[1];\n      y = -y;\n      pth.crds[i] = x;\n      pth.crds[i + 1] = y;\n    }\n\n    return pth;\n  };\n\n  Typr.SVG._toPath = function (nds, pth, fill) {\n    for (var ni = 0; ni < nds.length; ni++) {\n      var nd = nds[ni],\n          tn = nd.tagName;\n      var cfl = nd.getAttribute(\"fill\");\n      if (cfl == null) cfl = fill;\n      if (tn == \"g\") Typr.SVG._toPath(nd.children, pth, cfl);else if (tn == \"path\") {\n        pth.cmds.push(cfl ? cfl : \"#000000\");\n        var d = nd.getAttribute(\"d\"); //console.log(d);\n\n        var toks = Typr.SVG._tokens(d); //console.log(toks);\n\n\n        Typr.SVG._toksToPath(toks, pth);\n\n        pth.cmds.push(\"X\");\n      } else if (tn == \"defs\") ;else console.log(tn, nd);\n    }\n  };\n\n  Typr.SVG._tokens = function (d) {\n    var ts = [],\n        off = 0,\n        rn = false,\n        cn = \"\"; // reading number, current number\n\n    while (off < d.length) {\n      var cc = d.charCodeAt(off),\n          ch = d.charAt(off);\n      off++;\n      var isNum = 48 <= cc && cc <= 57 || ch == \".\" || ch == \"-\";\n\n      if (rn) {\n        if (ch == \"-\") {\n          ts.push(parseFloat(cn));\n          cn = ch;\n        } else if (isNum) cn += ch;else {\n          ts.push(parseFloat(cn));\n          if (ch != \",\" && ch != \" \") ts.push(ch);\n          rn = false;\n        }\n      } else {\n        if (isNum) {\n          cn = ch;\n          rn = true;\n        } else if (ch != \",\" && ch != \" \") ts.push(ch);\n      }\n    }\n\n    if (rn) ts.push(parseFloat(cn));\n    return ts;\n  };\n\n  Typr.SVG._toksToPath = function (ts, pth) {\n    var i = 0,\n        x = 0,\n        y = 0,\n        ox = 0,\n        oy = 0;\n    var pc = {\n      \"M\": 2,\n      \"L\": 2,\n      \"H\": 1,\n      \"V\": 1,\n      \"S\": 4,\n      \"C\": 6\n    };\n    var cmds = pth.cmds,\n        crds = pth.crds;\n\n    while (i < ts.length) {\n      var cmd = ts[i];\n      i++;\n\n      if (cmd == \"z\") {\n        cmds.push(\"Z\");\n        x = ox;\n        y = oy;\n      } else {\n        var cmu = cmd.toUpperCase();\n\n        var ps = pc[cmu],\n            reps = Typr.SVG._reps(ts, i, ps);\n\n        for (var j = 0; j < reps; j++) {\n          var xi = 0,\n              yi = 0;\n\n          if (cmd != cmu) {\n            xi = x;\n            yi = y;\n          }\n\n          if (cmu == \"M\") {\n            x = xi + ts[i++];\n            y = yi + ts[i++];\n            cmds.push(\"M\");\n            crds.push(x, y);\n            ox = x;\n            oy = y;\n          } else if (cmu == \"L\") {\n            x = xi + ts[i++];\n            y = yi + ts[i++];\n            cmds.push(\"L\");\n            crds.push(x, y);\n          } else if (cmu == \"H\") {\n            x = xi + ts[i++];\n            cmds.push(\"L\");\n            crds.push(x, y);\n          } else if (cmu == \"V\") {\n            y = yi + ts[i++];\n            cmds.push(\"L\");\n            crds.push(x, y);\n          } else if (cmu == \"C\") {\n            var x1 = xi + ts[i++],\n                y1 = yi + ts[i++],\n                x2 = xi + ts[i++],\n                y2 = yi + ts[i++],\n                x3 = xi + ts[i++],\n                y3 = yi + ts[i++];\n            cmds.push(\"C\");\n            crds.push(x1, y1, x2, y2, x3, y3);\n            x = x3;\n            y = y3;\n          } else if (cmu == \"S\") {\n            var co = Math.max(crds.length - 4, 0);\n            var x1 = x + x - crds[co],\n                y1 = y + y - crds[co + 1];\n            var x2 = xi + ts[i++],\n                y2 = yi + ts[i++],\n                x3 = xi + ts[i++],\n                y3 = yi + ts[i++];\n            cmds.push(\"C\");\n            crds.push(x1, y1, x2, y2, x3, y3);\n            x = x3;\n            y = y3;\n          } else console.log(\"Unknown SVG command \" + cmd);\n        }\n      }\n    }\n  };\n\n  Typr.SVG._reps = function (ts, off, ps) {\n    var i = off;\n\n    while (i < ts.length) {\n      if (typeof ts[i] == \"string\") break;\n      i += ps;\n    }\n\n    return (i - off) / ps;\n  }; // End Typr.js\n  // Begin Typr.U.js\n\n\n  if (Typr == null) Typr = {};\n  if (Typr.U == null) Typr.U = {};\n\n  Typr.U.codeToGlyph = function (font, code) {\n    var cmap = font.cmap;\n    var tind = -1;\n    if (cmap.p0e4 != null) tind = cmap.p0e4;else if (cmap.p3e1 != null) tind = cmap.p3e1;else if (cmap.p1e0 != null) tind = cmap.p1e0;else if (cmap.p0e3 != null) tind = cmap.p0e3;\n    if (tind == -1) throw \"no familiar platform and encoding!\";\n    var tab = cmap.tables[tind];\n\n    if (tab.format == 0) {\n      if (code >= tab.map.length) return 0;\n      return tab.map[code];\n    } else if (tab.format == 4) {\n      var sind = -1;\n\n      for (var i = 0; i < tab.endCount.length; i++) if (code <= tab.endCount[i]) {\n        sind = i;\n        break;\n      }\n\n      if (sind == -1) return 0;\n      if (tab.startCount[sind] > code) return 0;\n      var gli = 0;\n      if (tab.idRangeOffset[sind] != 0) gli = tab.glyphIdArray[code - tab.startCount[sind] + (tab.idRangeOffset[sind] >> 1) - (tab.idRangeOffset.length - sind)];else gli = code + tab.idDelta[sind];\n      return gli & 0xFFFF;\n    } else if (tab.format == 12) {\n      if (code > tab.groups[tab.groups.length - 1][1]) return 0;\n\n      for (var i = 0; i < tab.groups.length; i++) {\n        var grp = tab.groups[i];\n        if (grp[0] <= code && code <= grp[1]) return grp[2] + (code - grp[0]);\n      }\n\n      return 0;\n    } else throw \"unknown cmap table format \" + tab.format;\n  };\n\n  Typr.U.glyphToPath = function (font, gid) {\n    var path = {\n      cmds: [],\n      crds: []\n    };\n\n    if (font.SVG && font.SVG.entries[gid]) {\n      var p = font.SVG.entries[gid];\n      if (p == null) return path;\n\n      if (typeof p == \"string\") {\n        p = Typr.SVG.toPath(p);\n        font.SVG.entries[gid] = p;\n      }\n\n      return p;\n    } else if (font.CFF) {\n      var state = {\n        x: 0,\n        y: 0,\n        stack: [],\n        nStems: 0,\n        haveWidth: false,\n        width: font.CFF.Private ? font.CFF.Private.defaultWidthX : 0,\n        open: false\n      };\n      var cff = font.CFF,\n          pdct = font.CFF.Private;\n\n      if (cff.ROS) {\n        var gi = 0;\n\n        while (cff.FDSelect[gi + 2] <= gid) gi += 2;\n\n        pdct = cff.FDArray[cff.FDSelect[gi + 1]].Private;\n      }\n\n      Typr.U._drawCFF(font.CFF.CharStrings[gid], state, cff, pdct, path);\n    } else if (font.glyf) {\n      Typr.U._drawGlyf(gid, font, path);\n    }\n\n    return path;\n  };\n\n  Typr.U._drawGlyf = function (gid, font, path) {\n    var gl = font.glyf[gid];\n    if (gl == null) gl = font.glyf[gid] = Typr.glyf._parseGlyf(font, gid);\n\n    if (gl != null) {\n      if (gl.noc > -1) Typr.U._simpleGlyph(gl, path);else Typr.U._compoGlyph(gl, font, path);\n    }\n  };\n\n  Typr.U._simpleGlyph = function (gl, p) {\n    for (var c = 0; c < gl.noc; c++) {\n      var i0 = c == 0 ? 0 : gl.endPts[c - 1] + 1;\n      var il = gl.endPts[c];\n\n      for (var i = i0; i <= il; i++) {\n        var pr = i == i0 ? il : i - 1;\n        var nx = i == il ? i0 : i + 1;\n        var onCurve = gl.flags[i] & 1;\n        var prOnCurve = gl.flags[pr] & 1;\n        var nxOnCurve = gl.flags[nx] & 1;\n        var x = gl.xs[i],\n            y = gl.ys[i];\n\n        if (i == i0) {\n          if (onCurve) {\n            if (prOnCurve) Typr.U.P.moveTo(p, gl.xs[pr], gl.ys[pr]);else {\n              Typr.U.P.moveTo(p, x, y);\n              continue;\n              /*  will do curveTo at il  */\n            }\n          } else {\n            if (prOnCurve) Typr.U.P.moveTo(p, gl.xs[pr], gl.ys[pr]);else Typr.U.P.moveTo(p, (gl.xs[pr] + x) / 2, (gl.ys[pr] + y) / 2);\n          }\n        }\n\n        if (onCurve) {\n          if (prOnCurve) Typr.U.P.lineTo(p, x, y);\n        } else {\n          if (nxOnCurve) Typr.U.P.qcurveTo(p, x, y, gl.xs[nx], gl.ys[nx]);else Typr.U.P.qcurveTo(p, x, y, (x + gl.xs[nx]) / 2, (y + gl.ys[nx]) / 2);\n        }\n      }\n\n      Typr.U.P.closePath(p);\n    }\n  };\n\n  Typr.U._compoGlyph = function (gl, font, p) {\n    for (var j = 0; j < gl.parts.length; j++) {\n      var path = {\n        cmds: [],\n        crds: []\n      };\n      var prt = gl.parts[j];\n\n      Typr.U._drawGlyf(prt.glyphIndex, font, path);\n\n      var m = prt.m;\n\n      for (var i = 0; i < path.crds.length; i += 2) {\n        var x = path.crds[i],\n            y = path.crds[i + 1];\n        p.crds.push(x * m.a + y * m.b + m.tx);\n        p.crds.push(x * m.c + y * m.d + m.ty);\n      }\n\n      for (var i = 0; i < path.cmds.length; i++) p.cmds.push(path.cmds[i]);\n    }\n  };\n\n  Typr.U._getGlyphClass = function (g, cd) {\n    var intr = Typr._lctf.getInterval(cd, g);\n\n    return intr == -1 ? 0 : cd[intr + 2]; //for(var i=0; i<cd.start.length; i++) \n    //\tif(cd.start[i]<=g && cd.end[i]>=g) return cd.class[i];\n    //return 0;\n  };\n\n  Typr.U.getPairAdjustment = function (font, g1, g2) {\n    //return 0;\n    if (font.GPOS) {\n      var gpos = font[\"GPOS\"];\n      var llist = gpos.lookupList,\n          flist = gpos.featureList;\n      var tused = [];\n\n      for (var i = 0; i < flist.length; i++) {\n        var fl = flist[i]; //console.log(fl);\n\n        if (fl.tag != \"kern\") continue;\n\n        for (var ti = 0; ti < fl.tab.length; ti++) {\n          if (tused[fl.tab[ti]]) continue;\n          tused[fl.tab[ti]] = true;\n          var tab = llist[fl.tab[ti]]; //console.log(tab);\n\n          for (var j = 0; j < tab.tabs.length; j++) {\n            if (tab.tabs[i] == null) continue;\n            var ltab = tab.tabs[j],\n                ind;\n\n            if (ltab.coverage) {\n              ind = Typr._lctf.coverageIndex(ltab.coverage, g1);\n              if (ind == -1) continue;\n            }\n\n            if (tab.ltype == 1) ;else if (tab.ltype == 2) {\n              var adj;\n\n              if (ltab.fmt == 1) {\n                var right = ltab.pairsets[ind];\n\n                for (var i = 0; i < right.length; i++) if (right[i].gid2 == g2) adj = right[i];\n              } else if (ltab.fmt == 2) {\n                var c1 = Typr.U._getGlyphClass(g1, ltab.classDef1);\n\n                var c2 = Typr.U._getGlyphClass(g2, ltab.classDef2);\n\n                adj = ltab.matrix[c1][c2];\n              } //if(adj) console.log(ltab, adj);\n\n\n              if (adj && adj.val2) return adj.val2[2];\n            }\n          }\n        }\n      }\n    }\n\n    if (font.kern) {\n      var ind1 = font.kern.glyph1.indexOf(g1);\n\n      if (ind1 != -1) {\n        var ind2 = font.kern.rval[ind1].glyph2.indexOf(g2);\n        if (ind2 != -1) return font.kern.rval[ind1].vals[ind2];\n      }\n    }\n\n    return 0;\n  };\n\n  Typr.U.stringToGlyphs = function (font, str) {\n    var gls = [];\n\n    for (var i = 0; i < str.length; i++) {\n      var cc = str.codePointAt(i);\n      if (cc > 0xffff) i++;\n      gls.push(Typr.U.codeToGlyph(font, cc));\n    }\n\n    for (var i = 0; i < str.length; i++) {\n      var cc = str.codePointAt(i); //\n\n      if (cc == 2367) {\n        var t = gls[i - 1];\n        gls[i - 1] = gls[i];\n        gls[i] = t;\n      } //if(cc==2381) {  var t=gls[i+1];  gls[i+1]=gls[i];  gls[i]=t;  }\n\n\n      if (cc > 0xffff) i++;\n    } //console.log(gls.slice(0));\n    //console.log(gls);  return gls;\n\n\n    var gsub = font[\"GSUB\"];\n    if (gsub == null) return gls;\n    var llist = gsub.lookupList,\n        flist = gsub.featureList;\n    var cligs = [\"rlig\", \"liga\", \"mset\", \"isol\", \"init\", \"fina\", \"medi\", \"half\", \"pres\", \"blws\"\n    /* Tibetan fonts like Himalaya.ttf */\n    ]; //console.log(gls.slice(0));\n\n    var tused = [];\n\n    for (var fi = 0; fi < flist.length; fi++) {\n      var fl = flist[fi];\n      if (cligs.indexOf(fl.tag) == -1) continue; //if(fl.tag==\"blwf\") continue;\n      //console.log(fl);\n      //console.log(fl.tag);\n\n      for (var ti = 0; ti < fl.tab.length; ti++) {\n        if (tused[fl.tab[ti]]) continue;\n        tused[fl.tab[ti]] = true;\n        var tab = llist[fl.tab[ti]]; //console.log(fl.tab[ti], tab.ltype);\n        //console.log(fl.tag, tab);\n\n        for (var ci = 0; ci < gls.length; ci++) {\n          var feat = Typr.U._getWPfeature(str, ci);\n\n          if (\"isol,init,fina,medi\".indexOf(fl.tag) != -1 && fl.tag != feat) continue;\n\n          Typr.U._applySubs(gls, ci, tab, llist);\n        }\n      }\n    }\n\n    return gls;\n  };\n\n  Typr.U._getWPfeature = function (str, ci) {\n    // get Word Position feature\n    var wsep = \"\\n\\t\\\" ,.:;!?()  ،\";\n    var R = \"آأؤإاةدذرزوٱٲٳٵٶٷڈډڊڋڌڍڎڏڐڑڒړڔڕږڗژڙۀۃۄۅۆۇۈۉۊۋۍۏےۓەۮۯܐܕܖܗܘܙܞܨܪܬܯݍݙݚݛݫݬݱݳݴݸݹࡀࡆࡇࡉࡔࡧࡩࡪࢪࢫࢬࢮࢱࢲࢹૅેૉ૊૎૏ૐ૑૒૝ૡ૤૯஁ஃ஄அஉ஌எஏ஑னப஫஬\";\n    var L = \"ꡲ્૗\";\n    var slft = ci == 0 || wsep.indexOf(str[ci - 1]) != -1;\n    var srgt = ci == str.length - 1 || wsep.indexOf(str[ci + 1]) != -1;\n    if (!slft && R.indexOf(str[ci - 1]) != -1) slft = true;\n    if (!srgt && R.indexOf(str[ci]) != -1) srgt = true;\n    if (!srgt && L.indexOf(str[ci + 1]) != -1) srgt = true;\n    if (!slft && L.indexOf(str[ci]) != -1) slft = true;\n    var feat = null;\n    if (slft) feat = srgt ? \"isol\" : \"init\";else feat = srgt ? \"fina\" : \"medi\";\n    return feat;\n  };\n\n  Typr.U._applySubs = function (gls, ci, tab, llist) {\n    var rlim = gls.length - ci - 1; //if(ci==0) console.log(\"++++ \", tab.ltype);\n\n    for (var j = 0; j < tab.tabs.length; j++) {\n      if (tab.tabs[j] == null) continue;\n      var ltab = tab.tabs[j],\n          ind;\n\n      if (ltab.coverage) {\n        ind = Typr._lctf.coverageIndex(ltab.coverage, gls[ci]);\n        if (ind == -1) continue;\n      } //if(ci==0) console.log(ind, ltab);\n      //*\n\n\n      if (tab.ltype == 1) {\n        var gl = gls[ci];\n        if (ltab.fmt == 1) gls[ci] = gls[ci] + ltab.delta;else gls[ci] = ltab.newg[ind]; //console.log(\"applying ... 1\", ci, gl, gls[ci]);\n      } //*\n      else if (tab.ltype == 4) {\n          var vals = ltab.vals[ind];\n\n          for (var k = 0; k < vals.length; k++) {\n            var lig = vals[k],\n                rl = lig.chain.length;\n            if (rl > rlim) continue;\n            var good = true,\n                em1 = 0;\n\n            for (var l = 0; l < rl; l++) {\n              while (gls[ci + em1 + (1 + l)] == -1) em1++;\n\n              if (lig.chain[l] != gls[ci + em1 + (1 + l)]) good = false;\n            }\n\n            if (!good) continue;\n            gls[ci] = lig.nglyph;\n\n            for (var l = 0; l < rl + em1; l++) gls[ci + l + 1] = -1;\n\n            break; // first character changed, other ligatures do not apply anymore\n            //console.log(\"lig\", ci, lig.chain, lig.nglyph);\n            //console.log(\"applying ...\");\n          }\n        } else if (tab.ltype == 5 && ltab.fmt == 2) {\n          var cind = Typr._lctf.getInterval(ltab.cDef, gls[ci]);\n\n          var cls = ltab.cDef[cind + 2],\n              scs = ltab.scset[cls];\n\n          for (var i = 0; i < scs.length; i++) {\n            var sc = scs[i],\n                inp = sc.input;\n            if (inp.length > rlim) continue;\n            var good = true;\n\n            for (var l = 0; l < inp.length; l++) {\n              var cind2 = Typr._lctf.getInterval(ltab.cDef, gls[ci + 1 + l]);\n\n              if (cind == -1 && ltab.cDef[cind2 + 2] != inp[l]) {\n                good = false;\n                break;\n              }\n            }\n\n            if (!good) continue; //console.log(ci, gl);\n\n            var lrs = sc.substLookupRecords;\n\n            for (var k = 0; k < lrs.length; k += 2) {\n              var gi = lrs[k],\n                  tabi = lrs[k + 1]; //Typr.U._applyType1(gls, ci+gi, llist[tabi]);\n              //console.log(tabi, gls[ci+gi], llist[tabi]);\n            }\n          }\n        } else if (tab.ltype == 6 && ltab.fmt == 3) {\n          //if(ltab.backCvg.length==0) return;\n          if (!Typr.U._glsCovered(gls, ltab.backCvg, ci - ltab.backCvg.length)) continue;\n          if (!Typr.U._glsCovered(gls, ltab.inptCvg, ci)) continue;\n          if (!Typr.U._glsCovered(gls, ltab.ahedCvg, ci + ltab.inptCvg.length)) continue; //console.log(ci, ltab);\n\n          var lr = ltab.lookupRec; //console.log(ci, gl, lr);\n\n          for (var i = 0; i < lr.length; i += 2) {\n            var cind = lr[i],\n                tab2 = llist[lr[i + 1]]; //console.log(\"-\", lr[i+1], tab2);\n\n            Typr.U._applySubs(gls, ci + cind, tab2, llist);\n          }\n        } //else console.log(\"Unknown table\", tab.ltype, ltab.fmt);\n      //*/\n\n    }\n  };\n\n  Typr.U._glsCovered = function (gls, cvgs, ci) {\n    for (var i = 0; i < cvgs.length; i++) {\n      var ind = Typr._lctf.coverageIndex(cvgs[i], gls[ci + i]);\n\n      if (ind == -1) return false;\n    }\n\n    return true;\n  };\n\n  Typr.U.glyphsToPath = function (font, gls, clr) {\n    //gls = gls.reverse();//gls.slice(0,12).concat(gls.slice(12).reverse());\n    var tpath = {\n      cmds: [],\n      crds: []\n    };\n    var x = 0;\n\n    for (var i = 0; i < gls.length; i++) {\n      var gid = gls[i];\n      if (gid == -1) continue;\n      var gid2 = i < gls.length - 1 && gls[i + 1] != -1 ? gls[i + 1] : 0;\n      var path = Typr.U.glyphToPath(font, gid);\n\n      for (var j = 0; j < path.crds.length; j += 2) {\n        tpath.crds.push(path.crds[j] + x);\n        tpath.crds.push(path.crds[j + 1]);\n      }\n\n      if (clr) tpath.cmds.push(clr);\n\n      for (var j = 0; j < path.cmds.length; j++) tpath.cmds.push(path.cmds[j]);\n\n      if (clr) tpath.cmds.push(\"X\");\n      x += font.hmtx.aWidth[gid]; // - font.hmtx.lsBearing[gid];\n\n      if (i < gls.length - 1) x += Typr.U.getPairAdjustment(font, gid, gid2);\n    }\n\n    return tpath;\n  };\n\n  Typr.U.pathToSVG = function (path, prec) {\n    if (prec == null) prec = 5;\n    var out = [],\n        co = 0,\n        lmap = {\n      \"M\": 2,\n      \"L\": 2,\n      \"Q\": 4,\n      \"C\": 6\n    };\n\n    for (var i = 0; i < path.cmds.length; i++) {\n      var cmd = path.cmds[i],\n          cn = co + (lmap[cmd] ? lmap[cmd] : 0);\n      out.push(cmd);\n\n      while (co < cn) {\n        var c = path.crds[co++];\n        out.push(parseFloat(c.toFixed(prec)) + (co == cn ? \"\" : \" \"));\n      }\n    }\n\n    return out.join(\"\");\n  };\n\n  Typr.U.pathToContext = function (path, ctx) {\n    var c = 0,\n        crds = path.crds;\n\n    for (var j = 0; j < path.cmds.length; j++) {\n      var cmd = path.cmds[j];\n\n      if (cmd == \"M\") {\n        ctx.moveTo(crds[c], crds[c + 1]);\n        c += 2;\n      } else if (cmd == \"L\") {\n        ctx.lineTo(crds[c], crds[c + 1]);\n        c += 2;\n      } else if (cmd == \"C\") {\n        ctx.bezierCurveTo(crds[c], crds[c + 1], crds[c + 2], crds[c + 3], crds[c + 4], crds[c + 5]);\n        c += 6;\n      } else if (cmd == \"Q\") {\n        ctx.quadraticCurveTo(crds[c], crds[c + 1], crds[c + 2], crds[c + 3]);\n        c += 4;\n      } else if (cmd.charAt(0) == \"#\") {\n        ctx.beginPath();\n        ctx.fillStyle = cmd;\n      } else if (cmd == \"Z\") {\n        ctx.closePath();\n      } else if (cmd == \"X\") {\n        ctx.fill();\n      }\n    }\n  };\n\n  Typr.U.P = {};\n\n  Typr.U.P.moveTo = function (p, x, y) {\n    p.cmds.push(\"M\");\n    p.crds.push(x, y);\n  };\n\n  Typr.U.P.lineTo = function (p, x, y) {\n    p.cmds.push(\"L\");\n    p.crds.push(x, y);\n  };\n\n  Typr.U.P.curveTo = function (p, a, b, c, d, e, f) {\n    p.cmds.push(\"C\");\n    p.crds.push(a, b, c, d, e, f);\n  };\n\n  Typr.U.P.qcurveTo = function (p, a, b, c, d) {\n    p.cmds.push(\"Q\");\n    p.crds.push(a, b, c, d);\n  };\n\n  Typr.U.P.closePath = function (p) {\n    p.cmds.push(\"Z\");\n  };\n\n  Typr.U._drawCFF = function (cmds, state, font, pdct, p) {\n    var stack = state.stack;\n    var nStems = state.nStems,\n        haveWidth = state.haveWidth,\n        width = state.width,\n        open = state.open;\n    var i = 0;\n    var x = state.x,\n        y = state.y,\n        c1x = 0,\n        c1y = 0,\n        c2x = 0,\n        c2y = 0,\n        c3x = 0,\n        c3y = 0,\n        c4x = 0,\n        c4y = 0,\n        jpx = 0,\n        jpy = 0;\n    var o = {\n      val: 0,\n      size: 0\n    }; //console.log(cmds);\n\n    while (i < cmds.length) {\n      Typr.CFF.getCharString(cmds, i, o);\n      var v = o.val;\n      i += o.size;\n\n      if (v == \"o1\" || v == \"o18\") //  hstem || hstemhm\n        {\n          var hasWidthArg; // The number of stem operators on the stack is always even.\n          // If the value is uneven, that means a width is specified.\n\n          hasWidthArg = stack.length % 2 !== 0;\n\n          if (hasWidthArg && !haveWidth) {\n            width = stack.shift() + pdct.nominalWidthX;\n          }\n\n          nStems += stack.length >> 1;\n          stack.length = 0;\n          haveWidth = true;\n        } else if (v == \"o3\" || v == \"o23\") // vstem || vstemhm\n        {\n          var hasWidthArg; // The number of stem operators on the stack is always even.\n          // If the value is uneven, that means a width is specified.\n\n          hasWidthArg = stack.length % 2 !== 0;\n\n          if (hasWidthArg && !haveWidth) {\n            width = stack.shift() + pdct.nominalWidthX;\n          }\n\n          nStems += stack.length >> 1;\n          stack.length = 0;\n          haveWidth = true;\n        } else if (v == \"o4\") {\n        if (stack.length > 1 && !haveWidth) {\n          width = stack.shift() + pdct.nominalWidthX;\n          haveWidth = true;\n        }\n\n        if (open) Typr.U.P.closePath(p);\n        y += stack.pop();\n        Typr.U.P.moveTo(p, x, y);\n        open = true;\n      } else if (v == \"o5\") {\n        while (stack.length > 0) {\n          x += stack.shift();\n          y += stack.shift();\n          Typr.U.P.lineTo(p, x, y);\n        }\n      } else if (v == \"o6\" || v == \"o7\") // hlineto || vlineto\n        {\n          var count = stack.length;\n          var isX = v == \"o6\";\n\n          for (var j = 0; j < count; j++) {\n            var sval = stack.shift();\n            if (isX) x += sval;else y += sval;\n            isX = !isX;\n            Typr.U.P.lineTo(p, x, y);\n          }\n        } else if (v == \"o8\" || v == \"o24\") // rrcurveto || rcurveline\n        {\n          var count = stack.length;\n          var index = 0;\n\n          while (index + 6 <= count) {\n            c1x = x + stack.shift();\n            c1y = y + stack.shift();\n            c2x = c1x + stack.shift();\n            c2y = c1y + stack.shift();\n            x = c2x + stack.shift();\n            y = c2y + stack.shift();\n            Typr.U.P.curveTo(p, c1x, c1y, c2x, c2y, x, y);\n            index += 6;\n          }\n\n          if (v == \"o24\") {\n            x += stack.shift();\n            y += stack.shift();\n            Typr.U.P.lineTo(p, x, y);\n          }\n        } else if (v == \"o11\") break;else if (v == \"o1234\" || v == \"o1235\" || v == \"o1236\" || v == \"o1237\") //if((v+\"\").slice(0,3)==\"o12\")\n        {\n          if (v == \"o1234\") {\n            c1x = x + stack.shift(); // dx1\n\n            c1y = y; // dy1\n\n            c2x = c1x + stack.shift(); // dx2\n\n            c2y = c1y + stack.shift(); // dy2\n\n            jpx = c2x + stack.shift(); // dx3\n\n            jpy = c2y; // dy3\n\n            c3x = jpx + stack.shift(); // dx4\n\n            c3y = c2y; // dy4\n\n            c4x = c3x + stack.shift(); // dx5\n\n            c4y = y; // dy5\n\n            x = c4x + stack.shift(); // dx6\n\n            Typr.U.P.curveTo(p, c1x, c1y, c2x, c2y, jpx, jpy);\n            Typr.U.P.curveTo(p, c3x, c3y, c4x, c4y, x, y);\n          }\n\n          if (v == \"o1235\") {\n            c1x = x + stack.shift(); // dx1\n\n            c1y = y + stack.shift(); // dy1\n\n            c2x = c1x + stack.shift(); // dx2\n\n            c2y = c1y + stack.shift(); // dy2\n\n            jpx = c2x + stack.shift(); // dx3\n\n            jpy = c2y + stack.shift(); // dy3\n\n            c3x = jpx + stack.shift(); // dx4\n\n            c3y = jpy + stack.shift(); // dy4\n\n            c4x = c3x + stack.shift(); // dx5\n\n            c4y = c3y + stack.shift(); // dy5\n\n            x = c4x + stack.shift(); // dx6\n\n            y = c4y + stack.shift(); // dy6\n\n            stack.shift(); // flex depth\n\n            Typr.U.P.curveTo(p, c1x, c1y, c2x, c2y, jpx, jpy);\n            Typr.U.P.curveTo(p, c3x, c3y, c4x, c4y, x, y);\n          }\n\n          if (v == \"o1236\") {\n            c1x = x + stack.shift(); // dx1\n\n            c1y = y + stack.shift(); // dy1\n\n            c2x = c1x + stack.shift(); // dx2\n\n            c2y = c1y + stack.shift(); // dy2\n\n            jpx = c2x + stack.shift(); // dx3\n\n            jpy = c2y; // dy3\n\n            c3x = jpx + stack.shift(); // dx4\n\n            c3y = c2y; // dy4\n\n            c4x = c3x + stack.shift(); // dx5\n\n            c4y = c3y + stack.shift(); // dy5\n\n            x = c4x + stack.shift(); // dx6\n\n            Typr.U.P.curveTo(p, c1x, c1y, c2x, c2y, jpx, jpy);\n            Typr.U.P.curveTo(p, c3x, c3y, c4x, c4y, x, y);\n          }\n\n          if (v == \"o1237\") {\n            c1x = x + stack.shift(); // dx1\n\n            c1y = y + stack.shift(); // dy1\n\n            c2x = c1x + stack.shift(); // dx2\n\n            c2y = c1y + stack.shift(); // dy2\n\n            jpx = c2x + stack.shift(); // dx3\n\n            jpy = c2y + stack.shift(); // dy3\n\n            c3x = jpx + stack.shift(); // dx4\n\n            c3y = jpy + stack.shift(); // dy4\n\n            c4x = c3x + stack.shift(); // dx5\n\n            c4y = c3y + stack.shift(); // dy5\n\n            if (Math.abs(c4x - x) > Math.abs(c4y - y)) {\n              x = c4x + stack.shift();\n            } else {\n              y = c4y + stack.shift();\n            }\n\n            Typr.U.P.curveTo(p, c1x, c1y, c2x, c2y, jpx, jpy);\n            Typr.U.P.curveTo(p, c3x, c3y, c4x, c4y, x, y);\n          }\n        } else if (v == \"o14\") {\n        if (stack.length > 0 && !haveWidth) {\n          width = stack.shift() + font.nominalWidthX;\n          haveWidth = true;\n        }\n\n        if (stack.length == 4) // seac = standard encoding accented character\n          {\n            var adx = stack.shift();\n            var ady = stack.shift();\n            var bchar = stack.shift();\n            var achar = stack.shift();\n            var bind = Typr.CFF.glyphBySE(font, bchar);\n            var aind = Typr.CFF.glyphBySE(font, achar); //console.log(bchar, bind);\n            //console.log(achar, aind);\n            //state.x=x; state.y=y; state.nStems=nStems; state.haveWidth=haveWidth; state.width=width;  state.open=open;\n\n            Typr.U._drawCFF(font.CharStrings[bind], state, font, pdct, p);\n\n            state.x = adx;\n            state.y = ady;\n\n            Typr.U._drawCFF(font.CharStrings[aind], state, font, pdct, p); //x=state.x; y=state.y; nStems=state.nStems; haveWidth=state.haveWidth; width=state.width;  open=state.open;\n\n          }\n\n        if (open) {\n          Typr.U.P.closePath(p);\n          open = false;\n        }\n      } else if (v == \"o19\" || v == \"o20\") {\n        var hasWidthArg; // The number of stem operators on the stack is always even.\n        // If the value is uneven, that means a width is specified.\n\n        hasWidthArg = stack.length % 2 !== 0;\n\n        if (hasWidthArg && !haveWidth) {\n          width = stack.shift() + pdct.nominalWidthX;\n        }\n\n        nStems += stack.length >> 1;\n        stack.length = 0;\n        haveWidth = true;\n        i += nStems + 7 >> 3;\n      } else if (v == \"o21\") {\n        if (stack.length > 2 && !haveWidth) {\n          width = stack.shift() + pdct.nominalWidthX;\n          haveWidth = true;\n        }\n\n        y += stack.pop();\n        x += stack.pop();\n        if (open) Typr.U.P.closePath(p);\n        Typr.U.P.moveTo(p, x, y);\n        open = true;\n      } else if (v == \"o22\") {\n        if (stack.length > 1 && !haveWidth) {\n          width = stack.shift() + pdct.nominalWidthX;\n          haveWidth = true;\n        }\n\n        x += stack.pop();\n        if (open) Typr.U.P.closePath(p);\n        Typr.U.P.moveTo(p, x, y);\n        open = true;\n      } else if (v == \"o25\") {\n        while (stack.length > 6) {\n          x += stack.shift();\n          y += stack.shift();\n          Typr.U.P.lineTo(p, x, y);\n        }\n\n        c1x = x + stack.shift();\n        c1y = y + stack.shift();\n        c2x = c1x + stack.shift();\n        c2y = c1y + stack.shift();\n        x = c2x + stack.shift();\n        y = c2y + stack.shift();\n        Typr.U.P.curveTo(p, c1x, c1y, c2x, c2y, x, y);\n      } else if (v == \"o26\") {\n        if (stack.length % 2) {\n          x += stack.shift();\n        }\n\n        while (stack.length > 0) {\n          c1x = x;\n          c1y = y + stack.shift();\n          c2x = c1x + stack.shift();\n          c2y = c1y + stack.shift();\n          x = c2x;\n          y = c2y + stack.shift();\n          Typr.U.P.curveTo(p, c1x, c1y, c2x, c2y, x, y);\n        }\n      } else if (v == \"o27\") {\n        if (stack.length % 2) {\n          y += stack.shift();\n        }\n\n        while (stack.length > 0) {\n          c1x = x + stack.shift();\n          c1y = y;\n          c2x = c1x + stack.shift();\n          c2y = c1y + stack.shift();\n          x = c2x + stack.shift();\n          y = c2y;\n          Typr.U.P.curveTo(p, c1x, c1y, c2x, c2y, x, y);\n        }\n      } else if (v == \"o10\" || v == \"o29\") // callsubr || callgsubr\n        {\n          var obj = v == \"o10\" ? pdct : font;\n\n          if (stack.length == 0) {\n            console.log(\"error: empty stack\");\n          } else {\n            var ind = stack.pop();\n            var subr = obj.Subrs[ind + obj.Bias];\n            state.x = x;\n            state.y = y;\n            state.nStems = nStems;\n            state.haveWidth = haveWidth;\n            state.width = width;\n            state.open = open;\n\n            Typr.U._drawCFF(subr, state, font, pdct, p);\n\n            x = state.x;\n            y = state.y;\n            nStems = state.nStems;\n            haveWidth = state.haveWidth;\n            width = state.width;\n            open = state.open;\n          }\n        } else if (v == \"o30\" || v == \"o31\") // vhcurveto || hvcurveto\n        {\n          var count,\n              count1 = stack.length;\n          var index = 0;\n          var alternate = v == \"o31\";\n          count = count1 & ~2;\n          index += count1 - count;\n\n          while (index < count) {\n            if (alternate) {\n              c1x = x + stack.shift();\n              c1y = y;\n              c2x = c1x + stack.shift();\n              c2y = c1y + stack.shift();\n              y = c2y + stack.shift();\n\n              if (count - index == 5) {\n                x = c2x + stack.shift();\n                index++;\n              } else x = c2x;\n\n              alternate = false;\n            } else {\n              c1x = x;\n              c1y = y + stack.shift();\n              c2x = c1x + stack.shift();\n              c2y = c1y + stack.shift();\n              x = c2x + stack.shift();\n\n              if (count - index == 5) {\n                y = c2y + stack.shift();\n                index++;\n              } else y = c2y;\n\n              alternate = true;\n            }\n\n            Typr.U.P.curveTo(p, c1x, c1y, c2x, c2y, x, y);\n            index += 4;\n          }\n        } else if ((v + \"\").charAt(0) == \"o\") {\n        console.log(\"Unknown operation: \" + v, cmds);\n        throw v;\n      } else stack.push(v);\n    } //console.log(cmds);\n\n\n    state.x = x;\n    state.y = y;\n    state.nStems = nStems;\n    state.haveWidth = haveWidth;\n    state.width = width;\n    state.open = open;\n  }; // End Typr.U.js\n\n\n  return Typr;\n} // Custom bundle of woff2otf (https://github.com/arty-name/woff2otf) with tiny-inflate \n// (https://github.com/foliojs/tiny-inflate) for use in troika-3d-text. \n// Original licenses apply: \n// - tiny-inflate: https://github.com/foliojs/tiny-inflate/blob/master/LICENSE (MIT)\n// - woff2otf.js: https://github.com/arty-name/woff2otf/blob/master/woff2otf.js (Apache2)\n\n\nfunction woff2otfFactory() {\n  // Begin tinyInflate\n  const tinyInflate = function () {\n    const module = {};\n    var TINF_OK = 0;\n    var TINF_DATA_ERROR = -3;\n\n    function Tree() {\n      this.table = new Uint16Array(16);\n      /* table of code length counts */\n\n      this.trans = new Uint16Array(288);\n      /* code -> symbol translation table */\n    }\n\n    function Data(source, dest) {\n      this.source = source;\n      this.sourceIndex = 0;\n      this.tag = 0;\n      this.bitcount = 0;\n      this.dest = dest;\n      this.destLen = 0;\n      this.ltree = new Tree();\n      /* dynamic length/symbol tree */\n\n      this.dtree = new Tree();\n      /* dynamic distance tree */\n    }\n    /* --------------------------------------------------- *\r\n     * -- uninitialized global data (static structures) -- *\r\n     * --------------------------------------------------- */\n\n\n    var sltree = new Tree();\n    var sdtree = new Tree();\n    /* extra bits and base tables for length codes */\n\n    var length_bits = new Uint8Array(30);\n    var length_base = new Uint16Array(30);\n    /* extra bits and base tables for distance codes */\n\n    var dist_bits = new Uint8Array(30);\n    var dist_base = new Uint16Array(30);\n    /* special ordering of code length codes */\n\n    var clcidx = new Uint8Array([16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15]);\n    /* used by tinf_decode_trees, avoids allocations every call */\n\n    var code_tree = new Tree();\n    var lengths = new Uint8Array(288 + 32);\n    /* ----------------------- *\r\n     * -- utility functions -- *\r\n     * ----------------------- */\n\n    /* build extra bits and base tables */\n\n    function tinf_build_bits_base(bits, base, delta, first) {\n      var i, sum;\n      /* build bits table */\n\n      for (i = 0; i < delta; ++i) bits[i] = 0;\n\n      for (i = 0; i < 30 - delta; ++i) bits[i + delta] = i / delta | 0;\n      /* build base table */\n\n\n      for (sum = first, i = 0; i < 30; ++i) {\n        base[i] = sum;\n        sum += 1 << bits[i];\n      }\n    }\n    /* build the fixed huffman trees */\n\n\n    function tinf_build_fixed_trees(lt, dt) {\n      var i;\n      /* build fixed length tree */\n\n      for (i = 0; i < 7; ++i) lt.table[i] = 0;\n\n      lt.table[7] = 24;\n      lt.table[8] = 152;\n      lt.table[9] = 112;\n\n      for (i = 0; i < 24; ++i) lt.trans[i] = 256 + i;\n\n      for (i = 0; i < 144; ++i) lt.trans[24 + i] = i;\n\n      for (i = 0; i < 8; ++i) lt.trans[24 + 144 + i] = 280 + i;\n\n      for (i = 0; i < 112; ++i) lt.trans[24 + 144 + 8 + i] = 144 + i;\n      /* build fixed distance tree */\n\n\n      for (i = 0; i < 5; ++i) dt.table[i] = 0;\n\n      dt.table[5] = 32;\n\n      for (i = 0; i < 32; ++i) dt.trans[i] = i;\n    }\n    /* given an array of code lengths, build a tree */\n\n\n    var offs = new Uint16Array(16);\n\n    function tinf_build_tree(t, lengths, off, num) {\n      var i, sum;\n      /* clear code length count table */\n\n      for (i = 0; i < 16; ++i) t.table[i] = 0;\n      /* scan symbol lengths, and sum code length counts */\n\n\n      for (i = 0; i < num; ++i) t.table[lengths[off + i]]++;\n\n      t.table[0] = 0;\n      /* compute offset table for distribution sort */\n\n      for (sum = 0, i = 0; i < 16; ++i) {\n        offs[i] = sum;\n        sum += t.table[i];\n      }\n      /* create code->symbol translation table (symbols sorted by code) */\n\n\n      for (i = 0; i < num; ++i) {\n        if (lengths[off + i]) t.trans[offs[lengths[off + i]]++] = i;\n      }\n    }\n    /* ---------------------- *\r\n     * -- decode functions -- *\r\n     * ---------------------- */\n\n    /* get one bit from source stream */\n\n\n    function tinf_getbit(d) {\n      /* check if tag is empty */\n      if (!d.bitcount--) {\n        /* load next tag */\n        d.tag = d.source[d.sourceIndex++];\n        d.bitcount = 7;\n      }\n      /* shift bit out of tag */\n\n\n      var bit = d.tag & 1;\n      d.tag >>>= 1;\n      return bit;\n    }\n    /* read a num bit value from a stream and add base */\n\n\n    function tinf_read_bits(d, num, base) {\n      if (!num) return base;\n\n      while (d.bitcount < 24) {\n        d.tag |= d.source[d.sourceIndex++] << d.bitcount;\n        d.bitcount += 8;\n      }\n\n      var val = d.tag & 0xffff >>> 16 - num;\n      d.tag >>>= num;\n      d.bitcount -= num;\n      return val + base;\n    }\n    /* given a data stream and a tree, decode a symbol */\n\n\n    function tinf_decode_symbol(d, t) {\n      while (d.bitcount < 24) {\n        d.tag |= d.source[d.sourceIndex++] << d.bitcount;\n        d.bitcount += 8;\n      }\n\n      var sum = 0,\n          cur = 0,\n          len = 0;\n      var tag = d.tag;\n      /* get more bits while code value is above sum */\n\n      do {\n        cur = 2 * cur + (tag & 1);\n        tag >>>= 1;\n        ++len;\n        sum += t.table[len];\n        cur -= t.table[len];\n      } while (cur >= 0);\n\n      d.tag = tag;\n      d.bitcount -= len;\n      return t.trans[sum + cur];\n    }\n    /* given a data stream, decode dynamic trees from it */\n\n\n    function tinf_decode_trees(d, lt, dt) {\n      var hlit, hdist, hclen;\n      var i, num, length;\n      /* get 5 bits HLIT (257-286) */\n\n      hlit = tinf_read_bits(d, 5, 257);\n      /* get 5 bits HDIST (1-32) */\n\n      hdist = tinf_read_bits(d, 5, 1);\n      /* get 4 bits HCLEN (4-19) */\n\n      hclen = tinf_read_bits(d, 4, 4);\n\n      for (i = 0; i < 19; ++i) lengths[i] = 0;\n      /* read code lengths for code length alphabet */\n\n\n      for (i = 0; i < hclen; ++i) {\n        /* get 3 bits code length (0-7) */\n        var clen = tinf_read_bits(d, 3, 0);\n        lengths[clcidx[i]] = clen;\n      }\n      /* build code length tree */\n\n\n      tinf_build_tree(code_tree, lengths, 0, 19);\n      /* decode code lengths for the dynamic trees */\n\n      for (num = 0; num < hlit + hdist;) {\n        var sym = tinf_decode_symbol(d, code_tree);\n\n        switch (sym) {\n          case 16:\n            /* copy previous code length 3-6 times (read 2 bits) */\n            var prev = lengths[num - 1];\n\n            for (length = tinf_read_bits(d, 2, 3); length; --length) {\n              lengths[num++] = prev;\n            }\n\n            break;\n\n          case 17:\n            /* repeat code length 0 for 3-10 times (read 3 bits) */\n            for (length = tinf_read_bits(d, 3, 3); length; --length) {\n              lengths[num++] = 0;\n            }\n\n            break;\n\n          case 18:\n            /* repeat code length 0 for 11-138 times (read 7 bits) */\n            for (length = tinf_read_bits(d, 7, 11); length; --length) {\n              lengths[num++] = 0;\n            }\n\n            break;\n\n          default:\n            /* values 0-15 represent the actual code lengths */\n            lengths[num++] = sym;\n            break;\n        }\n      }\n      /* build dynamic trees */\n\n\n      tinf_build_tree(lt, lengths, 0, hlit);\n      tinf_build_tree(dt, lengths, hlit, hdist);\n    }\n    /* ----------------------------- *\r\n     * -- block inflate functions -- *\r\n     * ----------------------------- */\n\n    /* given a stream and two trees, inflate a block of data */\n\n\n    function tinf_inflate_block_data(d, lt, dt) {\n      while (1) {\n        var sym = tinf_decode_symbol(d, lt);\n        /* check for end of block */\n\n        if (sym === 256) {\n          return TINF_OK;\n        }\n\n        if (sym < 256) {\n          d.dest[d.destLen++] = sym;\n        } else {\n          var length, dist, offs;\n          var i;\n          sym -= 257;\n          /* possibly get more bits from length code */\n\n          length = tinf_read_bits(d, length_bits[sym], length_base[sym]);\n          dist = tinf_decode_symbol(d, dt);\n          /* possibly get more bits from distance code */\n\n          offs = d.destLen - tinf_read_bits(d, dist_bits[dist], dist_base[dist]);\n          /* copy match */\n\n          for (i = offs; i < offs + length; ++i) {\n            d.dest[d.destLen++] = d.dest[i];\n          }\n        }\n      }\n    }\n    /* inflate an uncompressed block of data */\n\n\n    function tinf_inflate_uncompressed_block(d) {\n      var length, invlength;\n      var i;\n      /* unread from bitbuffer */\n\n      while (d.bitcount > 8) {\n        d.sourceIndex--;\n        d.bitcount -= 8;\n      }\n      /* get length */\n\n\n      length = d.source[d.sourceIndex + 1];\n      length = 256 * length + d.source[d.sourceIndex];\n      /* get one's complement of length */\n\n      invlength = d.source[d.sourceIndex + 3];\n      invlength = 256 * invlength + d.source[d.sourceIndex + 2];\n      /* check length */\n\n      if (length !== (~invlength & 0x0000ffff)) return TINF_DATA_ERROR;\n      d.sourceIndex += 4;\n      /* copy block */\n\n      for (i = length; i; --i) d.dest[d.destLen++] = d.source[d.sourceIndex++];\n      /* make sure we start next block on a byte boundary */\n\n\n      d.bitcount = 0;\n      return TINF_OK;\n    }\n    /* inflate stream from source to dest */\n\n\n    function tinf_uncompress(source, dest) {\n      var d = new Data(source, dest);\n      var bfinal, btype, res;\n\n      do {\n        /* read final block flag */\n        bfinal = tinf_getbit(d);\n        /* read block type (2 bits) */\n\n        btype = tinf_read_bits(d, 2, 0);\n        /* decompress block */\n\n        switch (btype) {\n          case 0:\n            /* decompress uncompressed block */\n            res = tinf_inflate_uncompressed_block(d);\n            break;\n\n          case 1:\n            /* decompress block with fixed huffman trees */\n            res = tinf_inflate_block_data(d, sltree, sdtree);\n            break;\n\n          case 2:\n            /* decompress block with dynamic huffman trees */\n            tinf_decode_trees(d, d.ltree, d.dtree);\n            res = tinf_inflate_block_data(d, d.ltree, d.dtree);\n            break;\n\n          default:\n            res = TINF_DATA_ERROR;\n        }\n\n        if (res !== TINF_OK) throw new Error('Data error');\n      } while (!bfinal);\n\n      if (d.destLen < d.dest.length) {\n        if (typeof d.dest.slice === 'function') return d.dest.slice(0, d.destLen);else return d.dest.subarray(0, d.destLen);\n      }\n\n      return d.dest;\n    }\n    /* -------------------- *\r\n     * -- initialization -- *\r\n     * -------------------- */\n\n    /* build fixed huffman trees */\n\n\n    tinf_build_fixed_trees(sltree, sdtree);\n    /* build extra bits and base tables */\n\n    tinf_build_bits_base(length_bits, length_base, 4, 3);\n    tinf_build_bits_base(dist_bits, dist_base, 2, 1);\n    /* fix a special case */\n\n    length_bits[28] = 0;\n    length_base[28] = 258;\n    module.exports = tinf_uncompress;\n    return module.exports;\n  }(); // End tinyInflate\n  // Begin woff2otf.js\n\n  /*\r\n   Copyright 2012, Steffen Hanikel (https://github.com/hanikesn)\r\n   Modified by Artemy Tregubenko, 2014 (https://github.com/arty-name/woff2otf)\r\n   Modified by Jason Johnston, 2019 (pako --> tiny-inflate)\r\n   \r\n     Licensed under the Apache License, Version 2.0 (the \"License\");\r\n     you may not use this file except in compliance with the License.\r\n     You may obtain a copy of the License at\r\n  \r\n         http://www.apache.org/licenses/LICENSE-2.0\r\n  \r\n     Unless required by applicable law or agreed to in writing, software\r\n     distributed under the License is distributed on an \"AS IS\" BASIS,\r\n     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n     See the License for the specific language governing permissions and\r\n     limitations under the License.\r\n  \r\n   A tool to convert a WOFF back to a TTF/OTF font file, in pure Javascript\r\n  */\n\n\n  function convert_streams(bufferIn, tinyInflate) {\n    var dataViewIn = new DataView(bufferIn);\n    var offsetIn = 0;\n\n    function read2() {\n      var uint16 = dataViewIn.getUint16(offsetIn);\n      offsetIn += 2;\n      return uint16;\n    }\n\n    function read4() {\n      var uint32 = dataViewIn.getUint32(offsetIn);\n      offsetIn += 4;\n      return uint32;\n    }\n\n    function write2(uint16) {\n      dataViewOut.setUint16(offsetOut, uint16);\n      offsetOut += 2;\n    }\n\n    function write4(uint32) {\n      dataViewOut.setUint32(offsetOut, uint32);\n      offsetOut += 4;\n    }\n\n    var WOFFHeader = {\n      signature: read4(),\n      flavor: read4(),\n      length: read4(),\n      numTables: read2(),\n      reserved: read2(),\n      totalSfntSize: read4(),\n      majorVersion: read2(),\n      minorVersion: read2(),\n      metaOffset: read4(),\n      metaLength: read4(),\n      metaOrigLength: read4(),\n      privOffset: read4(),\n      privLength: read4()\n    };\n    var entrySelector = 0;\n\n    while (Math.pow(2, entrySelector) <= WOFFHeader.numTables) {\n      entrySelector++;\n    }\n\n    entrySelector--;\n    var searchRange = Math.pow(2, entrySelector) * 16;\n    var rangeShift = WOFFHeader.numTables * 16 - searchRange;\n    var offset = 4 + 2 + 2 + 2 + 2;\n    var TableDirectoryEntries = [];\n\n    for (var i = 0; i < WOFFHeader.numTables; i++) {\n      TableDirectoryEntries.push({\n        tag: read4(),\n        offset: read4(),\n        compLength: read4(),\n        origLength: read4(),\n        origChecksum: read4()\n      });\n      offset += 4 * 4;\n    }\n\n    var arrayOut = new Uint8Array(4 + 2 + 2 + 2 + 2 + TableDirectoryEntries.length * (4 + 4 + 4 + 4) + TableDirectoryEntries.reduce(function (acc, entry) {\n      return acc + entry.origLength + 4;\n    }, 0));\n    var bufferOut = arrayOut.buffer;\n    var dataViewOut = new DataView(bufferOut);\n    var offsetOut = 0;\n    write4(WOFFHeader.flavor);\n    write2(WOFFHeader.numTables);\n    write2(searchRange);\n    write2(entrySelector);\n    write2(rangeShift);\n    TableDirectoryEntries.forEach(function (TableDirectoryEntry) {\n      write4(TableDirectoryEntry.tag);\n      write4(TableDirectoryEntry.origChecksum);\n      write4(offset);\n      write4(TableDirectoryEntry.origLength);\n      TableDirectoryEntry.outOffset = offset;\n      offset += TableDirectoryEntry.origLength;\n\n      if (offset % 4 != 0) {\n        offset += 4 - offset % 4;\n      }\n    });\n    var size;\n    TableDirectoryEntries.forEach(function (TableDirectoryEntry) {\n      var compressedData = bufferIn.slice(TableDirectoryEntry.offset, TableDirectoryEntry.offset + TableDirectoryEntry.compLength);\n\n      if (TableDirectoryEntry.compLength != TableDirectoryEntry.origLength) {\n        var uncompressedData = new Uint8Array(TableDirectoryEntry.origLength);\n        tinyInflate(new Uint8Array(compressedData, 2), //skip deflate header\n        uncompressedData);\n      } else {\n        uncompressedData = new Uint8Array(compressedData);\n      }\n\n      arrayOut.set(uncompressedData, TableDirectoryEntry.outOffset);\n      offset = TableDirectoryEntry.outOffset + TableDirectoryEntry.origLength;\n      var padding = 0;\n\n      if (offset % 4 != 0) {\n        padding = 4 - offset % 4;\n      }\n\n      arrayOut.set(new Uint8Array(padding).buffer, TableDirectoryEntry.outOffset + TableDirectoryEntry.origLength);\n      size = offset + padding;\n    });\n    return bufferOut.slice(0, size);\n  } // End woff2otf.js\n\n\n  return function (buffer) {\n    return convert_streams(buffer, tinyInflate);\n  };\n}\n/**\r\n * An adapter that allows Typr.js to be used as if it were (a subset of) the OpenType.js API.\r\n * Also adds support for WOFF files (not WOFF2).\r\n */\n\n\nfunction parserFactory(Typr, woff2otf) {\n  const cmdArgLengths = {\n    M: 2,\n    L: 2,\n    Q: 4,\n    C: 6,\n    Z: 0\n  };\n\n  function wrapFontObj(typrFont) {\n    const glyphMap = Object.create(null);\n    const fontObj = {\n      unitsPerEm: typrFont.head.unitsPerEm,\n      ascender: typrFont.hhea.ascender,\n      descender: typrFont.hhea.descender,\n\n      forEachGlyph(text, fontSize, letterSpacing, callback) {\n        let glyphX = 0;\n        const fontScale = 1 / fontObj.unitsPerEm * fontSize;\n        const glyphIndices = Typr.U.stringToGlyphs(typrFont, text);\n        let charIndex = 0;\n        glyphIndices.forEach(glyphIndex => {\n          // Typr returns a glyph index per string codepoint, with -1s in place of those that\n          // were omitted due to ligature substitution. So we can track original index in the\n          // string via simple increment, and skip everything else when seeing a -1.\n          if (glyphIndex !== -1) {\n            let glyphObj = glyphMap[glyphIndex];\n\n            if (!glyphObj) {\n              const {\n                cmds,\n                crds\n              } = Typr.U.glyphToPath(typrFont, glyphIndex); // Find extents - Glyf gives this in metadata but not CFF, and Typr doesn't\n              // normalize the two, so it's simplest just to iterate ourselves.\n\n              let xMin, yMin, xMax, yMax;\n\n              if (crds.length) {\n                xMin = yMin = Infinity;\n                xMax = yMax = -Infinity;\n\n                for (let i = 0, len = crds.length; i < len; i += 2) {\n                  let x = crds[i];\n                  let y = crds[i + 1];\n                  if (x < xMin) xMin = x;\n                  if (y < yMin) yMin = y;\n                  if (x > xMax) xMax = x;\n                  if (y > yMax) yMax = y;\n                }\n              } else {\n                xMin = xMax = yMin = yMax = 0;\n              }\n\n              glyphObj = glyphMap[glyphIndex] = {\n                index: glyphIndex,\n                advanceWidth: typrFont.hmtx.aWidth[glyphIndex],\n                xMin,\n                yMin,\n                xMax,\n                yMax,\n                pathCommandCount: cmds.length,\n\n                forEachPathCommand(callback) {\n                  let argsIndex = 0;\n                  const argsArray = [];\n\n                  for (let i = 0, len = cmds.length; i < len; i++) {\n                    const numArgs = cmdArgLengths[cmds[i]];\n                    argsArray.length = 1 + numArgs;\n                    argsArray[0] = cmds[i];\n\n                    for (let j = 1; j <= numArgs; j++) {\n                      argsArray[j] = crds[argsIndex++];\n                    }\n\n                    callback.apply(null, argsArray);\n                  }\n                }\n\n              };\n            }\n\n            callback.call(null, glyphObj, glyphX, charIndex);\n\n            if (glyphObj.advanceWidth) {\n              glyphX += glyphObj.advanceWidth * fontScale;\n            }\n\n            if (letterSpacing) {\n              glyphX += letterSpacing * fontSize;\n            }\n          }\n\n          charIndex += text.codePointAt(charIndex) > 0xffff ? 2 : 1;\n        });\n        return glyphX;\n      }\n\n    };\n    return fontObj;\n  }\n\n  return function parse(buffer) {\n    // Look to see if we have a WOFF file and convert it if so:\n    const peek = new Uint8Array(buffer, 0, 4);\n\n    const tag = Typr._bin.readASCII(peek, 0, 4);\n\n    if (tag === 'wOFF') {\n      buffer = woff2otf(buffer);\n    } else if (tag === 'wOF2') {\n      throw new Error('woff2 fonts not supported');\n    }\n\n    return wrapFontObj(Typr.parse(buffer)[0]);\n  };\n}\n\nconst workerModule = /*#__PURE__*/defineWorkerModule({\n  name: 'Typr Font Parser',\n  dependencies: [typrFactory, woff2otfFactory, parserFactory],\n\n  init(typrFactory, woff2otfFactory, parserFactory) {\n    const Typr = typrFactory();\n    const woff2otf = woff2otfFactory();\n    return parserFactory(Typr, woff2otf);\n  }\n\n}); //import fontParser from './FontParser_OpenType.js'\n\nconst CONFIG = {\n  defaultFontURL: 'https://fonts.gstatic.com/s/roboto/v18/KFOmCnqEu92Fr1Mu4mxM.woff',\n  //Roboto Regular\n  sdfGlyphSize: 64,\n  sdfMargin: 1 / 16,\n  sdfExponent: 9,\n  textureWidth: 2048\n};\nconst tempColor = /*#__PURE__*/new Color();\nlet hasRequested = false;\n/**\r\n * Customizes the text builder configuration. This must be called prior to the first font processing\r\n * request, and applies to all fonts.\r\n *\r\n * @param {String} config.defaultFontURL - The URL of the default font to use for text processing\r\n *                 requests, in case none is specified or the specifiede font fails to load or parse.\r\n *                 Defaults to \"Roboto Regular\" from Google Fonts.\r\n * @param {Number} config.sdfGlyphSize - The default size of each glyph's SDF (signed distance field)\r\n *                 texture used for rendering. Must be a power-of-two number, and applies to all fonts,\r\n *                 but note that this can also be overridden per call to `getTextRenderInfo()`.\r\n *                 Larger sizes can improve the quality of glyph rendering by increasing the sharpness\r\n *                 of corners and preventing loss of very thin lines, at the expense of memory. Defaults\r\n *                 to 64 which is generally a good balance of size and quality.\r\n * @param {Number} config.sdfExponent - The exponent used when encoding the SDF values. A higher exponent\r\n *                 shifts the encoded 8-bit values to achieve higher precision/accuracy at texels nearer\r\n *                 the glyph's path, with lower precision further away. Defaults to 9.\r\n * @param {Number} config.sdfMargin - How much space to reserve in the SDF as margin outside the glyph's\r\n *                 path, as a percentage of the SDF width. A larger margin increases the quality of\r\n *                 extruded glyph outlines, but decreases the precision available for the glyph itself.\r\n *                 Defaults to 1/16th of the glyph size.\r\n * @param {Number} config.textureWidth - The width of the SDF texture; must be a power of 2. Defaults to\r\n *                 2048 which is a safe maximum texture dimension according to the stats at\r\n *                 https://webglstats.com/webgl/parameter/MAX_TEXTURE_SIZE and should allow for a\r\n *                 reasonably large number of glyphs (default glyph size of 64 and safe texture size of\r\n *                 2048^2 allows for 1024 glyphs.) This can be increased if you need to increase the\r\n *                 glyph size and/or have an extraordinary number of glyphs.\r\n */\n\nfunction configureTextBuilder(config) {\n  if (hasRequested) {\n    console.warn('configureTextBuilder called after first font request; will be ignored.');\n  } else {\n    assign(CONFIG, config);\n  }\n}\n/**\r\n * Repository for all font SDF atlas textures\r\n *\r\n *   {\r\n *     [font]: {\r\n *       sdfTexture: DataTexture\r\n *     }\r\n *   }\r\n */\n\n\nconst atlases = Object.create(null);\n/**\r\n * @typedef {object} TroikaTextRenderInfo - Format of the result from `getTextRenderInfo`.\r\n * @property {object} parameters - The normalized input arguments to the render call.\r\n * @property {DataTexture} sdfTexture - The SDF atlas texture.\r\n * @property {number} sdfGlyphSize - The size of each glyph's SDF; see `configureTextBuilder`.\r\n * @property {number} sdfExponent - The exponent used in encoding the SDF's values; see `configureTextBuilder`.\r\n * @property {Float32Array} glyphBounds - List of [minX, minY, maxX, maxY] quad bounds for each glyph.\r\n * @property {Float32Array} glyphAtlasIndices - List holding each glyph's index in the SDF atlas.\r\n * @property {Uint8Array} [glyphColors] - List holding each glyph's [r, g, b] color, if `colorRanges` was supplied.\r\n * @property {Float32Array} [caretPositions] - A list of caret positions for all glyphs; this is\r\n *           the bottom [x,y] of the cursor position before each char, plus one after the last char.\r\n * @property {number} [caretHeight] - An appropriate height for all selection carets.\r\n * @property {number} ascender - The font's ascender metric.\r\n * @property {number} descender - The font's descender metric.\r\n * @property {number} lineHeight - The final computed lineHeight measurement.\r\n * @property {number} topBaseline - The y position of the top line's baseline.\r\n * @property {Array<number>} blockBounds - The total [minX, minY, maxX, maxY] rect of the whole text block;\r\n *           this can include extra vertical space beyond the visible glyphs due to lineHeight, and is\r\n *           equivalent to the dimensions of a block-level text element in CSS.\r\n * @property {Array<number>} visibleBounds -\r\n * @property {Array<number>} totalBounds - DEPRECATED; use blockBounds instead.\r\n * @property {Array<number>} totalBlockSize - DEPRECATED; use blockBounds instead\r\n * @property {Array<number>} chunkedBounds - List of bounding rects for each consecutive set of N glyphs,\r\n *           in the format `{start:N, end:N, rect:[minX, minY, maxX, maxY]}`.\r\n * @property {object} timings - Timing info for various parts of the rendering logic including SDF\r\n *           generation, layout, etc.\r\n * @frozen\r\n */\n\n/**\r\n * @callback getTextRenderInfo~callback\r\n * @param {TroikaTextRenderInfo} textRenderInfo\r\n */\n\n/**\r\n * Main entry point for requesting the data needed to render a text string with given font parameters.\r\n * This is an asynchronous call, performing most of the logic in a web worker thread.\r\n * @param {object} args\r\n * @param {getTextRenderInfo~callback} callback\r\n */\n\nfunction getTextRenderInfo(args, callback) {\n  hasRequested = true;\n  args = assign({}, args); // Apply default font here to avoid a 'null' atlas, and convert relative\n  // URLs to absolute so they can be resolved in the worker\n\n  args.font = toAbsoluteURL(args.font || CONFIG.defaultFontURL); // Normalize text to a string\n\n  args.text = '' + args.text;\n  args.sdfGlyphSize = args.sdfGlyphSize || CONFIG.sdfGlyphSize; // Normalize colors\n\n  if (args.colorRanges != null) {\n    let colors = {};\n\n    for (let key in args.colorRanges) {\n      if (args.colorRanges.hasOwnProperty(key)) {\n        let val = args.colorRanges[key];\n\n        if (typeof val !== 'number') {\n          val = tempColor.set(val).getHex();\n        }\n\n        colors[key] = val;\n      }\n    }\n\n    args.colorRanges = colors;\n  }\n\n  Object.freeze(args); // Init the atlas for this font if needed\n\n  const {\n    textureWidth,\n    sdfExponent\n  } = CONFIG;\n  const {\n    sdfGlyphSize\n  } = args;\n  let atlasKey = `${args.font}@${sdfGlyphSize}`;\n  let atlas = atlases[atlasKey];\n\n  if (!atlas) {\n    atlas = atlases[atlasKey] = {\n      sdfTexture: new DataTexture(new Uint8Array(sdfGlyphSize * textureWidth), textureWidth, sdfGlyphSize, LuminanceFormat, undefined, undefined, undefined, undefined, LinearFilter, LinearFilter)\n    };\n    atlas.sdfTexture.font = args.font;\n  } // Issue request to the FontProcessor in the worker\n\n\n  processInWorker(args).then(result => {\n    // If the response has newGlyphs, copy them into the atlas texture at the specified indices\n    if (result.newGlyphSDFs) {\n      result.newGlyphSDFs.forEach(({\n        textureData,\n        atlasIndex\n      }) => {\n        const texImg = atlas.sdfTexture.image; // Grow the texture by power of 2 if needed\n\n        while (texImg.data.length < (atlasIndex + 1) * sdfGlyphSize * sdfGlyphSize) {\n          const biggerArray = new Uint8Array(texImg.data.length * 2);\n          biggerArray.set(texImg.data);\n          texImg.data = biggerArray;\n          texImg.height *= 2;\n        } // Insert the new glyph's data into the full texture image at the correct offsets\n\n\n        const cols = texImg.width / sdfGlyphSize;\n        const baseStartIndex = texImg.width * sdfGlyphSize * Math.floor(atlasIndex / cols) //full rows\n        + atlasIndex % cols * sdfGlyphSize; //partial row\n\n        for (let y = 0; y < sdfGlyphSize; y++) {\n          const srcStartIndex = y * sdfGlyphSize;\n          const rowStartIndex = baseStartIndex + y * texImg.width;\n\n          for (let x = 0; x < sdfGlyphSize; x++) {\n            texImg.data[rowStartIndex + x] = textureData[srcStartIndex + x];\n          }\n        }\n      });\n      atlas.sdfTexture.needsUpdate = true;\n    } // Invoke callback with the text layout arrays and updated texture\n\n\n    callback(Object.freeze({\n      parameters: args,\n      sdfTexture: atlas.sdfTexture,\n      sdfGlyphSize,\n      sdfExponent,\n      glyphBounds: result.glyphBounds,\n      glyphAtlasIndices: result.glyphAtlasIndices,\n      glyphColors: result.glyphColors,\n      caretPositions: result.caretPositions,\n      caretHeight: result.caretHeight,\n      chunkedBounds: result.chunkedBounds,\n      ascender: result.ascender,\n      descender: result.descender,\n      lineHeight: result.lineHeight,\n      topBaseline: result.topBaseline,\n      blockBounds: result.blockBounds,\n      visibleBounds: result.visibleBounds,\n      timings: result.timings,\n\n      get totalBounds() {\n        console.log('totalBounds deprecated, use blockBounds instead');\n        return result.blockBounds;\n      },\n\n      get totalBlockSize() {\n        console.log('totalBlockSize deprecated, use blockBounds instead');\n        const [x0, y0, x1, y1] = result.blockBounds;\n        return [x1 - x0, y1 - y0];\n      }\n\n    }));\n  });\n}\n/**\r\n * Preload a given font and optionally pre-generate glyph SDFs for one or more character sequences.\r\n * This can be useful to avoid long pauses when first showing text in a scene, by preloading the\r\n * needed fonts and glyphs up front along with other assets.\r\n *\r\n * @param {object} options\r\n * @param {string} options.font - URL of the font file to preload. If not given, the default font will\r\n *        be loaded.\r\n * @param {string|string[]} options.characters - One or more character sequences for which to pre-\r\n *        generate glyph SDFs. Note that this will honor ligature substitution, so you may need\r\n *        to specify ligature sequences in addition to their individual characters to get all\r\n *        possible glyphs, e.g. `[\"t\", \"h\", \"th\"]` to get the \"t\" and \"h\" glyphs plus the \"th\" ligature.\r\n * @param {number} options.sdfGlyphSize - The size at which to prerender the SDF textures for the\r\n *        specified `characters`.\r\n * @param {function} callback - A function that will be called when the preloading is complete.\r\n */\n\n\nfunction preloadFont({\n  font,\n  characters,\n  sdfGlyphSize\n}, callback) {\n  let text = Array.isArray(characters) ? characters.join('\\n') : '' + characters;\n  getTextRenderInfo({\n    font,\n    sdfGlyphSize,\n    text\n  }, callback);\n} // Local assign impl so we don't have to import troika-core\n\n\nfunction assign(toObj, fromObj) {\n  for (let key in fromObj) {\n    if (fromObj.hasOwnProperty(key)) {\n      toObj[key] = fromObj[key];\n    }\n  }\n\n  return toObj;\n} // Utility for making URLs absolute\n\n\nlet linkEl;\n\nfunction toAbsoluteURL(path) {\n  if (!linkEl) {\n    linkEl = typeof document === 'undefined' ? {} : document.createElement('a');\n  }\n\n  linkEl.href = path;\n  return linkEl.href;\n}\n\nconst fontProcessorWorkerModule = /*#__PURE__*/defineWorkerModule({\n  name: 'FontProcessor',\n  dependencies: [CONFIG, workerModule, createGlyphSegmentsIndex, createSDFGenerator, createFontProcessor],\n\n  init(config, fontParser, createGlyphSegmentsIndex, createSDFGenerator, createFontProcessor) {\n    const {\n      sdfExponent,\n      sdfMargin,\n      defaultFontURL\n    } = config;\n    const sdfGenerator = createSDFGenerator(createGlyphSegmentsIndex, {\n      sdfExponent,\n      sdfMargin\n    });\n    return createFontProcessor(fontParser, sdfGenerator, {\n      defaultFontURL\n    });\n  }\n\n});\nconst processInWorker = /*#__PURE__*/defineWorkerModule({\n  name: 'TextBuilder',\n  dependencies: [fontProcessorWorkerModule, ThenableWorkerModule],\n\n  init(fontProcessor, Thenable) {\n    return function (args) {\n      const thenable = new Thenable();\n      fontProcessor.process(args, thenable.resolve);\n      return thenable;\n    };\n  },\n\n  getTransferables(result) {\n    // Mark array buffers as transferable to avoid cloning during postMessage\n    const transferables = [result.glyphBounds.buffer, result.glyphAtlasIndices.buffer];\n\n    if (result.caretPositions) {\n      transferables.push(result.caretPositions.buffer);\n    }\n\n    if (result.newGlyphSDFs) {\n      result.newGlyphSDFs.forEach(d => {\n        transferables.push(d.textureData.buffer);\n      });\n    }\n\n    return transferables;\n  }\n\n});\n\nconst GlyphsGeometry = /*#__PURE__*/(() => {\n  const templateGeometries = {};\n\n  function getTemplateGeometry(detail) {\n    let geom = templateGeometries[detail];\n\n    if (!geom) {\n      geom = templateGeometries[detail] = new PlaneBufferGeometry(1, 1, detail, detail).translate(0.5, 0.5, 0);\n    }\n\n    return geom;\n  }\n\n  const tempVec3 = new Vector3();\n  const glyphBoundsAttrName = 'aTroikaGlyphBounds';\n  const glyphIndexAttrName = 'aTroikaGlyphIndex';\n  const glyphColorAttrName = 'aTroikaGlyphColor';\n  /**\r\n  @class GlyphsGeometry\r\n    A specialized Geometry for rendering a set of text glyphs. Uses InstancedBufferGeometry to\r\n  render the glyphs using GPU instancing of a single quad, rather than constructing a whole\r\n  geometry with vertices, for much smaller attribute arraybuffers according to this math:\r\n      Where N = number of glyphs...\r\n      Instanced:\r\n    - position: 4 * 3\r\n    - index: 2 * 3\r\n    - normal: 4 * 3\r\n    - uv: 4 * 2\r\n    - glyph x/y bounds: N * 4\r\n    - glyph indices: N * 1\r\n    = 5N + 38\r\n      Non-instanced:\r\n    - position: N * 4 * 3\r\n    - index: N * 2 * 3\r\n    - normal: N * 4 * 3\r\n    - uv: N * 4 * 2\r\n    - glyph indices: N * 1\r\n    = 39N\r\n    A downside of this is the rare-but-possible lack of the instanced arrays extension,\r\n  which we could potentially work around with a fallback non-instanced implementation.\r\n    */\n\n  class GlyphsGeometry extends InstancedBufferGeometry {\n    constructor() {\n      super();\n      this.detail = 1; // Define groups for rendering text outline as a separate pass; these will only\n      // be used when the `material` getter returns an array, i.e. outlineWidth > 0.\n\n      this.groups = [{\n        start: 0,\n        count: Infinity,\n        materialIndex: 0\n      }, {\n        start: 0,\n        count: Infinity,\n        materialIndex: 1\n      }]; // Preallocate zero-radius bounding sphere\n\n      this.boundingSphere = new Sphere();\n      this.boundingBox = new Box3();\n    }\n\n    computeBoundingSphere() {// No-op; we'll sync the boundingSphere proactively in `updateGlyphs`.\n    }\n\n    computeBoundingBox() {// No-op; we'll sync the boundingBox proactively in `updateGlyphs`.\n    }\n\n    set detail(detail) {\n      if (detail !== this._detail) {\n        this._detail = detail;\n\n        if (typeof detail !== 'number' || detail < 1) {\n          detail = 1;\n        }\n\n        let tpl = getTemplateGeometry(detail);\n        ['position', 'normal', 'uv'].forEach(attr => {\n          this.attributes[attr] = tpl.attributes[attr].clone();\n        });\n        this.setIndex(tpl.getIndex().clone());\n      }\n    }\n\n    get detail() {\n      return this._detail;\n    }\n    /**\r\n     * Update the geometry for a new set of glyphs.\r\n     * @param {Float32Array} glyphBounds - An array holding the planar bounds for all glyphs\r\n     *        to be rendered, 4 entries for each glyph: x1,x2,y1,y1\r\n     * @param {Float32Array} glyphAtlasIndices - An array holding the index of each glyph within\r\n     *        the SDF atlas texture.\r\n     * @param {Array} blockBounds - An array holding the [minX, minY, maxX, maxY] across all glyphs\r\n     * @param {Array} [chunkedBounds] - An array of objects describing bounds for each chunk of N\r\n     *        consecutive glyphs: `{start:N, end:N, rect:[minX, minY, maxX, maxY]}`. This can be\r\n     *        used with `applyClipRect` to choose an optimized `instanceCount`.\r\n     * @param {Uint8Array} [glyphColors] - An array holding r,g,b values for each glyph.\r\n     */\n\n\n    updateGlyphs(glyphBounds, glyphAtlasIndices, blockBounds, chunkedBounds, glyphColors) {\n      // Update the instance attributes\n      updateBufferAttr(this, glyphBoundsAttrName, glyphBounds, 4);\n      updateBufferAttr(this, glyphIndexAttrName, glyphAtlasIndices, 1);\n      updateBufferAttr(this, glyphColorAttrName, glyphColors, 3);\n      this._chunkedBounds = chunkedBounds;\n      setInstanceCount(this, glyphAtlasIndices.length); // Update the boundingSphere based on the total bounds\n\n      const sphere = this.boundingSphere;\n      sphere.center.set((blockBounds[0] + blockBounds[2]) / 2, (blockBounds[1] + blockBounds[3]) / 2, 0);\n      sphere.radius = sphere.center.distanceTo(tempVec3.set(blockBounds[0], blockBounds[1], 0)); // Update the boundingBox based on the total bounds\n\n      const box = this.boundingBox;\n      box.min.set(blockBounds[0], blockBounds[1], 0);\n      box.max.set(blockBounds[2], blockBounds[3], 0);\n    }\n    /**\r\n     * Given a clipping rect, and the chunkedBounds from the last updateGlyphs call, choose the lowest\r\n     * `instanceCount` that will show all glyphs within the clipped view. This is an optimization\r\n     * for long blocks of text that are clipped, to skip vertex shader evaluation for glyphs that would\r\n     * be clipped anyway.\r\n     *\r\n     * Note that since `drawElementsInstanced[ANGLE]` only accepts an instance count and not a starting\r\n     * offset, this optimization becomes less effective as the clipRect moves closer to the end of the\r\n     * text block. We could fix that by switching from instancing to a full geometry with a drawRange,\r\n     * but at the expense of much larger attribute buffers (see classdoc above.)\r\n     *\r\n     * @param {Vector4} clipRect\r\n     */\n\n\n    applyClipRect(clipRect) {\n      let count = this.getAttribute(glyphIndexAttrName).count;\n      let chunks = this._chunkedBounds;\n\n      if (chunks) {\n        for (let i = chunks.length; i--;) {\n          count = chunks[i].end;\n          let rect = chunks[i].rect; // note: both rects are l-b-r-t\n\n          if (rect[1] < clipRect.w && rect[3] > clipRect.y && rect[0] < clipRect.z && rect[2] > clipRect.x) {\n            break;\n          }\n        }\n      }\n\n      setInstanceCount(this, count);\n    }\n\n  } // Compat for pre r109:\n\n\n  if (!GlyphsGeometry.prototype.setAttribute) {\n    GlyphsGeometry.prototype.setAttribute = function (name, attribute) {\n      this.attributes[name] = attribute;\n      return this;\n    };\n  }\n\n  function updateBufferAttr(geom, attrName, newArray, itemSize) {\n    const attr = geom.getAttribute(attrName);\n\n    if (newArray) {\n      // If length isn't changing, just update the attribute's array data\n      if (attr && attr.array.length === newArray.length) {\n        attr.array.set(newArray);\n        attr.needsUpdate = true;\n      } else {\n        geom.setAttribute(attrName, new InstancedBufferAttribute(newArray, itemSize)); // If the new attribute has a different size, we also have to (as of r117) manually clear the\n        // internal cached max instance count. See https://github.com/mrdoob/three.js/issues/19706\n        // It's unclear if this is a threejs bug or a truly unsupported scenario; discussion in\n        // that ticket is ambiguous as to whether replacing a BufferAttribute with one of a\n        // different size is supported, but https://github.com/mrdoob/three.js/pull/17418 strongly\n        // implies it should be supported. It's possible we need to\n\n        delete geom._maxInstanceCount; //for r117+, could be fragile\n\n        geom.dispose(); //for r118+, more robust feeling, but more heavy-handed than I'd like\n      }\n    } else if (attr) {\n      geom.deleteAttribute(attrName);\n    }\n  } // Handle maxInstancedCount -> instanceCount rename that happened in three r117\n\n\n  function setInstanceCount(geom, count) {\n    geom[geom.hasOwnProperty('instanceCount') ? 'instanceCount' : 'maxInstancedCount'] = count;\n  }\n\n  return GlyphsGeometry;\n})(); // language=GLSL\n\n\nconst VERTEX_DEFS = `\nuniform vec2 uTroikaSDFTextureSize;\nuniform float uTroikaSDFGlyphSize;\nuniform vec4 uTroikaTotalBounds;\nuniform vec4 uTroikaClipRect;\nuniform mat3 uTroikaOrient;\nuniform bool uTroikaUseGlyphColors;\nuniform float uTroikaDistanceOffset;\nattribute vec4 aTroikaGlyphBounds;\nattribute float aTroikaGlyphIndex;\nattribute vec3 aTroikaGlyphColor;\nvarying vec2 vTroikaGlyphUV;\nvarying vec4 vTroikaTextureUVBounds;\nvarying vec3 vTroikaGlyphColor;\nvarying vec2 vTroikaGlyphDimensions;\n`; // language=GLSL prefix=\"void main() {\" suffix=\"}\"\n\nconst VERTEX_TRANSFORM = `\nvec4 bounds = aTroikaGlyphBounds;\nvec4 outlineBounds = vec4(bounds.xy - uTroikaDistanceOffset, bounds.zw + uTroikaDistanceOffset);\nvec4 clippedBounds = vec4(\n  clamp(outlineBounds.xy, uTroikaClipRect.xy, uTroikaClipRect.zw),\n  clamp(outlineBounds.zw, uTroikaClipRect.xy, uTroikaClipRect.zw)\n);\nvec2 clippedXY = (mix(clippedBounds.xy, clippedBounds.zw, position.xy) - bounds.xy) / (bounds.zw - bounds.xy);\n\nposition.xy = mix(bounds.xy, bounds.zw, clippedXY);\n\nuv = (position.xy - uTroikaTotalBounds.xy) / (uTroikaTotalBounds.zw - uTroikaTotalBounds.xy);\n\nposition = uTroikaOrient * position;\nnormal = uTroikaOrient * normal;\n\nvTroikaGlyphUV = clippedXY.xy;\nvTroikaGlyphDimensions = vec2(bounds[2] - bounds[0], bounds[3] - bounds[1]);\n\n${''\n/* NOTE: it seems important to calculate the glyph's bounding texture UVs here in the\r\nvertex shader, rather than in the fragment shader, as the latter gives strange artifacts\r\non some glyphs (those in the leftmost texture column) on some systems. The exact reason\r\nisn't understood but doing this here, then mix()-ing in the fragment shader, seems to work. */\n}\nfloat txCols = uTroikaSDFTextureSize.x / uTroikaSDFGlyphSize;\nvec2 txUvPerGlyph = uTroikaSDFGlyphSize / uTroikaSDFTextureSize;\nvec2 txStartUV = txUvPerGlyph * vec2(\n  mod(aTroikaGlyphIndex, txCols),\n  floor(aTroikaGlyphIndex / txCols)\n);\nvTroikaTextureUVBounds = vec4(txStartUV, vec2(txStartUV) + txUvPerGlyph);\n`; // language=GLSL\n\nconst FRAGMENT_DEFS = `\nuniform sampler2D uTroikaSDFTexture;\nuniform vec2 uTroikaSDFTextureSize;\nuniform float uTroikaSDFGlyphSize;\nuniform float uTroikaSDFExponent;\nuniform float uTroikaDistanceOffset;\nuniform bool uTroikaSDFDebug;\nvarying vec2 vTroikaGlyphUV;\nvarying vec4 vTroikaTextureUVBounds;\nvarying vec2 vTroikaGlyphDimensions;\n\nfloat troikaSdfValueToSignedDistance(float alpha) {\n  // Inverse of encoding in SDFGenerator.js\n  ${''\n/* TODO - there's some slight inaccuracy here when dealing with interpolated alpha values; those\r\nare linearly interpolated where the encoding is exponential. Look into improving this by rounding\r\nto nearest 2 whole texels, decoding those exponential values, and linearly interpolating the result.\r\n*/\n}\n  float maxDimension = max(vTroikaGlyphDimensions.x, vTroikaGlyphDimensions.y);\n  float absDist = (1.0 - pow(2.0 * (alpha > 0.5 ? 1.0 - alpha : alpha), 1.0 / uTroikaSDFExponent)) * maxDimension;\n  float signedDist = absDist * (alpha > 0.5 ? -1.0 : 1.0);\n  return signedDist;\n}\n\nfloat troikaGlyphUvToSdfValue(vec2 glyphUV) {\n  vec2 textureUV = mix(vTroikaTextureUVBounds.xy, vTroikaTextureUVBounds.zw, glyphUV);\n  return texture2D(uTroikaSDFTexture, textureUV).r;\n}\n\nfloat troikaGlyphUvToDistance(vec2 uv) {\n  return troikaSdfValueToSignedDistance(troikaGlyphUvToSdfValue(uv));\n}\n\nfloat troikaGetTextAlpha(float distanceOffset) {\n  vec2 clampedGlyphUV = clamp(vTroikaGlyphUV, 0.5 / uTroikaSDFGlyphSize, 1.0 - 0.5 / uTroikaSDFGlyphSize);\n  float distance = troikaGlyphUvToDistance(clampedGlyphUV);\n    \n  // Extrapolate distance when outside bounds:\n  distance += clampedGlyphUV == vTroikaGlyphUV ? 0.0 : \n    length((vTroikaGlyphUV - clampedGlyphUV) * vTroikaGlyphDimensions);\n\n  ${''\n/* \r\n// TODO more refined extrapolated distance by adjusting for angle of gradient at edge...\r\n// This has potential but currently gives very jagged extensions, maybe due to precision issues?\r\nfloat uvStep = 1.0 / uTroikaSDFGlyphSize;\r\nvec2 neighbor1UV = clampedGlyphUV + (\r\nvTroikaGlyphUV.x != clampedGlyphUV.x ? vec2(0.0, uvStep * sign(0.5 - vTroikaGlyphUV.y)) :\r\nvTroikaGlyphUV.y != clampedGlyphUV.y ? vec2(uvStep * sign(0.5 - vTroikaGlyphUV.x), 0.0) :\r\nvec2(0.0)\r\n);\r\nvec2 neighbor2UV = clampedGlyphUV + (\r\nvTroikaGlyphUV.x != clampedGlyphUV.x ? vec2(0.0, uvStep * -sign(0.5 - vTroikaGlyphUV.y)) :\r\nvTroikaGlyphUV.y != clampedGlyphUV.y ? vec2(uvStep * -sign(0.5 - vTroikaGlyphUV.x), 0.0) :\r\nvec2(0.0)\r\n);\r\nfloat neighbor1Distance = troikaGlyphUvToDistance(neighbor1UV);\r\nfloat neighbor2Distance = troikaGlyphUvToDistance(neighbor2UV);\r\nfloat distToUnclamped = length((vTroikaGlyphUV - clampedGlyphUV) * vTroikaGlyphDimensions);\r\nfloat distToNeighbor = length((clampedGlyphUV - neighbor1UV) * vTroikaGlyphDimensions);\r\nfloat gradientAngle1 = min(asin(abs(neighbor1Distance - distance) / distToNeighbor), PI / 2.0);\r\nfloat gradientAngle2 = min(asin(abs(neighbor2Distance - distance) / distToNeighbor), PI / 2.0);\r\ndistance += (cos(gradientAngle1) + cos(gradientAngle2)) / 2.0 * distToUnclamped;\r\n*/\n}\n  \n  #if defined(IS_DEPTH_MATERIAL) || defined(IS_DISTANCE_MATERIAL)\n  float alpha = step(-distanceOffset, -distance);\n  #else\n  ${''\n/*\r\nWhen the standard derivatives extension is available, we choose an antialiasing alpha threshold based\r\non the potential change in the SDF's alpha from this fragment to its neighbor. This strategy maximizes \r\nreadability and edge crispness at all sizes and screen resolutions.\r\n*/\n}\n  #if defined(GL_OES_standard_derivatives) || __VERSION__ >= 300\n  float aaDist = length(fwidth(vTroikaGlyphUV * vTroikaGlyphDimensions)) * 0.5;\n  #else\n  float aaDist = vTroikaGlyphDimensions.x / 64.0;\n  #endif\n  \n  float alpha = smoothstep(\n    distanceOffset + aaDist,\n    distanceOffset - aaDist,\n    distance\n  );\n  #endif\n  \n  return alpha;\n}\n`; // language=GLSL prefix=\"void main() {\" suffix=\"}\"\n\nconst FRAGMENT_TRANSFORM = `\nfloat alpha = uTroikaSDFDebug ?\n  troikaGlyphUvToSdfValue(vTroikaGlyphUV) :\n  troikaGetTextAlpha(uTroikaDistanceOffset);\n\n#if !defined(IS_DEPTH_MATERIAL) && !defined(IS_DISTANCE_MATERIAL)\ngl_FragColor.a *= alpha;\n#endif\n  \nif (alpha == 0.0) {\n  discard;\n}\n`;\n/**\r\n * Create a material for rendering text, derived from a baseMaterial\r\n */\n\nfunction createTextDerivedMaterial(baseMaterial) {\n  const textMaterial = createDerivedMaterial(baseMaterial, {\n    chained: true,\n    extensions: {\n      derivatives: true\n    },\n    uniforms: {\n      uTroikaSDFTexture: {\n        value: null\n      },\n      uTroikaSDFTextureSize: {\n        value: new Vector2()\n      },\n      uTroikaSDFGlyphSize: {\n        value: 0\n      },\n      uTroikaSDFExponent: {\n        value: 0\n      },\n      uTroikaTotalBounds: {\n        value: new Vector4(0, 0, 0, 0)\n      },\n      uTroikaClipRect: {\n        value: new Vector4(0, 0, 0, 0)\n      },\n      uTroikaDistanceOffset: {\n        value: 0\n      },\n      uTroikaOrient: {\n        value: new Matrix3()\n      },\n      uTroikaUseGlyphColors: {\n        value: true\n      },\n      uTroikaSDFDebug: {\n        value: false\n      }\n    },\n    vertexDefs: VERTEX_DEFS,\n    vertexTransform: VERTEX_TRANSFORM,\n    fragmentDefs: FRAGMENT_DEFS,\n    fragmentColorTransform: FRAGMENT_TRANSFORM,\n\n    customRewriter({\n      vertexShader,\n      fragmentShader\n    }) {\n      let uDiffuseRE = /\\buniform\\s+vec3\\s+diffuse\\b/;\n\n      if (uDiffuseRE.test(fragmentShader)) {\n        // Replace all instances of `diffuse` with our varying\n        fragmentShader = fragmentShader.replace(uDiffuseRE, 'varying vec3 vTroikaGlyphColor').replace(/\\bdiffuse\\b/g, 'vTroikaGlyphColor'); // Make sure the vertex shader declares the uniform so we can grab it as a fallback\n\n        if (!uDiffuseRE.test(vertexShader)) {\n          vertexShader = vertexShader.replace(voidMainRegExp, 'uniform vec3 diffuse;\\n$&\\nvTroikaGlyphColor = uTroikaUseGlyphColors ? aTroikaGlyphColor / 255.0 : diffuse;\\n');\n        }\n      }\n\n      return {\n        vertexShader,\n        fragmentShader\n      };\n    }\n\n  }); // Force transparency - TODO is this reasonable?\n\n  textMaterial.transparent = true;\n  Object.defineProperties(textMaterial, {\n    isTroikaTextMaterial: {\n      value: true\n    },\n    // WebGLShadowMap reverses the side of the shadow material by default, which fails\n    // for planes, so here we force the `shadowSide` to always match the main side.\n    shadowSide: {\n      get() {\n        return this.side;\n      },\n\n      set() {//no-op\n      }\n\n    }\n  });\n  return textMaterial;\n}\n\nconst Text = /*#__PURE__*/(() => {\n  const defaultMaterial = new MeshBasicMaterial({\n    color: 0xffffff,\n    side: DoubleSide,\n    transparent: true\n  });\n  const tempMat4 = new Matrix4();\n  const tempVec3a = new Vector3();\n  const tempVec3b = new Vector3();\n  const tempArray = [];\n  const origin = new Vector3();\n  const defaultOrient = '+x+y';\n\n  function first(o) {\n    return Array.isArray(o) ? o[0] : o;\n  }\n\n  const raycastMesh = new Mesh(new PlaneBufferGeometry(1, 1).translate(0.5, 0.5, 0), defaultMaterial);\n  const syncStartEvent = {\n    type: 'syncstart'\n  };\n  const syncCompleteEvent = {\n    type: 'synccomplete'\n  };\n  const SYNCABLE_PROPS = ['font', 'fontSize', 'letterSpacing', 'lineHeight', 'maxWidth', 'overflowWrap', 'text', 'textAlign', 'textIndent', 'whiteSpace', 'anchorX', 'anchorY', 'colorRanges', 'sdfGlyphSize'];\n  const COPYABLE_PROPS = SYNCABLE_PROPS.concat('material', 'color', 'depthOffset', 'clipRect', 'orientation', 'glyphGeometryDetail');\n  /**\r\n   * @class Text\r\n   *\r\n   * A ThreeJS Mesh that renders a string of text on a plane in 3D space using signed distance\r\n   * fields (SDF).\r\n   */\n\n  class Text extends Mesh {\n    constructor() {\n      const geometry = new GlyphsGeometry();\n      super(geometry, null); // === Text layout properties: === //\n\n      /**\r\n       * @member {string} text\r\n       * The string of text to be rendered.\r\n       */\n\n      this.text = '';\n      /**\r\n       * @deprecated Use `anchorX` and `anchorY` instead\r\n       * @member {Array<number>} anchor\r\n       * Defines where in the text block should correspond to the mesh's local position, as a set\r\n       * of horizontal and vertical percentages from 0 to 1. A value of `[0, 0]` (the default)\r\n       * anchors at the top-left, `[1, 1]` at the bottom-right, and `[0.5, 0.5]` centers the\r\n       * block at the mesh's position.\r\n       */\n      //this.anchor = null\n\n      /**\r\n       * @member {number|string} anchorX\r\n       * Defines the horizontal position in the text block that should line up with the local origin.\r\n       * Can be specified as a numeric x position in local units, a string percentage of the total\r\n       * text block width e.g. `'25%'`, or one of the following keyword strings: 'left', 'center',\r\n       * or 'right'.\r\n       */\n\n      this.anchorX = 0;\n      /**\r\n       * @member {number|string} anchorX\r\n       * Defines the vertical position in the text block that should line up with the local origin.\r\n       * Can be specified as a numeric y position in local units (note: down is negative y), a string\r\n       * percentage of the total text block height e.g. `'25%'`, or one of the following keyword strings:\r\n       * 'top', 'top-baseline', 'middle', 'bottom-baseline', or 'bottom'.\r\n       */\n\n      this.anchorY = 0;\n      /**\r\n       * @member {string} font\r\n       * URL of a custom font to be used. Font files can be any of the formats supported by\r\n       * OpenType (see https://github.com/opentypejs/opentype.js).\r\n       * Defaults to the Roboto font loaded from Google Fonts.\r\n       */\n\n      this.font = null; //will use default from TextBuilder\n\n      /**\r\n       * @member {number} fontSize\r\n       * The size at which to render the font in local units; corresponds to the em-box height\r\n       * of the chosen `font`.\r\n       */\n\n      this.fontSize = 0.1;\n      /**\r\n       * @member {number} letterSpacing\r\n       * Sets a uniform adjustment to spacing between letters after kerning is applied. Positive\r\n       * numbers increase spacing and negative numbers decrease it.\r\n       */\n\n      this.letterSpacing = 0;\n      /**\r\n       * @member {number|string} lineHeight\r\n       * Sets the height of each line of text, as a multiple of the `fontSize`. Defaults to 'normal'\r\n       * which chooses a reasonable height based on the chosen font's ascender/descender metrics.\r\n       */\n\n      this.lineHeight = 'normal';\n      /**\r\n       * @member {number} maxWidth\r\n       * The maximum width of the text block, above which text may start wrapping according to the\r\n       * `whiteSpace` and `overflowWrap` properties.\r\n       */\n\n      this.maxWidth = Infinity;\n      /**\r\n       * @member {string} overflowWrap\r\n       * Defines how text wraps if the `whiteSpace` property is `normal`. Can be either `'normal'`\r\n       * to break at whitespace characters, or `'break-word'` to allow breaking within words.\r\n       * Defaults to `'normal'`.\r\n       */\n\n      this.overflowWrap = 'normal';\n      /**\r\n       * @member {string} textAlign\r\n       * The horizontal alignment of each line of text within the overall text bounding box.\r\n       */\n\n      this.textAlign = 'left';\n      /**\r\n       * @member {number} textIndent\r\n       * Indentation for the first character of a line; see CSS `text-indent`.\r\n       */\n\n      this.textIndent = 0;\n      /**\r\n       * @member {string} whiteSpace\r\n       * Defines whether text should wrap when a line reaches the `maxWidth`. Can\r\n       * be either `'normal'` (the default), to allow wrapping according to the `overflowWrap` property,\r\n       * or `'nowrap'` to prevent wrapping. Note that `'normal'` here honors newline characters to\r\n       * manually break lines, making it behave more like `'pre-wrap'` does in CSS.\r\n       */\n\n      this.whiteSpace = 'normal'; // === Presentation properties: === //\n\n      /**\r\n       * @member {THREE.Material} material\r\n       * Defines a _base_ material to be used when rendering the text. This material will be\r\n       * automatically replaced with a material derived from it, that adds shader code to\r\n       * decrease the alpha for each fragment (pixel) outside the text glyphs, with antialiasing.\r\n       * By default it will derive from a simple white MeshBasicMaterial, but you can use any\r\n       * of the other mesh materials to gain other features like lighting, texture maps, etc.\r\n       *\r\n       * Also see the `color` shortcut property.\r\n       */\n\n      this.material = null;\n      /**\r\n       * @member {string|number|THREE.Color} color\r\n       * This is a shortcut for setting the `color` of the text's material. You can use this\r\n       * if you don't want to specify a whole custom `material`. Also, if you do use a custom\r\n       * `material`, this color will only be used for this particuar Text instance, even if\r\n       * that same material instance is shared across multiple Text objects.\r\n       */\n\n      this.color = null;\n      /**\r\n       * @member {object|null} colorRanges\r\n       * WARNING: This API is experimental and may change.\r\n       * This allows more fine-grained control of colors for individual or ranges of characters,\r\n       * taking precedence over the material's `color`. Its format is an Object whose keys each\r\n       * define a starting character index for a range, and whose values are the color for each\r\n       * range. The color value can be a numeric hex color value, a `THREE.Color` object, or\r\n       * any of the strings accepted by `THREE.Color`.\r\n       */\n\n      this.colorRanges = null;\n      /**\r\n       * @member {number|string} outlineWidth\r\n       * WARNING: This API is experimental and may change.\r\n       * The width of an outline drawn around each text glyph using the `outlineColor`. Can be\r\n       * specified as either an absolute number in local units, or as a percentage string e.g.\r\n       * `\"12%\"` which is treated as a percentage of the `fontSize`. Defaults to `0`.\r\n       */\n\n      this.outlineWidth = 0;\n      /**\r\n       * @member {string|number|THREE.Color} outlineColor\r\n       * WARNING: This API is experimental and may change.\r\n       * The color of the text outline, if `outlineWidth` is greater than zero. Defaults to black.\r\n       */\n\n      this.outlineColor = 0;\n      /**\r\n       * @member {number} depthOffset\r\n       * This is a shortcut for setting the material's `polygonOffset` and related properties,\r\n       * which can be useful in preventing z-fighting when this text is laid on top of another\r\n       * plane in the scene. Positive numbers are further from the camera, negatives closer.\r\n       */\n\n      this.depthOffset = 0;\n      /**\r\n       * @member {Array<number>} clipRect\r\n       * If specified, defines a `[minX, minY, maxX, maxY]` of a rectangle outside of which all\r\n       * pixels will be discarded. This can be used for example to clip overflowing text when\r\n       * `whiteSpace='nowrap'`.\r\n       */\n\n      this.clipRect = null;\n      /**\r\n       * @member {string} orientation\r\n       * Defines the axis plane on which the text should be laid out when the mesh has no extra\r\n       * rotation transform. It is specified as a string with two axes: the horizontal axis with\r\n       * positive pointing right, and the vertical axis with positive pointing up. By default this\r\n       * is '+x+y', meaning the text sits on the xy plane with the text's top toward positive y\r\n       * and facing positive z. A value of '+x-z' would place it on the xz plane with the text's\r\n       * top toward negative z and facing positive y.\r\n       */\n\n      this.orientation = defaultOrient;\n      /**\r\n       * @member {number} glyphGeometryDetail\r\n       * Controls number of vertical/horizontal segments that make up each glyph's rectangular\r\n       * plane. Defaults to 1. This can be increased to provide more geometrical detail for custom\r\n       * vertex shader effects, for example.\r\n       */\n\n      this.glyphGeometryDetail = 1;\n      /**\r\n       * @member {number|null} sdfGlyphSize\r\n       * The size of each glyph's SDF (signed distance field) used for rendering. This must be a\r\n       * power-of-two number. Defaults to 64 which is generally a good balance of size and quality\r\n       * for most fonts. Larger sizes can improve the quality of glyph rendering by increasing\r\n       * the sharpness of corners and preventing loss of very thin lines, at the expense of\r\n       * increased memory footprint and longer SDF generation time.\r\n       */\n\n      this.sdfGlyphSize = null;\n      this.debugSDF = false;\n    }\n    /**\r\n     * Updates the text rendering according to the current text-related configuration properties.\r\n     * This is an async process, so you can pass in a callback function to be executed when it\r\n     * finishes.\r\n     * @param {function} [callback]\r\n     */\n\n\n    sync(callback) {\n      if (this._needsSync) {\n        this._needsSync = false; // If there's another sync still in progress, queue\n\n        if (this._isSyncing) {\n          (this._queuedSyncs || (this._queuedSyncs = [])).push(callback);\n        } else {\n          this._isSyncing = true;\n          this.dispatchEvent(syncStartEvent);\n          getTextRenderInfo({\n            text: this.text,\n            font: this.font,\n            fontSize: this.fontSize || 0.1,\n            letterSpacing: this.letterSpacing || 0,\n            lineHeight: this.lineHeight || 'normal',\n            maxWidth: this.maxWidth,\n            textAlign: this.textAlign,\n            textIndent: this.textIndent,\n            whiteSpace: this.whiteSpace,\n            overflowWrap: this.overflowWrap,\n            anchorX: this.anchorX,\n            anchorY: this.anchorY,\n            colorRanges: this.colorRanges,\n            includeCaretPositions: true,\n            //TODO parameterize\n            sdfGlyphSize: this.sdfGlyphSize\n          }, textRenderInfo => {\n            this._isSyncing = false; // Save result for later use in onBeforeRender\n\n            this._textRenderInfo = textRenderInfo; // Update the geometry attributes\n\n            this.geometry.updateGlyphs(textRenderInfo.glyphBounds, textRenderInfo.glyphAtlasIndices, textRenderInfo.blockBounds, textRenderInfo.chunkedBounds, textRenderInfo.glyphColors); // If we had extra sync requests queued up, kick it off\n\n            const queued = this._queuedSyncs;\n\n            if (queued) {\n              this._queuedSyncs = null;\n              this._needsSync = true;\n              this.sync(() => {\n                queued.forEach(fn => fn && fn());\n              });\n            }\n\n            this.dispatchEvent(syncCompleteEvent);\n\n            if (callback) {\n              callback();\n            }\n          });\n        }\n      }\n    }\n    /**\r\n     * Initiate a sync if needed - note it won't complete until next frame at the\r\n     * earliest so if possible it's a good idea to call sync() manually as soon as\r\n     * all the properties have been set.\r\n     * @override\r\n     */\n\n\n    onBeforeRender(renderer, scene, camera, geometry, material, group) {\n      this.sync(); // This may not always be a text material, e.g. if there's a scene.overrideMaterial present\n\n      if (material.isTroikaTextMaterial) {\n        this._prepareForRender(material);\n      }\n    }\n    /**\r\n     * Shortcut to dispose the geometry specific to this instance.\r\n     * Note: we don't also dispose the derived material here because if anything else is\r\n     * sharing the same base material it will result in a pause next frame as the program\r\n     * is recompiled. Instead users can dispose the base material manually, like normal,\r\n     * and we'll also dispose the derived material at that time.\r\n     */\n\n\n    dispose() {\n      this.geometry.dispose();\n    }\n    /**\r\n     * @property {TroikaTextRenderInfo|null} textRenderInfo\r\n     * @readonly\r\n     * The current processed rendering data for this TextMesh, returned by the TextBuilder after\r\n     * a `sync()` call. This will be `null` initially, and may be stale for a short period until\r\n     * the asynchrous `sync()` process completes.\r\n     */\n\n\n    get textRenderInfo() {\n      return this._textRenderInfo || null;\n    } // Handler for automatically wrapping the base material with our upgrades. We do the wrapping\n    // lazily on _read_ rather than write to avoid unnecessary wrapping on transient values.\n\n\n    get material() {\n      let derivedMaterial = this._derivedMaterial;\n      const baseMaterial = this._baseMaterial || this._defaultMaterial || (this._defaultMaterial = defaultMaterial.clone());\n\n      if (!derivedMaterial || derivedMaterial.baseMaterial !== baseMaterial) {\n        derivedMaterial = this._derivedMaterial = createTextDerivedMaterial(baseMaterial); // dispose the derived material when its base material is disposed:\n\n        baseMaterial.addEventListener('dispose', function onDispose() {\n          baseMaterial.removeEventListener('dispose', onDispose);\n          derivedMaterial.dispose();\n        });\n      } // If text outline is present, render it as a preliminary draw using Three's multi-material\n      // feature (see GlyphsGeometry which sets up `groups` for this purpose) Doing it with multi\n      // materials ensures the layers are always rendered consecutively in a consistent order.\n      // Each layer will trigger onBeforeRender with the appropriate material.\n\n\n      if (this.outlineWidth) {\n        let outlineMaterial = derivedMaterial._outlineMtl;\n\n        if (!outlineMaterial) {\n          outlineMaterial = derivedMaterial._outlineMtl = Object.create(derivedMaterial, {\n            id: {\n              value: derivedMaterial.id + 0.1\n            }\n          });\n          outlineMaterial.isTextOutlineMaterial = true;\n          outlineMaterial.depthWrite = false;\n          outlineMaterial.map = null; //???\n\n          derivedMaterial.addEventListener('dispose', function onDispose() {\n            derivedMaterial.removeEventListener('dispose', onDispose);\n            outlineMaterial.dispose();\n          });\n        }\n\n        return [outlineMaterial, derivedMaterial];\n      } else {\n        return derivedMaterial;\n      }\n    }\n\n    set material(baseMaterial) {\n      if (baseMaterial && baseMaterial.isTroikaTextMaterial) {\n        //prevent double-derivation\n        this._derivedMaterial = baseMaterial;\n        this._baseMaterial = baseMaterial.baseMaterial;\n      } else {\n        this._baseMaterial = baseMaterial;\n      }\n    }\n\n    get glyphGeometryDetail() {\n      return this.geometry.detail;\n    }\n\n    set glyphGeometryDetail(detail) {\n      this.geometry.detail = detail;\n    } // Create and update material for shadows upon request:\n\n\n    get customDepthMaterial() {\n      return first(this.material).getDepthMaterial();\n    }\n\n    get customDistanceMaterial() {\n      return first(this.material).getDistanceMaterial();\n    }\n\n    _prepareForRender(material) {\n      const isOutline = material.isTextOutlineMaterial;\n      const uniforms = material.uniforms;\n      const textInfo = this.textRenderInfo;\n\n      if (textInfo) {\n        const {\n          sdfTexture,\n          blockBounds\n        } = textInfo;\n        uniforms.uTroikaSDFTexture.value = sdfTexture;\n        uniforms.uTroikaSDFTextureSize.value.set(sdfTexture.image.width, sdfTexture.image.height);\n        uniforms.uTroikaSDFGlyphSize.value = textInfo.sdfGlyphSize;\n        uniforms.uTroikaSDFExponent.value = textInfo.sdfExponent;\n        uniforms.uTroikaTotalBounds.value.fromArray(blockBounds);\n        uniforms.uTroikaUseGlyphColors.value = !!textInfo.glyphColors;\n        let distanceOffset = 0;\n\n        if (isOutline) {\n          let {\n            outlineWidth\n          } = this;\n\n          if (typeof outlineWidth === 'string') {\n            let match = outlineWidth.match(/^([\\d.]+)%$/);\n            let pct = match ? parseFloat(match[1]) : NaN;\n            outlineWidth = (isNaN(pct) ? 0 : pct / 100) * this.fontSize;\n          }\n\n          distanceOffset = outlineWidth;\n        }\n\n        uniforms.uTroikaDistanceOffset.value = distanceOffset;\n        let clipRect = this.clipRect;\n\n        if (clipRect && Array.isArray(clipRect) && clipRect.length === 4) {\n          uniforms.uTroikaClipRect.value.fromArray(clipRect);\n        } else {\n          // no clipping - choose a finite rect that shouldn't ever be reached by overflowing glyphs or outlines\n          const pad = (this.fontSize || 0.1) * 100;\n          uniforms.uTroikaClipRect.value.set(blockBounds[0] - pad, blockBounds[1] - pad, blockBounds[2] + pad, blockBounds[3] + pad);\n        }\n\n        this.geometry.applyClipRect(uniforms.uTroikaClipRect.value);\n      }\n\n      uniforms.uTroikaSDFDebug.value = !!this.debugSDF;\n      material.polygonOffset = !!this.depthOffset;\n      material.polygonOffsetFactor = material.polygonOffsetUnits = this.depthOffset || 0; // Shortcut for setting material color via `color` prop on the mesh; this is\n      // applied only to the derived material to avoid mutating a shared base material.\n\n      const color = isOutline ? this.outlineColor || 0 : this.color;\n\n      if (color == null) {\n        delete material.color; //inherit from base\n      } else {\n        const colorObj = material.hasOwnProperty('color') ? material.color : material.color = new Color();\n\n        if (color !== colorObj._input || typeof color === 'object') {\n          colorObj.set(colorObj._input = color);\n        }\n      } // base orientation\n\n\n      let orient = this.orientation || defaultOrient;\n\n      if (orient !== material._orientation) {\n        let rotMat = uniforms.uTroikaOrient.value;\n        orient = orient.replace(/[^-+xyz]/g, '');\n        let match = orient !== defaultOrient && orient.match(/^([-+])([xyz])([-+])([xyz])$/);\n\n        if (match) {\n          let [, hSign, hAxis, vSign, vAxis] = match;\n          tempVec3a.set(0, 0, 0)[hAxis] = hSign === '-' ? 1 : -1;\n          tempVec3b.set(0, 0, 0)[vAxis] = vSign === '-' ? -1 : 1;\n          tempMat4.lookAt(origin, tempVec3a.cross(tempVec3b), tempVec3b);\n          rotMat.setFromMatrix4(tempMat4);\n        } else {\n          rotMat.identity();\n        }\n\n        material._orientation = orient;\n      }\n    }\n    /**\r\n     * @override Custom raycasting to test against the whole text block's max rectangular bounds\r\n     * TODO is there any reason to make this more granular, like within individual line or glyph rects?\r\n     */\n\n\n    raycast(raycaster, intersects) {\n      const textInfo = this.textRenderInfo;\n\n      if (textInfo) {\n        const bounds = textInfo.blockBounds;\n        raycastMesh.matrixWorld.multiplyMatrices(this.matrixWorld, tempMat4.set(bounds[2] - bounds[0], 0, 0, bounds[0], 0, bounds[3] - bounds[1], 0, bounds[1], 0, 0, 1, 0, 0, 0, 0, 1));\n        tempArray.length = 0;\n        raycastMesh.raycast(raycaster, tempArray);\n\n        for (let i = 0; i < tempArray.length; i++) {\n          tempArray[i].object = this;\n          intersects.push(tempArray[i]);\n        }\n      }\n    }\n\n    copy(source) {\n      super.copy(source);\n      COPYABLE_PROPS.forEach(prop => {\n        this[prop] = source[prop];\n      });\n      return this;\n    }\n\n    clone() {\n      return new this.constructor().copy(this);\n    }\n\n  } // Create setters for properties that affect text layout:\n\n\n  SYNCABLE_PROPS.forEach(prop => {\n    const privateKey = '_private_' + prop;\n    Object.defineProperty(Text.prototype, prop, {\n      get() {\n        return this[privateKey];\n      },\n\n      set(value) {\n        if (value !== this[privateKey]) {\n          this[privateKey] = value;\n          this._needsSync = true;\n        }\n      }\n\n    });\n  }); // Deprecation handler for `anchor` array:\n\n  let deprMsgShown = false;\n  Object.defineProperty(Text.prototype, 'anchor', {\n    get() {\n      return this._deprecated_anchor;\n    },\n\n    set(val) {\n      this._deprecated_anchor = val;\n\n      if (!deprMsgShown) {\n        console.warn('TextMesh: `anchor` has been deprecated; use `anchorX` and `anchorY` instead.');\n        deprMsgShown = true;\n      }\n\n      if (Array.isArray(val)) {\n        this.anchorX = `${(+val[0] || 0) * 100}%`;\n        this.anchorY = `${(+val[1] || 0) * 100}%`;\n      } else {\n        this.anchorX = this.anchorY = 0;\n      }\n    }\n\n  });\n  return Text;\n})(); //=== Utility functions for dealing with carets and selection ranges ===//\n\n/**\r\n * @typedef {object} TextCaret\r\n * @property {number} x - x position of the caret\r\n * @property {number} y - y position of the caret's bottom\r\n * @property {number} height - height of the caret\r\n * @property {number} charIndex - the index in the original input string of this caret's target\r\n *   character; the caret will be for the position _before_ that character.\r\n */\n\n/**\r\n * Given a local x/y coordinate in the text block plane, find the nearest caret position.\r\n * @param {TroikaTextRenderInfo} textRenderInfo - a result object from TextBuilder#getTextRenderInfo\r\n * @param {number} x\r\n * @param {number} y\r\n * @return {TextCaret | null}\r\n */\n\n\nfunction getCaretAtPoint(textRenderInfo, x, y) {\n  let closestCaret = null;\n  const {\n    caretHeight\n  } = textRenderInfo;\n  const caretsByRow = groupCaretsByRow(textRenderInfo); // Find nearest row by y first\n\n  let closestRowY = Infinity;\n  caretsByRow.forEach((carets, rowY) => {\n    if (Math.abs(y - (rowY + caretHeight / 2)) < Math.abs(y - (closestRowY + caretHeight / 2))) {\n      closestRowY = rowY;\n    }\n  }); // Then find closest caret by x within that row\n\n  caretsByRow.get(closestRowY).forEach(caret => {\n    if (!closestCaret || Math.abs(x - caret.x) < Math.abs(x - closestCaret.x)) {\n      closestCaret = caret;\n    }\n  });\n  return closestCaret;\n}\n\nconst _rectsCache = new WeakMap();\n/**\r\n * Given start and end character indexes, return a list of rectangles covering all the\r\n * characters within that selection.\r\n * @param {TroikaTextRenderInfo} textRenderInfo\r\n * @param {number} start - index of the first char in the selection\r\n * @param {number} end - index of the first char after the selection\r\n * @return {Array<{left, top, right, bottom}> | null}\r\n */\n\n\nfunction getSelectionRects(textRenderInfo, start, end) {\n  let rects;\n\n  if (textRenderInfo) {\n    // Check cache - textRenderInfo is frozen so it's safe to cache based on it\n    let prevResult = _rectsCache.get(textRenderInfo);\n\n    if (prevResult && prevResult.start === start && prevResult.end === end) {\n      return prevResult.rects;\n    }\n\n    const {\n      caretPositions,\n      caretHeight,\n      blockBounds\n    } = textRenderInfo; // Normalize\n\n    if (end < start) {\n      const s = start;\n      start = end;\n      end = s;\n    }\n\n    start = Math.max(start, 0);\n    end = Math.min(end, caretPositions.length + 1); // Collect into one rect per row\n\n    let rows = new Map();\n\n    for (let i = start; i < end; i++) {\n      const x1 = caretPositions[i * 3];\n      const x2 = caretPositions[i * 3 + 1];\n      const y = caretPositions[i * 3 + 2];\n      let row = rows.get(y);\n\n      if (!row) {\n        row = {\n          left: x1,\n          right: x2,\n          bottom: y,\n          top: y + caretHeight\n        };\n        rows.set(y, row);\n      } else {\n        row.left = Math.max(Math.min(row.left, x1), blockBounds[0]);\n        row.right = Math.min(Math.max(row.right, x2), blockBounds[2]);\n      }\n    }\n\n    rects = [];\n    rows.forEach(rect => {\n      rects.push(rect);\n    });\n\n    _rectsCache.set(textRenderInfo, {\n      start,\n      end,\n      rects\n    });\n  }\n\n  return rects;\n}\n\nconst _caretsByRowCache = new WeakMap();\n\nfunction groupCaretsByRow(textRenderInfo) {\n  // textRenderInfo is frozen so it's safe to cache based on it\n  let caretsByRow = _caretsByRowCache.get(textRenderInfo);\n\n  if (!caretsByRow) {\n    const {\n      caretPositions,\n      caretHeight\n    } = textRenderInfo;\n    caretsByRow = new Map();\n\n    for (let i = 0; i < caretPositions.length; i += 3) {\n      const rowY = caretPositions[i + 2];\n      let rowCarets = caretsByRow.get(rowY);\n\n      if (!rowCarets) {\n        caretsByRow.set(rowY, rowCarets = []);\n      }\n\n      rowCarets.push({\n        x: caretPositions[i],\n        y: rowY,\n        height: caretHeight,\n        charIndex: i / 3\n      }); // Add one more caret after the final char\n\n      if (i + 3 >= caretPositions.length) {\n        rowCarets.push({\n          x: caretPositions[i + 1],\n          y: rowY,\n          height: caretHeight,\n          charIndex: i / 3 + 1\n        });\n      }\n    }\n  }\n\n  _caretsByRowCache.set(textRenderInfo, caretsByRow);\n\n  return caretsByRow;\n}\n\nexport { GlyphsGeometry, Text, configureTextBuilder, createTextDerivedMaterial, fontProcessorWorkerModule, getCaretAtPoint, getSelectionRects, preloadFont };","map":{"version":3,"sources":["/Users/haiakablan/Documents/לוטוס/קורס/Architecture-web/node_modules/drei/node_modules/troika-three-text/dist/troika-three-text.esm.js"],"names":["DataTexture","LuminanceFormat","LinearFilter","Color","Vector3","InstancedBufferGeometry","Sphere","Box3","InstancedBufferAttribute","PlaneBufferGeometry","Vector2","Vector4","Matrix3","MeshBasicMaterial","DoubleSide","Matrix4","Mesh","defineWorkerModule","ThenableWorkerModule","createDerivedMaterial","voidMainRegExp","createSDFGenerator","createGlyphSegmentsIndex","config","sdfExponent","sdfMargin","CURVE_POINTS","pointOnQuadraticBezier","x0","y0","x1","y1","x2","y2","t","t2","x","y","pointOnCubicBezier","x3","y3","generateSDF","glyphObj","sdfSize","textureData","Uint8Array","glyphW","xMax","xMin","glyphH","yMax","yMin","fontUnitsMaxSearchDist","Math","max","fontUnitsMargin","textureMinFontX","textureMinFontY","textureMaxFontX","textureMaxFontY","fontUnitsTextureWidth","fontUnitsTextureHeight","fontUnitsTextureMaxDim","textureXToFontX","textureYToFontY","pathCommandCount","lineSegmentsIndex","firstX","firstY","prevX","prevY","forEachPathCommand","type","addLineSegment","prevPoint","i","nextPoint","sdfX","sdfY","signedDist","findNearestSignedDistance","alpha","pow","abs","min","round","renderingBounds","createFontProcessor","fontParser","sdfGenerator","defaultFontURL","fontAtlases","Object","create","fonts","INF","Infinity","doLoadFont","url","callback","tryLoad","onError","err","console","error","request","XMLHttpRequest","open","responseType","onload","status","Error","statusText","fontObj","response","e","onerror","send","loadFont","fontUrl","font","pending","push","callbacks","forEach","cb","getSdfAtlas","sdfGlyphSize","atlasKey","atlas","glyphs","glyphCount","process","text","fontSize","letterSpacing","lineHeight","maxWidth","textAlign","textIndent","whiteSpace","overflowWrap","anchorX","anchorY","includeCaretPositions","chunkedBoundsSize","colorRanges","metricsOnly","mainStart","now","timings","total","fontLoad","layout","sdf","sdfTotal","indexOf","warn","replace","hasMaxWidth","isFinite","newGlyphs","glyphBounds","glyphAtlasIndices","glyphColors","caretPositions","visibleBounds","chunkedBounds","maxLineWidth","renderableGlyphCount","canWrap","ascender","descender","unitsPerEm","layoutStart","fontSizeMult","halfLeading","topBaseline","caretHeight","caretBottomOffset","lineXOffset","currentLine","TextLine","lines","forEachGlyph","glyphX","charIndex","char","charAt","glyphWidth","advanceWidth","curLineCount","count","nextLine","isWhitespace","test","isEmpty","glyphAt","splitAt","adjustX","j","isSoftWrapped","fly","width","line","anchorXOffset","anchorYOffset","parsePercent","height","length","Float32Array","lineYOffset","renderableGlyphIndex","prevCharIndex","colorCharIndex","chunk","currentColor","lineGlyphCount","lineWidth","justifyAdjust","whitespaceCount","glyphInfo","hasOwnProperty","idx","glyphAtlasInfo","index","sdfStart","glyphSDFData","atlasIndex","bounds","startIdx","xStart","yStart","visX0","visY0","visX1","visY1","start","end","rect","chunkRect","ch","blockBounds","newGlyphSDFs","measure","args","result","str","match","pct","parseFloat","NaN","isNaN","self","performance","Date","data","prototype","ceil","flyweight","newLine","splice","reduce","obj","prop","all","defineProperty","get","set","val","needsSort","segments","sortSegments","sort","a","b","maxX","segment","minX","minY","maxY","closestDistSq","closestDist","seg","distSq","absSquareDistanceToLineSegment","sqrt","isPointInPoly","inside","intersects","lineX0","lineY0","lineX1","lineY1","ldx","ldy","lengthSq","dx","dy","typrFactory","window","Typr","parse","buff","bin","_bin","tag","readASCII","offset","majV","readUshort","minV","numF","readUint","fnts","foff","_readFont","ooff","sfnt_version","readFixed","numTables","searchRange","entrySelector","rangeShift","tags","_data","_offset","tabs","checkSum","toffset","trim","_tabOffset","tab","o","readF2dot14","num","readShort","readInt","p","uint8","int32","readInt8","int8","int16","readUshorts","len","arr","uint32","readUint64","l","s","String","fromCharCode","readUnicode","c","_tdec","readUTF8","tdec","readBytes","readASCIIArray","ArrayBuffer","Int8Array","Int16Array","uint16","Uint16Array","Int32Array","Uint32Array","_lctf","subt","offset0","tableVersion","offScriptList","offFeatureList","offLookupList","scriptList","readScriptList","featureList","readFeatureList","lookupList","readLookupList","noff","lut","readLookupTable","ltype","flag","cnt","numOfOnes","n","readClassDef","format","startGlyph","getInterval","readCoverage","cvg","fmt","coverageIndex","ind","readFeatureTable","featureParams","lookupCount","indices","readScriptTable","defLangSysOff","default","readLangSysTable","langSysCount","langSysOff","lookupOrder","reqFeature","featureCount","features","CFF","buffer","major","minor","hdrSize","offsize","ninds","readIndex","names","tdinds","topDicts","readDict","topdict","sinds","strings","readSubrs","CharStrings","cstr","ROS","FDArray","fdind","dict","_readFDict","FDSelect","rns","Encoding","readEncoding","charset","readCharset","ss","Private","Subrs","gsubinds","bias","nSubrs","Bias","tableSE","glyphByUnicode","cff","code","glyphBySE","charcode","array","nCodes","first","nLeft","inds","getCharString","b0","b1","b2","b3","b4","vs","op","size","readCharString","carr","key","nibs","nib0","nib1","chars","keys","cmap","version","offs","tables","platformID","encodingID","noffset","id","tind","parse0","parse4","parse6","parse12","log","lang","map","language","segCountX2","segCount","endCount","startCount","idDelta","idRangeOffset","glyphIdArray","firstCode","entryCount","nGroups","groups","off","startCharCode","endCharCode","startGlyphID","glyf","g","maxp","numGlyphs","_parseGlyf","loca","gl","noc","endPts","instructionLength","instructions","crdnum","flags","rep","xs","i8","same","ys","ARG_1_AND_2_ARE_WORDS","ARGS_ARE_XY_VALUES","WE_HAVE_A_SCALE","MORE_COMPONENTS","WE_HAVE_AN_X_AND_Y_SCALE","WE_HAVE_A_TWO_BY_TWO","WE_HAVE_INSTRUCTIONS","parts","part","m","d","tx","ty","p1","p2","glyphIndex","arg1","arg2","numInstr","instr","GPOS","covOff","coverage","valFmt1","ones1","pos","readValueRecord","valFmt2","ones2","pairsets","psc","psoff","pvc","gid2","value1","value2","val1","val2","classDef1","classDef2","class1Count","class2Count","matrix","row","valFmt","GSUB","delta","newg","vals","loff","readLigatureSet","cDefOffset","cDef","scset","subClassSetCount","scsOff","readSubClassSet","cvgs","backCvg","inptCvg","ahedCvg","lookupRec","readSubstLookupRecords","rUs","lset","readSubClassRule","rule","gcount","scount","input","substLookupRecords","out","readChainSubClassSet","readChainSubClassRule","pps","pi","subst","lcnt","readLigature","lig","chain","nglyph","ccnt","k","head","fontRevision","checkSumAdjustment","magicNumber","created","modified","macStyle","lowestRecPPEM","fontDirectionHint","indexToLocFormat","glyphDataFormat","hhea","lineGap","advanceWidthMax","minLeftSideBearing","minRightSideBearing","xMaxExtent","caretSlopeRise","caretSlopeRun","caretOffset","metricDataFormat","numberOfHMetrics","hmtx","aWidth","lsBearing","aw","lsb","kern","parseV1","nTables","glyph1","rval","readFormat0","tupleIndex","pleft","nPairs","left","right","value","glyph2","ver","maxPoints","maxContours","maxCompositePoints","maxCompositeContours","maxZones","maxTwilightPoints","maxStorage","maxFunctionDefs","maxInstructionDefs","maxStackElements","maxSizeOfInstructions","maxComponentElements","maxComponentDepth","name","stringOffset","languageID","nameID","slen","cname","soff","tid","toString","_lang","postScriptName","tname","version0","version1","version2","version5","xAvgCharWidth","usWeightClass","usWidthClass","fsType","ySubscriptXSize","ySubscriptYSize","ySubscriptXOffset","ySubscriptYOffset","ySuperscriptXSize","ySuperscriptYSize","ySuperscriptXOffset","ySuperscriptYOffset","yStrikeoutSize","yStrikeoutPosition","sFamilyClass","panose","ulUnicodeRange1","ulUnicodeRange2","ulUnicodeRange3","ulUnicodeRange4","achVendID","fsSelection","usFirstCharIndex","usLastCharIndex","sTypoAscender","sTypoDescender","sTypoLineGap","usWinAscent","usWinDescent","ulCodePageRange1","ulCodePageRange2","sxHeight","sCapHeight","usDefault","usBreak","usMaxContext","usLowerOpticalPointSize","usUpperOpticalPointSize","post","italicAngle","underlinePosition","underlineThickness","SVG","entries","svgDocIndexOffset","reserved","numEntries","endGlyphID","svgDocOffset","svgDocLength","sbuf","svg","f","toPath","pth","cmds","crds","prsr","DOMParser","doc","firstChild","tagName","nextSibling","vb","getAttribute","split","_toPath","children","nds","fill","ni","nd","tn","cfl","toks","_tokens","_toksToPath","ts","rn","cn","cc","charCodeAt","isNum","ox","oy","pc","cmd","cmu","toUpperCase","ps","reps","_reps","xi","yi","co","U","codeToGlyph","p0e4","p3e1","p1e0","p0e3","sind","gli","grp","glyphToPath","gid","path","state","stack","nStems","haveWidth","defaultWidthX","pdct","gi","_drawCFF","_drawGlyf","_simpleGlyph","_compoGlyph","i0","il","pr","nx","onCurve","prOnCurve","nxOnCurve","P","moveTo","lineTo","qcurveTo","closePath","prt","_getGlyphClass","cd","intr","getPairAdjustment","g1","g2","gpos","llist","flist","tused","fl","ti","ltab","adj","c1","c2","ind1","ind2","stringToGlyphs","gls","codePointAt","gsub","cligs","fi","ci","feat","_getWPfeature","_applySubs","wsep","R","L","slft","srgt","rlim","rl","good","em1","cind","cls","scs","sc","inp","cind2","lrs","tabi","_glsCovered","lr","tab2","glyphsToPath","clr","tpath","pathToSVG","prec","lmap","toFixed","join","pathToContext","ctx","bezierCurveTo","quadraticCurveTo","beginPath","fillStyle","curveTo","c1x","c1y","c2x","c2y","c3x","c3y","c4x","c4y","jpx","jpy","v","hasWidthArg","shift","nominalWidthX","pop","isX","sval","adx","ady","bchar","achar","bind","aind","subr","count1","alternate","woff2otfFactory","tinyInflate","module","TINF_OK","TINF_DATA_ERROR","Tree","table","trans","Data","source","dest","sourceIndex","bitcount","destLen","ltree","dtree","sltree","sdtree","length_bits","length_base","dist_bits","dist_base","clcidx","code_tree","lengths","tinf_build_bits_base","bits","base","sum","tinf_build_fixed_trees","lt","dt","tinf_build_tree","tinf_getbit","bit","tinf_read_bits","tinf_decode_symbol","cur","tinf_decode_trees","hlit","hdist","hclen","clen","sym","prev","tinf_inflate_block_data","dist","tinf_inflate_uncompressed_block","invlength","tinf_uncompress","bfinal","btype","res","slice","subarray","exports","convert_streams","bufferIn","dataViewIn","DataView","offsetIn","read2","getUint16","read4","getUint32","write2","dataViewOut","setUint16","offsetOut","write4","setUint32","WOFFHeader","signature","flavor","totalSfntSize","majorVersion","minorVersion","metaOffset","metaLength","metaOrigLength","privOffset","privLength","TableDirectoryEntries","compLength","origLength","origChecksum","arrayOut","acc","entry","bufferOut","TableDirectoryEntry","outOffset","compressedData","uncompressedData","padding","parserFactory","woff2otf","cmdArgLengths","M","Q","C","Z","wrapFontObj","typrFont","glyphMap","fontScale","glyphIndices","argsIndex","argsArray","numArgs","apply","call","peek","workerModule","dependencies","init","CONFIG","textureWidth","tempColor","hasRequested","configureTextBuilder","assign","atlases","getTextRenderInfo","toAbsoluteURL","colors","getHex","freeze","sdfTexture","undefined","processInWorker","then","texImg","image","biggerArray","cols","baseStartIndex","floor","srcStartIndex","rowStartIndex","needsUpdate","parameters","totalBounds","totalBlockSize","preloadFont","characters","Array","isArray","toObj","fromObj","linkEl","document","createElement","href","fontProcessorWorkerModule","fontProcessor","Thenable","thenable","resolve","getTransferables","transferables","GlyphsGeometry","templateGeometries","getTemplateGeometry","detail","geom","translate","tempVec3","glyphBoundsAttrName","glyphIndexAttrName","glyphColorAttrName","constructor","materialIndex","boundingSphere","boundingBox","computeBoundingSphere","computeBoundingBox","_detail","tpl","attr","attributes","clone","setIndex","getIndex","updateGlyphs","updateBufferAttr","_chunkedBounds","setInstanceCount","sphere","center","radius","distanceTo","box","applyClipRect","clipRect","chunks","w","z","setAttribute","attribute","attrName","newArray","itemSize","_maxInstanceCount","dispose","deleteAttribute","VERTEX_DEFS","VERTEX_TRANSFORM","FRAGMENT_DEFS","FRAGMENT_TRANSFORM","createTextDerivedMaterial","baseMaterial","textMaterial","chained","extensions","derivatives","uniforms","uTroikaSDFTexture","uTroikaSDFTextureSize","uTroikaSDFGlyphSize","uTroikaSDFExponent","uTroikaTotalBounds","uTroikaClipRect","uTroikaDistanceOffset","uTroikaOrient","uTroikaUseGlyphColors","uTroikaSDFDebug","vertexDefs","vertexTransform","fragmentDefs","fragmentColorTransform","customRewriter","vertexShader","fragmentShader","uDiffuseRE","transparent","defineProperties","isTroikaTextMaterial","shadowSide","side","Text","defaultMaterial","color","tempMat4","tempVec3a","tempVec3b","tempArray","origin","defaultOrient","raycastMesh","syncStartEvent","syncCompleteEvent","SYNCABLE_PROPS","COPYABLE_PROPS","concat","geometry","material","outlineWidth","outlineColor","depthOffset","orientation","glyphGeometryDetail","debugSDF","sync","_needsSync","_isSyncing","_queuedSyncs","dispatchEvent","textRenderInfo","_textRenderInfo","queued","fn","onBeforeRender","renderer","scene","camera","group","_prepareForRender","derivedMaterial","_derivedMaterial","_baseMaterial","_defaultMaterial","addEventListener","onDispose","removeEventListener","outlineMaterial","_outlineMtl","isTextOutlineMaterial","depthWrite","customDepthMaterial","getDepthMaterial","customDistanceMaterial","getDistanceMaterial","isOutline","textInfo","fromArray","distanceOffset","pad","polygonOffset","polygonOffsetFactor","polygonOffsetUnits","colorObj","_input","orient","_orientation","rotMat","hSign","hAxis","vSign","vAxis","lookAt","cross","setFromMatrix4","identity","raycast","raycaster","matrixWorld","multiplyMatrices","object","copy","privateKey","deprMsgShown","_deprecated_anchor","getCaretAtPoint","closestCaret","caretsByRow","groupCaretsByRow","closestRowY","carets","rowY","caret","_rectsCache","WeakMap","getSelectionRects","rects","prevResult","rows","Map","bottom","top","_caretsByRowCache","rowCarets"],"mappings":"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;AACA;AACA;AAAiG;AACjG;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CA9BA,C,CAgCA;;AACA,MAAMC,aAAa,GAAI;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AAAE;AACN;AACA;AACA;AAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AAAE;AACN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAK;AACL;AACA;AACA;AACA;AACA,IAAI;AAAE;AACN;AACA;AACA;AACA;AAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAtFA,C,CAwFA;;AACA,MAAMC,kBAAkB,GAAI;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAZA;AAeA;AACA;AACA;;AACA,SAASC,yBAAT,CAAmCC,YAAnC,EAAiD;AAC/C,QAAMC,YAAY,GAAGpkC,qBAAqB,CAACmkC,YAAD,EAAe;AACvDE,IAAAA,OAAO,EAAE,IAD8C;AAEvDC,IAAAA,UAAU,EAAE;AACVC,MAAAA,WAAW,EAAE;AADH,KAF2C;AAKvDC,IAAAA,QAAQ,EAAE;AACRC,MAAAA,iBAAiB,EAAE;AAACrd,QAAAA,KAAK,EAAE;AAAR,OADX;AAERsd,MAAAA,qBAAqB,EAAE;AAACtd,QAAAA,KAAK,EAAE,IAAI7nB,OAAJ;AAAR,OAFf;AAGRolC,MAAAA,mBAAmB,EAAE;AAACvd,QAAAA,KAAK,EAAE;AAAR,OAHb;AAIRwd,MAAAA,kBAAkB,EAAE;AAACxd,QAAAA,KAAK,EAAE;AAAR,OAJZ;AAKRyd,MAAAA,kBAAkB,EAAE;AAACzd,QAAAA,KAAK,EAAE,IAAI5nB,OAAJ,CAAY,CAAZ,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","sourcesContent":["import { DataTexture, LuminanceFormat, LinearFilter, Color, Vector3, InstancedBufferGeometry, Sphere, Box3, InstancedBufferAttribute, PlaneBufferGeometry, Vector2, Vector4, Matrix3, MeshBasicMaterial, DoubleSide, Matrix4, Mesh } from 'three';\nimport { defineWorkerModule, ThenableWorkerModule } from 'troika-worker-utils';\nimport { createDerivedMaterial, voidMainRegExp } from 'troika-three-utils';\n\n/**\r\n * Initializes and returns a function to generate an SDF texture for a given glyph.\r\n * @param {function} createGlyphSegmentsIndex - factory for a GlyphSegmentsIndex implementation.\r\n * @param {number} config.sdfExponent\r\n * @param {number} config.sdfMargin\r\n *\r\n * @return {function(Object): {renderingBounds: [minX, minY, maxX, maxY], textureData: Uint8Array}}\r\n */\r\nfunction createSDFGenerator(createGlyphSegmentsIndex, config) {\r\n  const { sdfExponent, sdfMargin } = config;\r\n\r\n  /**\r\n   * How many straight line segments to use when approximating a glyph's quadratic/cubic bezier curves.\r\n   */\r\n  const CURVE_POINTS = 16;\r\n\r\n  /**\r\n   * Find the point on a quadratic bezier curve at t where t is in the range [0, 1]\r\n   */\r\n  function pointOnQuadraticBezier(x0, y0, x1, y1, x2, y2, t) {\r\n    const t2 = 1 - t;\r\n    return {\r\n      x: t2 * t2 * x0 + 2 * t2 * t * x1 + t * t * x2,\r\n      y: t2 * t2 * y0 + 2 * t2 * t * y1 + t * t * y2\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Find the point on a cubic bezier curve at t where t is in the range [0, 1]\r\n   */\r\n  function pointOnCubicBezier(x0, y0, x1, y1, x2, y2, x3, y3, t) {\r\n    const t2 = 1 - t;\r\n    return {\r\n      x: t2 * t2 * t2 * x0 + 3 * t2 * t2 * t * x1 + 3 * t2 * t * t * x2 + t * t * t * x3,\r\n      y: t2 * t2 * t2 * y0 + 3 * t2 * t2 * t * y1 + 3 * t2 * t * t * y2 + t * t * t * y3\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Generate an SDF texture segment for a single glyph.\r\n   * @param {object} glyphObj\r\n   * @param {number} sdfSize - the length of one side of the SDF image.\r\n   *        Larger images encode more details. Must be a power of 2.\r\n   * @return {{textureData: Uint8Array, renderingBounds: *[]}}\r\n   */\r\n  function generateSDF(glyphObj, sdfSize) {\r\n    //console.time('glyphSDF')\r\n\r\n    const textureData = new Uint8Array(sdfSize * sdfSize);\r\n\r\n    // Determine mapping between glyph grid coords and sdf grid coords\r\n    const glyphW = glyphObj.xMax - glyphObj.xMin;\r\n    const glyphH = glyphObj.yMax - glyphObj.yMin;\r\n\r\n    // Choose a maximum search distance radius in font units, based on the glyph's max dimensions\r\n    const fontUnitsMaxSearchDist = Math.max(glyphW, glyphH);\r\n\r\n    // Margin - add an extra 0.5 over the configured value because the outer 0.5 doesn't contain\r\n    // useful interpolated values and will be ignored anyway.\r\n    const fontUnitsMargin = Math.max(glyphW, glyphH) / sdfSize * (sdfMargin * sdfSize + 0.5);\r\n\r\n    // Metrics of the texture/quad in font units\r\n    const textureMinFontX = glyphObj.xMin - fontUnitsMargin;\r\n    const textureMinFontY = glyphObj.yMin - fontUnitsMargin;\r\n    const textureMaxFontX = glyphObj.xMax + fontUnitsMargin;\r\n    const textureMaxFontY = glyphObj.yMax + fontUnitsMargin;\r\n    const fontUnitsTextureWidth = textureMaxFontX - textureMinFontX;\r\n    const fontUnitsTextureHeight = textureMaxFontY - textureMinFontY;\r\n    const fontUnitsTextureMaxDim = Math.max(fontUnitsTextureWidth, fontUnitsTextureHeight);\r\n\r\n    function textureXToFontX(x) {\r\n      return textureMinFontX + fontUnitsTextureWidth * x / sdfSize\r\n    }\r\n\r\n    function textureYToFontY(y) {\r\n      return textureMinFontY + fontUnitsTextureHeight * y / sdfSize\r\n    }\r\n\r\n    if (glyphObj.pathCommandCount) { //whitespace chars will have no commands, so we can skip all this\r\n      // Decompose all paths into straight line segments and add them to a quadtree\r\n      const lineSegmentsIndex = createGlyphSegmentsIndex(glyphObj);\r\n      let firstX, firstY, prevX, prevY;\r\n      glyphObj.forEachPathCommand((type, x0, y0, x1, y1, x2, y2) => {\r\n        switch (type) {\r\n          case 'M':\r\n            prevX = firstX = x0;\r\n            prevY = firstY = y0;\r\n            break\r\n          case 'L':\r\n            if (x0 !== prevX || y0 !== prevY) { //yup, some fonts have zero-length line commands\r\n              lineSegmentsIndex.addLineSegment(prevX, prevY, (prevX = x0), (prevY = y0));\r\n            }\r\n            break\r\n          case 'Q': {\r\n            let prevPoint = {x: prevX, y: prevY};\r\n            for (let i = 1; i < CURVE_POINTS; i++) {\r\n              let nextPoint = pointOnQuadraticBezier(\r\n                prevX, prevY,\r\n                x0, y0,\r\n                x1, y1,\r\n                i / (CURVE_POINTS - 1)\r\n              );\r\n              lineSegmentsIndex.addLineSegment(prevPoint.x, prevPoint.y, nextPoint.x, nextPoint.y);\r\n              prevPoint = nextPoint;\r\n            }\r\n            prevX = x1;\r\n            prevY = y1;\r\n            break\r\n          }\r\n          case 'C': {\r\n            let prevPoint = {x: prevX, y: prevY};\r\n            for (let i = 1; i < CURVE_POINTS; i++) {\r\n              let nextPoint = pointOnCubicBezier(\r\n                prevX, prevY,\r\n                x0, y0,\r\n                x1, y1,\r\n                x2, y2,\r\n                i / (CURVE_POINTS - 1)\r\n              );\r\n              lineSegmentsIndex.addLineSegment(prevPoint.x, prevPoint.y, nextPoint.x, nextPoint.y);\r\n              prevPoint = nextPoint;\r\n            }\r\n            prevX = x2;\r\n            prevY = y2;\r\n            break\r\n          }\r\n          case 'Z':\r\n            if (prevX !== firstX || prevY !== firstY) {\r\n              lineSegmentsIndex.addLineSegment(prevX, prevY, firstX, firstY);\r\n            }\r\n            break\r\n        }\r\n      });\r\n\r\n      // For each target SDF texel, find the distance from its center to its nearest line segment,\r\n      // map that distance to an alpha value, and write that alpha to the texel\r\n      for (let sdfX = 0; sdfX < sdfSize; sdfX++) {\r\n        for (let sdfY = 0; sdfY < sdfSize; sdfY++) {\r\n          const signedDist = lineSegmentsIndex.findNearestSignedDistance(\r\n            textureXToFontX(sdfX + 0.5),\r\n            textureYToFontY(sdfY + 0.5),\r\n            fontUnitsMaxSearchDist\r\n          );\r\n\r\n          // Use an exponential scale to ensure the texels very near the glyph path have adequate\r\n          // precision, while allowing the distance field to cover the entire texture, given that\r\n          // there are only 8 bits available. Formula visualized: https://www.desmos.com/calculator/uiaq5aqiam\r\n          let alpha = Math.pow((1 - Math.abs(signedDist) / fontUnitsTextureMaxDim), sdfExponent) / 2;\r\n          if (signedDist < 0) {\r\n            alpha = 1 - alpha;\r\n          }\r\n\r\n          alpha = Math.max(0, Math.min(255, Math.round(alpha * 255))); //clamp\r\n          textureData[sdfY * sdfSize + sdfX] = alpha;\r\n        }\r\n      }\r\n    }\r\n\r\n    //console.timeEnd('glyphSDF')\r\n\r\n    return {\r\n      textureData: textureData,\r\n\r\n      renderingBounds: [\r\n        textureMinFontX,\r\n        textureMinFontY,\r\n        textureMaxFontX,\r\n        textureMaxFontY\r\n      ]\r\n    }\r\n  }\r\n\r\n\r\n  return generateSDF\r\n}\n\n/**\r\n * Creates a self-contained environment for processing text rendering requests.\r\n *\r\n * It is important that this function has no closure dependencies, so that it can be easily injected\r\n * into the source for a Worker without requiring a build step or complex dependency loading. All its\r\n * dependencies must be passed in at initialization.\r\n *\r\n * @param {function} fontParser - a function that accepts an ArrayBuffer of the font data and returns\r\n * a standardized structure giving access to the font and its glyphs:\r\n *   {\r\n *     unitsPerEm: number,\r\n *     ascender: number,\r\n *     descender: number,\r\n *     forEachGlyph(string, fontSize, letterSpacing, callback) {\r\n *       //invokes callback for each glyph to render, passing it an object:\r\n *       callback({\r\n *         index: number,\r\n *         advanceWidth: number,\r\n *         xMin: number,\r\n *         yMin: number,\r\n *         xMax: number,\r\n *         yMax: number,\r\n *         pathCommandCount: number,\r\n *         forEachPathCommand(callback) {\r\n *           //invokes callback for each path command, with args:\r\n *           callback(\r\n *             type: 'M|L|C|Q|Z',\r\n *             ...args //0 to 6 args depending on the type\r\n *           )\r\n *         }\r\n *       })\r\n *     }\r\n *   }\r\n * @param {function} sdfGenerator - a function that accepts a glyph object and generates an SDF texture\r\n * from it.\r\n * @param {Object} config\r\n * @return {Object}\r\n */\r\nfunction createFontProcessor(fontParser, sdfGenerator, config) {\r\n\r\n  const {\r\n    defaultFontURL\r\n  } = config;\r\n\r\n\r\n  /**\r\n   * @private\r\n   * Holds data about font glyphs and how they relate to SDF atlases\r\n   *\r\n   * {\r\n   *   'fontUrl@sdfSize': {\r\n   *     fontObj: {}, //result of the fontParser\r\n   *     glyphs: {\r\n   *       [glyphIndex]: {\r\n   *         atlasIndex: 0,\r\n   *         glyphObj: {}, //glyph object from the fontParser\r\n   *         renderingBounds: [x0, y0, x1, y1]\r\n   *       },\r\n   *       ...\r\n   *     },\r\n   *     glyphCount: 123\r\n   *   }\r\n   * }\r\n   */\r\n  const fontAtlases = Object.create(null);\r\n\r\n  /**\r\n   * Holds parsed font objects by url\r\n   */\r\n  const fonts = Object.create(null);\r\n\r\n  const INF = Infinity;\r\n\r\n\r\n  /**\r\n   * Load a given font url\r\n   */\r\n  function doLoadFont(url, callback) {\r\n    function tryLoad() {\r\n      const onError = err => {\r\n        console.error(`Failure loading font ${url}${url === defaultFontURL ? '' : '; trying fallback'}`, err);\r\n        if (url !== defaultFontURL) {\r\n          url = defaultFontURL;\r\n          tryLoad();\r\n        }\r\n      };\r\n      try {\r\n        const request = new XMLHttpRequest();\r\n        request.open('get', url, true);\r\n        request.responseType = 'arraybuffer';\r\n        request.onload = function () {\r\n          if (request.status >= 400) {\r\n            onError(new Error(request.statusText));\r\n          }\r\n          else if (request.status > 0) {\r\n            try {\r\n              const fontObj = fontParser(request.response);\r\n              callback(fontObj);\r\n            } catch (e) {\r\n              onError(e);\r\n            }\r\n          }\r\n        };\r\n        request.onerror = onError;\r\n        request.send();\r\n      } catch(err) {\r\n        onError(err);\r\n      }\r\n    }\r\n    tryLoad();\r\n  }\r\n\r\n\r\n  /**\r\n   * Load a given font url if needed, invoking a callback when it's loaded. If already\r\n   * loaded, the callback will be called synchronously.\r\n   */\r\n  function loadFont(fontUrl, callback) {\r\n    if (!fontUrl) fontUrl = defaultFontURL;\r\n    let font = fonts[fontUrl];\r\n    if (font) {\r\n      // if currently loading font, add to callbacks, otherwise execute immediately\r\n      if (font.pending) {\r\n        font.pending.push(callback);\r\n      } else {\r\n        callback(font);\r\n      }\r\n    } else {\r\n      fonts[fontUrl] = {pending: [callback]};\r\n      doLoadFont(fontUrl, fontObj => {\r\n        let callbacks = fonts[fontUrl].pending;\r\n        fonts[fontUrl] = fontObj;\r\n        callbacks.forEach(cb => cb(fontObj));\r\n      });\r\n    }\r\n  }\r\n\r\n\r\n  /**\r\n   * Get the atlas data for a given font url, loading it from the network and initializing\r\n   * its atlas data objects if necessary.\r\n   */\r\n  function getSdfAtlas(fontUrl, sdfGlyphSize, callback) {\r\n    if (!fontUrl) fontUrl = defaultFontURL;\r\n    let atlasKey = `${fontUrl}@${sdfGlyphSize}`;\r\n    let atlas = fontAtlases[atlasKey];\r\n    if (atlas) {\r\n      callback(atlas);\r\n    } else {\r\n      loadFont(fontUrl, fontObj => {\r\n        atlas = fontAtlases[atlasKey] || (fontAtlases[atlasKey] = {\r\n          fontObj: fontObj,\r\n          glyphs: {},\r\n          glyphCount: 0\r\n        });\r\n        callback(atlas);\r\n      });\r\n    }\r\n  }\r\n\r\n\r\n  /**\r\n   * Main entry point.\r\n   * Process a text string with given font and formatting parameters, and return all info\r\n   * necessary to render all its glyphs.\r\n   */\r\n  function process(\r\n    {\r\n      text='',\r\n      font=defaultFontURL,\r\n      sdfGlyphSize=64,\r\n      fontSize=1,\r\n      letterSpacing=0,\r\n      lineHeight='normal',\r\n      maxWidth=INF,\r\n      textAlign='left',\r\n      textIndent=0,\r\n      whiteSpace='normal',\r\n      overflowWrap='normal',\r\n      anchorX = 0,\r\n      anchorY = 0,\r\n      includeCaretPositions=false,\r\n      chunkedBoundsSize=8192,\r\n      colorRanges=null\r\n    },\r\n    callback,\r\n    metricsOnly=false\r\n  ) {\r\n    const mainStart = now();\r\n    const timings = {total: 0, fontLoad: 0, layout: 0, sdf: {}, sdfTotal: 0};\r\n\r\n    // Ensure newlines are normalized\r\n    if (text.indexOf('\\r') > -1) {\r\n      console.warn('FontProcessor.process: got text with \\\\r chars; normalizing to \\\\n');\r\n      text = text.replace(/\\r\\n/g, '\\n').replace(/\\r/g, '\\n');\r\n    }\r\n\r\n    // Ensure we've got numbers not strings\r\n    fontSize = +fontSize;\r\n    letterSpacing = +letterSpacing;\r\n    maxWidth = +maxWidth;\r\n    lineHeight = lineHeight || 'normal';\r\n    textIndent = +textIndent;\r\n\r\n    getSdfAtlas(font, sdfGlyphSize, atlas => {\r\n      const fontObj = atlas.fontObj;\r\n      const hasMaxWidth = isFinite(maxWidth);\r\n      let newGlyphs = null;\r\n      let glyphBounds = null;\r\n      let glyphAtlasIndices = null;\r\n      let glyphColors = null;\r\n      let caretPositions = null;\r\n      let visibleBounds = null;\r\n      let chunkedBounds = null;\r\n      let maxLineWidth = 0;\r\n      let renderableGlyphCount = 0;\r\n      let canWrap = whiteSpace !== 'nowrap';\r\n      const {ascender, descender, unitsPerEm} = fontObj;\r\n      timings.fontLoad = now() - mainStart;\r\n      const layoutStart = now();\r\n\r\n      // Find conversion between native font units and fontSize units; this will already be done\r\n      // for the gx/gy values below but everything else we'll need to convert\r\n      const fontSizeMult = fontSize / unitsPerEm;\r\n\r\n      // Determine appropriate value for 'normal' line height based on the font's actual metrics\r\n      // TODO this does not guarantee individual glyphs won't exceed the line height, e.g. Roboto; should we use yMin/Max instead?\r\n      if (lineHeight === 'normal') {\r\n        lineHeight = (ascender - descender) / unitsPerEm;\r\n      }\r\n\r\n      // Determine line height and leading adjustments\r\n      lineHeight = lineHeight * fontSize;\r\n      const halfLeading = (lineHeight - (ascender - descender) * fontSizeMult) / 2;\r\n      const topBaseline = -(ascender * fontSizeMult + halfLeading);\r\n      const caretHeight = Math.min(lineHeight, (ascender - descender) * fontSizeMult);\r\n      const caretBottomOffset = (ascender + descender) / 2 * fontSizeMult - caretHeight / 2;\r\n\r\n      // Distribute glyphs into lines based on wrapping\r\n      let lineXOffset = textIndent;\r\n      let currentLine = new TextLine();\r\n      const lines = [currentLine];\r\n      fontObj.forEachGlyph(text, fontSize, letterSpacing, (glyphObj, glyphX, charIndex) => {\r\n        const char = text.charAt(charIndex);\r\n        const glyphWidth = glyphObj.advanceWidth * fontSizeMult;\r\n        const curLineCount = currentLine.count;\r\n        let nextLine;\r\n\r\n        // Calc isWhitespace and isEmpty once per glyphObj\r\n        if (!('isEmpty' in glyphObj)) {\r\n          glyphObj.isWhitespace = !!char && /\\s/.test(char);\r\n          glyphObj.isEmpty = glyphObj.xMin === glyphObj.xMax || glyphObj.yMin === glyphObj.yMax;\r\n        }\r\n        if (!glyphObj.isWhitespace && !glyphObj.isEmpty) {\r\n          renderableGlyphCount++;\r\n        }\r\n\r\n        // If a non-whitespace character overflows the max width, we need to soft-wrap\r\n        if (canWrap && hasMaxWidth && !glyphObj.isWhitespace && glyphX + glyphWidth + lineXOffset > maxWidth && curLineCount) {\r\n          // If it's the first char after a whitespace, start a new line\r\n          if (currentLine.glyphAt(curLineCount - 1).glyphObj.isWhitespace) {\r\n            nextLine = new TextLine();\r\n            lineXOffset = -glyphX;\r\n          } else {\r\n            // Back up looking for a whitespace character to wrap at\r\n            for (let i = curLineCount; i--;) {\r\n              // If we got the start of the line there's no soft break point; make hard break if overflowWrap='break-word'\r\n              if (i === 0 && overflowWrap === 'break-word') {\r\n                nextLine = new TextLine();\r\n                lineXOffset = -glyphX;\r\n                break\r\n              }\r\n              // Found a soft break point; move all chars since it to a new line\r\n              else if (currentLine.glyphAt(i).glyphObj.isWhitespace) {\r\n                nextLine = currentLine.splitAt(i + 1);\r\n                const adjustX = nextLine.glyphAt(0).x;\r\n                lineXOffset -= adjustX;\r\n                for (let j = nextLine.count; j--;) {\r\n                  nextLine.glyphAt(j).x -= adjustX;\r\n                }\r\n                break\r\n              }\r\n            }\r\n          }\r\n          if (nextLine) {\r\n            currentLine.isSoftWrapped = true;\r\n            currentLine = nextLine;\r\n            lines.push(currentLine);\r\n            maxLineWidth = maxWidth; //after soft wrapping use maxWidth as calculated width\r\n          }\r\n        }\r\n\r\n        let fly = currentLine.glyphAt(currentLine.count);\r\n        fly.glyphObj = glyphObj;\r\n        fly.x = glyphX + lineXOffset;\r\n        fly.width = glyphWidth;\r\n        fly.charIndex = charIndex;\r\n\r\n        // Handle hard line breaks\r\n        if (char === '\\n') {\r\n          currentLine = new TextLine();\r\n          lines.push(currentLine);\r\n          lineXOffset = -(glyphX + glyphWidth + (letterSpacing * fontSize)) + textIndent;\r\n        }\r\n      });\r\n\r\n      // Calculate width of each line (excluding trailing whitespace) and maximum block width\r\n      lines.forEach(line => {\r\n        for (let i = line.count; i--;) {\r\n          let {glyphObj, x, width} = line.glyphAt(i);\r\n          if (!glyphObj.isWhitespace) {\r\n            line.width = x + width;\r\n            if (line.width > maxLineWidth) {\r\n              maxLineWidth = line.width;\r\n            }\r\n            return\r\n          }\r\n        }\r\n      });\r\n\r\n      // Find overall position adjustments for anchoring\r\n      let anchorXOffset = 0;\r\n      let anchorYOffset = 0;\r\n      if (anchorX) {\r\n        if (typeof anchorX === 'number') {\r\n          anchorXOffset = -anchorX;\r\n        }\r\n        else if (typeof anchorX === 'string') {\r\n          anchorXOffset = -maxLineWidth * (\r\n            anchorX === 'left' ? 0 :\r\n            anchorX === 'center' ? 0.5 :\r\n            anchorX === 'right' ? 1 :\r\n            parsePercent(anchorX)\r\n          );\r\n        }\r\n      }\r\n      if (anchorY) {\r\n        if (typeof anchorY === 'number') {\r\n          anchorYOffset = -anchorY;\r\n        }\r\n        else if (typeof anchorY === 'string') {\r\n          let height = lines.length * lineHeight;\r\n          anchorYOffset = anchorY === 'top' ? 0 :\r\n            anchorY === 'top-baseline' ? -topBaseline :\r\n            anchorY === 'middle' ? height / 2 :\r\n            anchorY === 'bottom' ? height :\r\n            anchorY === 'bottom-baseline' ? height - halfLeading + descender * fontSizeMult :\r\n            parsePercent(anchorY) * height;\r\n        }\r\n      }\r\n\r\n      if (!metricsOnly) {\r\n        // Process each line, applying alignment offsets, adding each glyph to the atlas, and\r\n        // collecting all renderable glyphs into a single collection.\r\n        glyphBounds = new Float32Array(renderableGlyphCount * 4);\r\n        glyphAtlasIndices = new Float32Array(renderableGlyphCount);\r\n        visibleBounds = [INF, INF, -INF, -INF];\r\n        chunkedBounds = [];\r\n        let lineYOffset = topBaseline;\r\n        if (includeCaretPositions) {\r\n          caretPositions = new Float32Array(text.length * 3);\r\n        }\r\n        if (colorRanges) {\r\n          glyphColors = new Uint8Array(renderableGlyphCount * 3);\r\n        }\r\n        let renderableGlyphIndex = 0;\r\n        let prevCharIndex = -1;\r\n        let colorCharIndex = -1;\r\n        let chunk;\r\n        let currentColor;\r\n        lines.forEach(line => {\r\n          const {count:lineGlyphCount, width:lineWidth} = line;\r\n\r\n          // Ignore empty lines\r\n          if (lineGlyphCount > 0) {\r\n            // Find x offset for horizontal alignment\r\n            let lineXOffset = 0;\r\n            let justifyAdjust = 0;\r\n            if (textAlign === 'center') {\r\n              lineXOffset = (maxLineWidth - lineWidth) / 2;\r\n            } else if (textAlign === 'right') {\r\n              lineXOffset = maxLineWidth - lineWidth;\r\n            } else if (textAlign === 'justify' && line.isSoftWrapped) {\r\n              // just count the non-trailing whitespace characters, and we'll adjust the offsets per\r\n              // character in the next loop\r\n              let whitespaceCount = 0;\r\n              for (let i = lineGlyphCount; i--;) {\r\n                if (!line.glyphAt(i).glyphObj.isWhitespace) {\r\n                  while (i--) {\r\n                    if (!line.glyphAt(i).glyphObj) {\r\n                      debugger\r\n                    }\r\n                    if (line.glyphAt(i).glyphObj.isWhitespace) {\r\n                      whitespaceCount++;\r\n                    }\r\n                  }\r\n                  break\r\n                }\r\n              }\r\n              justifyAdjust = (maxLineWidth - lineWidth) / whitespaceCount;\r\n            }\r\n\r\n            for (let i = 0; i < lineGlyphCount; i++) {\r\n              const glyphInfo = line.glyphAt(i);\r\n              const glyphObj = glyphInfo.glyphObj;\r\n\r\n              // Apply position adjustments\r\n              if (lineXOffset) glyphInfo.x += lineXOffset;\r\n\r\n              // Expand whitespaces for justify alignment\r\n              if (justifyAdjust !== 0 && glyphObj.isWhitespace) {\r\n                lineXOffset += justifyAdjust;\r\n                glyphInfo.width += justifyAdjust;\r\n              }\r\n\r\n              // Add caret positions\r\n              if (includeCaretPositions) {\r\n                const {charIndex} = glyphInfo;\r\n                caretPositions[charIndex * 3] = glyphInfo.x + anchorXOffset; //left edge x\r\n                caretPositions[charIndex * 3 + 1] = glyphInfo.x + glyphInfo.width + anchorXOffset; //right edge x\r\n                caretPositions[charIndex * 3 + 2] = lineYOffset + caretBottomOffset + anchorYOffset; //common bottom y\r\n\r\n                // If we skipped any chars from the previous glyph (due to ligature subs), copy the\r\n                // previous glyph's info to those missing char indices. In the future we may try to\r\n                // use the font's LigatureCaretList table to get interior caret positions.\r\n                while (charIndex - prevCharIndex > 1) {\r\n                  caretPositions[(prevCharIndex + 1) * 3] = caretPositions[prevCharIndex * 3 + 1];\r\n                  caretPositions[(prevCharIndex + 1) * 3 + 1] = caretPositions[prevCharIndex * 3 + 1];\r\n                  caretPositions[(prevCharIndex + 1) * 3 + 2] = caretPositions[prevCharIndex * 3 + 2];\r\n                  prevCharIndex++;\r\n                }\r\n                prevCharIndex = charIndex;\r\n              }\r\n\r\n              // Track current color range\r\n              if (colorRanges) {\r\n                const {charIndex} = glyphInfo;\r\n                while(charIndex > colorCharIndex) {\r\n                  colorCharIndex++;\r\n                  if (colorRanges.hasOwnProperty(colorCharIndex)) {\r\n                    currentColor = colorRanges[colorCharIndex];\r\n                  }\r\n                }\r\n              }\r\n\r\n              // Get atlas data for renderable glyphs\r\n              if (!glyphObj.isWhitespace && !glyphObj.isEmpty) {\r\n                const idx = renderableGlyphIndex++;\r\n\r\n                // If we haven't seen this glyph yet, generate its SDF\r\n                let glyphAtlasInfo = atlas.glyphs[glyphObj.index];\r\n                if (!glyphAtlasInfo) {\r\n                  const sdfStart = now();\r\n                  const glyphSDFData = sdfGenerator(glyphObj, sdfGlyphSize);\r\n                  timings.sdf[text.charAt(glyphInfo.charIndex)] = now() - sdfStart;\r\n\r\n                  // Assign this glyph the next available atlas index\r\n                  glyphSDFData.atlasIndex = atlas.glyphCount++;\r\n\r\n                  // Queue it up in the response's newGlyphs list\r\n                  if (!newGlyphs) newGlyphs = [];\r\n                  newGlyphs.push(glyphSDFData);\r\n\r\n                  // Store its metadata (not the texture) in our atlas info\r\n                  glyphAtlasInfo = atlas.glyphs[glyphObj.index] = {\r\n                    atlasIndex: glyphSDFData.atlasIndex,\r\n                    glyphObj: glyphObj,\r\n                    renderingBounds: glyphSDFData.renderingBounds\r\n                  };\r\n                }\r\n\r\n                // Determine final glyph quad bounds and add them to the glyphBounds array\r\n                const bounds = glyphAtlasInfo.renderingBounds;\r\n                const startIdx = idx * 4;\r\n                const xStart = glyphInfo.x + anchorXOffset;\r\n                const yStart = lineYOffset + anchorYOffset;\r\n                glyphBounds[startIdx] = xStart + bounds[0] * fontSizeMult;\r\n                glyphBounds[startIdx + 1] = yStart + bounds[1] * fontSizeMult;\r\n                glyphBounds[startIdx + 2] = xStart + bounds[2] * fontSizeMult;\r\n                glyphBounds[startIdx + 3] = yStart + bounds[3] * fontSizeMult;\r\n\r\n                // Track total visible bounds\r\n                const visX0 = xStart + glyphObj.xMin * fontSizeMult;\r\n                const visY0 = yStart + glyphObj.yMin * fontSizeMult;\r\n                const visX1 = xStart + glyphObj.xMax * fontSizeMult;\r\n                const visY1 = yStart + glyphObj.yMax * fontSizeMult;\r\n                if (visX0 < visibleBounds[0]) visibleBounds[0] = visX0;\r\n                if (visY0 < visibleBounds[1]) visibleBounds[1] = visY0;\r\n                if (visX1 > visibleBounds[2]) visibleBounds[2] = visX1;\r\n                if (visY1 > visibleBounds[3]) visibleBounds[3] = visY1;\r\n\r\n                // Track bounding rects for each chunk of N glyphs\r\n                if (idx % chunkedBoundsSize === 0) {\r\n                  chunk = {start: idx, end: idx, rect: [INF, INF, -INF, -INF]};\r\n                  chunkedBounds.push(chunk);\r\n                }\r\n                chunk.end++;\r\n                const chunkRect = chunk.rect;\r\n                if (visX0 < chunkRect[0]) chunkRect[0] = visX0;\r\n                if (visY0 < chunkRect[1]) chunkRect[1] = visY0;\r\n                if (visX1 > chunkRect[2]) chunkRect[2] = visX1;\r\n                if (visY1 > chunkRect[3]) chunkRect[3] = visY1;\r\n\r\n                // Add to atlas indices array\r\n                glyphAtlasIndices[idx] = glyphAtlasInfo.atlasIndex;\r\n\r\n                // Add colors\r\n                if (colorRanges) {\r\n                  const start = idx * 3;\r\n                  glyphColors[start] = currentColor >> 16 & 255;\r\n                  glyphColors[start + 1] = currentColor >> 8 & 255;\r\n                  glyphColors[start + 2] = currentColor & 255;\r\n                }\r\n              }\r\n            }\r\n          }\r\n\r\n          // Increment y offset for next line\r\n          lineYOffset -= lineHeight;\r\n        });\r\n      }\r\n\r\n      // Timing stats\r\n      for (let ch in timings.sdf) {\r\n        timings.sdfTotal += timings.sdf[ch];\r\n      }\r\n      timings.layout = now() - layoutStart - timings.sdfTotal;\r\n      timings.total = now() - mainStart;\r\n\r\n      callback({\r\n        glyphBounds, //rendering quad bounds for each glyph [x1, y1, x2, y2]\r\n        glyphAtlasIndices, //atlas indices for each glyph\r\n        caretPositions, //x,y of bottom of cursor position before each char, plus one after last char\r\n        caretHeight, //height of cursor from bottom to top\r\n        glyphColors, //color for each glyph, if color ranges supplied\r\n        chunkedBounds, //total rects per (n=chunkedBoundsSize) consecutive glyphs\r\n        ascender: ascender * fontSizeMult, //font ascender\r\n        descender: descender * fontSizeMult, //font descender\r\n        lineHeight, //computed line height\r\n        topBaseline, //y coordinate of the top line's baseline\r\n        blockBounds: [ //bounds for the whole block of text, including vertical padding for lineHeight\r\n          anchorXOffset,\r\n          anchorYOffset - lines.length * lineHeight,\r\n          anchorXOffset + maxLineWidth,\r\n          anchorYOffset\r\n        ],\r\n        visibleBounds, //total bounds of visible text paths, may be larger or smaller than totalBounds\r\n        newGlyphSDFs: newGlyphs, //if this request included any new SDFs for the atlas, they'll be included here\r\n        timings\r\n      });\r\n    });\r\n  }\r\n\r\n\r\n  /**\r\n   * For a given text string and font parameters, determine the resulting block dimensions\r\n   * after wrapping for the given maxWidth.\r\n   * @param args\r\n   * @param callback\r\n   */\r\n  function measure(args, callback) {\r\n    process(args, (result) => {\r\n      const [x0, y0, x1, y1] = result.blockBounds;\r\n      callback({\r\n        width: x1 - x0,\r\n        height: y1 - y0\r\n      });\r\n    }, {metricsOnly: true});\r\n  }\r\n\r\n  function parsePercent(str) {\r\n    let match = str.match(/^([\\d.]+)%$/);\r\n    let pct = match ? parseFloat(match[1]) : NaN;\r\n    return isNaN(pct) ? 0 : pct / 100\r\n  }\r\n\r\n  function now() {\r\n    return (self.performance || Date).now()\r\n  }\r\n\r\n  // Array-backed structure for a single line's glyphs data\r\n  function TextLine() {\r\n    this.data = [];\r\n  }\r\n  TextLine.prototype = {\r\n    width: 0,\r\n    isSoftWrapped: false,\r\n    get count() {\r\n      return Math.ceil(this.data.length / 4)\r\n    },\r\n    glyphAt(i) {\r\n      let fly = TextLine.flyweight;\r\n      fly.data = this.data;\r\n      fly.index = i;\r\n      return fly\r\n    },\r\n    splitAt(i) {\r\n      let newLine = new TextLine();\r\n      newLine.data = this.data.splice(i * 4);\r\n      return newLine\r\n    }\r\n  };\r\n  TextLine.flyweight = ['glyphObj', 'x', 'width', 'charIndex'].reduce((obj, prop, i, all) => {\r\n    Object.defineProperty(obj, prop, {\r\n      get() {\r\n        return this.data[this.index * 4 + i]\r\n      },\r\n      set(val) {\r\n        this.data[this.index * 4 + i] = val;\r\n      }\r\n    });\r\n    return obj\r\n  }, {data: null, index: 0});\r\n\r\n\r\n  return {\r\n    process,\r\n    measure,\r\n    loadFont\r\n  }\r\n}\n\n/**\r\n * Index for performing fast spatial searches of a glyph's line segments.\r\n * @return {{addLineSegment:function, findNearestSignedDistance:function}}\r\n */\r\nfunction createGlyphSegmentsIndex() {\r\n  let needsSort = false;\r\n  const segments = [];\r\n\r\n  function sortSegments() {\r\n    if (needsSort) {\r\n      // sort by maxX, this will let us short-circuit some loops below\r\n      segments.sort(function(a, b) {\r\n        return a.maxX - b.maxX\r\n      });\r\n      needsSort = false;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Add a line segment to the index.\r\n   * @param x0\r\n   * @param y0\r\n   * @param x1\r\n   * @param y1\r\n   */\r\n  function addLineSegment(x0, y0, x1, y1) {\r\n    const segment = {\r\n      x0, y0, x1, y1,\r\n      minX: Math.min(x0, x1),\r\n      minY: Math.min(y0, y1),\r\n      maxX: Math.max(x0, x1),\r\n      maxY: Math.max(y0, y1)\r\n    };\r\n    segments.push(segment);\r\n    needsSort = true;\r\n  }\r\n\r\n  /**\r\n   * For a given x/y, search the index for the closest line segment and return\r\n   * its signed distance. Negative = inside, positive = outside, zero = on edge\r\n   * @param x\r\n   * @param y\r\n   * @returns {number}\r\n   */\r\n  function findNearestSignedDistance(x, y) {\r\n    sortSegments();\r\n    let closestDistSq = Infinity;\r\n    let closestDist = Infinity;\r\n\r\n    for (let i = segments.length; i--;) {\r\n      const seg = segments[i];\r\n      if (seg.maxX + closestDist <= x) break //sorting by maxX means no more can be closer, so we can short-circuit\r\n      if (x + closestDist > seg.minX && y - closestDist < seg.maxY && y + closestDist > seg.minY) {\r\n        const distSq = absSquareDistanceToLineSegment(x, y, seg.x0, seg.y0, seg.x1, seg.y1);\r\n        if (distSq < closestDistSq) {\r\n          closestDistSq = distSq;\r\n          closestDist = Math.sqrt(closestDistSq);\r\n        }\r\n      }\r\n    }\r\n\r\n    // Flip to negative distance if inside the poly\r\n    if (isPointInPoly(x, y)) {\r\n      closestDist = -closestDist;\r\n    }\r\n    return closestDist\r\n  }\r\n\r\n  // Determine whether the given point lies inside or outside the glyph. Uses a simple\r\n  // ray casting algorithm using a ray pointing east from the point.\r\n  function isPointInPoly(x, y) {\r\n    sortSegments();\r\n    let inside = false;\r\n    for (let i = segments.length; i--;) {\r\n      const seg = segments[i];\r\n      if (seg.maxX <= x) break //sorting by maxX means no more can cross, so we can short-circuit\r\n      if (seg.minY < y && seg.maxY > y) {\r\n        const intersects = ((seg.y0 > y) !== (seg.y1 > y)) && (x < (seg.x1 - seg.x0) * (y - seg.y0) / (seg.y1 - seg.y0) + seg.x0);\r\n        if (intersects) {\r\n          inside = !inside;\r\n        }\r\n      }\r\n    }\r\n    return inside\r\n  }\r\n\r\n  // Find the absolute distance from a point to a line segment at closest approach\r\n  function absSquareDistanceToLineSegment(x, y, lineX0, lineY0, lineX1, lineY1) {\r\n    const ldx = lineX1 - lineX0;\r\n    const ldy = lineY1 - lineY0;\r\n    const lengthSq = ldx * ldx + ldy * ldy;\r\n    const t = lengthSq ? Math.max(0, Math.min(1, ((x - lineX0) * ldx + (y - lineY0) * ldy) / lengthSq)) : 0;\r\n    const dx = x - (lineX0 + t * ldx);\r\n    const dy = y - (lineY0 + t * ldy);\r\n    return dx * dx + dy * dy\r\n  }\r\n\r\n  return {\r\n    addLineSegment,\r\n    findNearestSignedDistance\r\n  }\r\n}\n\n// Custom bundle of Typr.js (https://github.com/photopea/Typr.js) for use in troika-3d-text. \r\n// Original MIT license applies: https://github.com/photopea/Typr.js/blob/gh-pages/LICENSE\r\n\r\nfunction typrFactory() {\r\n\r\nconst window = self;\r\n\r\n// Begin Typr.js\r\n\r\n\r\nvar Typr = {};\r\n\r\nTypr.parse = function(buff)\r\n{\r\n\tvar bin = Typr._bin;\r\n\tvar data = new Uint8Array(buff);\r\n\t\r\n\tvar tag = bin.readASCII(data, 0, 4);  \r\n\tif(tag==\"ttcf\") {\r\n\t\tvar offset = 4;\r\n\t\tvar majV = bin.readUshort(data, offset);  offset+=2;\r\n\t\tvar minV = bin.readUshort(data, offset);  offset+=2;\r\n\t\tvar numF = bin.readUint  (data, offset);  offset+=4;\r\n\t\tvar fnts = [];\r\n\t\tfor(var i=0; i<numF; i++) {\r\n\t\t\tvar foff = bin.readUint  (data, offset);  offset+=4;\r\n\t\t\tfnts.push(Typr._readFont(data, foff));\r\n\t\t}\r\n\t\treturn fnts;\r\n\t}\r\n\telse return [Typr._readFont(data, 0)];\r\n};\r\n\r\nTypr._readFont = function(data, offset) {\r\n\tvar bin = Typr._bin;\r\n\tvar ooff = offset;\r\n\t\r\n\tvar sfnt_version = bin.readFixed(data, offset);\r\n\toffset += 4;\r\n\tvar numTables = bin.readUshort(data, offset);\r\n\toffset += 2;\r\n\tvar searchRange = bin.readUshort(data, offset);\r\n\toffset += 2;\r\n\tvar entrySelector = bin.readUshort(data, offset);\r\n\toffset += 2;\r\n\tvar rangeShift = bin.readUshort(data, offset);\r\n\toffset += 2;\r\n\t\r\n\tvar tags = [\r\n\t\t\"cmap\",\r\n\t\t\"head\",\r\n\t\t\"hhea\",\r\n\t\t\"maxp\",\r\n\t\t\"hmtx\",\r\n\t\t\"name\",\r\n\t\t\"OS/2\",\r\n\t\t\"post\",\r\n\t\t\r\n\t\t//\"cvt\",\r\n\t\t//\"fpgm\",\r\n\t\t\"loca\",\r\n\t\t\"glyf\",\r\n\t\t\"kern\",\r\n\t\t\r\n\t\t//\"prep\"\r\n\t\t//\"gasp\"\r\n\t\t\r\n\t\t\"CFF \",\r\n\t\t\r\n\t\t\r\n\t\t\"GPOS\",\r\n\t\t\"GSUB\",\r\n\t\t\r\n\t\t\"SVG \"\r\n\t\t//\"VORG\",\r\n\t\t];\r\n\t\r\n\tvar obj = {_data:data, _offset:ooff};\r\n\t//console.log(sfnt_version, numTables, searchRange, entrySelector, rangeShift);\r\n\t\r\n\tvar tabs = {};\r\n\t\r\n\tfor(var i=0; i<numTables; i++)\r\n\t{\r\n\t\tvar tag = bin.readASCII(data, offset, 4);   offset += 4;\r\n\t\tvar checkSum = bin.readUint(data, offset);  offset += 4;\r\n\t\tvar toffset = bin.readUint(data, offset);   offset += 4;\r\n\t\tvar length = bin.readUint(data, offset);    offset += 4;\r\n\t\ttabs[tag] = {offset:toffset, length:length};\r\n\t\t\r\n\t\t//if(tags.indexOf(tag)==-1) console.log(\"unknown tag\", tag, length);\r\n\t}\r\n\t\r\n\tfor(var i=0; i< tags.length; i++)\r\n\t{\r\n\t\tvar t = tags[i];\r\n\t\t//console.log(t);\r\n\t\t//if(tabs[t]) console.log(t, tabs[t].offset, tabs[t].length);\r\n\t\tif(tabs[t]) obj[t.trim()] = Typr[t.trim()].parse(data, tabs[t].offset, tabs[t].length, obj);\r\n\t}\r\n\t\r\n\treturn obj;\r\n};\r\n\r\nTypr._tabOffset = function(data, tab, foff)\r\n{\r\n\tvar bin = Typr._bin;\r\n\tvar numTables = bin.readUshort(data, foff+4);\r\n\tvar offset = foff+12;\r\n\tfor(var i=0; i<numTables; i++)\r\n\t{\r\n\t\tvar tag = bin.readASCII(data, offset, 4);   offset += 4;\r\n\t\tvar checkSum = bin.readUint(data, offset);  offset += 4;\r\n\t\tvar toffset = bin.readUint(data, offset);   offset += 4;\r\n\t\tvar length = bin.readUint(data, offset);    offset += 4;\r\n\t\tif(tag==tab) return toffset;\r\n\t}\r\n\treturn 0;\r\n};\r\n\r\n\r\n\r\n\r\n\r\nTypr._bin = {\r\n\treadFixed : function(data, o)\r\n\t{\r\n\t\treturn ((data[o]<<8) | data[o+1]) +  (((data[o+2]<<8)|data[o+3])/(256*256+4));\r\n\t},\r\n\treadF2dot14 : function(data, o)\r\n\t{\r\n\t\tvar num = Typr._bin.readShort(data, o);\r\n\t\treturn num / 16384;\r\n\t},\r\n\treadInt : function(buff, p)\r\n\t{\r\n\t\t//if(p>=buff.length) throw \"error\";\r\n\t\tvar a = Typr._bin.t.uint8;\r\n\t\ta[0] = buff[p+3];\r\n\t\ta[1] = buff[p+2];\r\n\t\ta[2] = buff[p+1];\r\n\t\ta[3] = buff[p];\r\n\t\treturn Typr._bin.t.int32[0];\r\n\t},\r\n\t\r\n\treadInt8 : function(buff, p)\r\n\t{\r\n\t\t//if(p>=buff.length) throw \"error\";\r\n\t\tvar a = Typr._bin.t.uint8;\r\n\t\ta[0] = buff[p];\r\n\t\treturn Typr._bin.t.int8[0];\r\n\t},\r\n\treadShort : function(buff, p)\r\n\t{\r\n\t\t//if(p>=buff.length) throw \"error\";\r\n\t\tvar a = Typr._bin.t.uint8;\r\n\t\ta[1] = buff[p]; a[0] = buff[p+1];\r\n\t\treturn Typr._bin.t.int16[0];\r\n\t},\r\n\treadUshort : function(buff, p)\r\n\t{\r\n\t\t//if(p>=buff.length) throw \"error\";\r\n\t\treturn (buff[p]<<8) | buff[p+1];\r\n\t},\r\n\treadUshorts : function(buff, p, len)\r\n\t{\r\n\t\tvar arr = [];\r\n\t\tfor(var i=0; i<len; i++) arr.push(Typr._bin.readUshort(buff, p+i*2));\r\n\t\treturn arr;\r\n\t},\r\n\treadUint : function(buff, p)\r\n\t{\r\n\t\t//if(p>=buff.length) throw \"error\";\r\n\t\tvar a = Typr._bin.t.uint8;\r\n\t\ta[3] = buff[p];  a[2] = buff[p+1];  a[1] = buff[p+2];  a[0] = buff[p+3];\r\n\t\treturn Typr._bin.t.uint32[0];\r\n\t},\r\n\treadUint64 : function(buff, p)\r\n\t{\r\n\t\t//if(p>=buff.length) throw \"error\";\r\n\t\treturn (Typr._bin.readUint(buff, p)*(0xffffffff+1)) + Typr._bin.readUint(buff, p+4);\r\n\t},\r\n\treadASCII : function(buff, p, l)\t// l : length in Characters (not Bytes)\r\n\t{\r\n\t\t//if(p>=buff.length) throw \"error\";\r\n\t\tvar s = \"\";\r\n\t\tfor(var i = 0; i < l; i++) s += String.fromCharCode(buff[p+i]);\r\n\t\treturn s;\r\n\t},\r\n\treadUnicode : function(buff, p, l)\r\n\t{\r\n\t\t//if(p>=buff.length) throw \"error\";\r\n\t\tvar s = \"\";\r\n\t\tfor(var i = 0; i < l; i++)\t\r\n\t\t{\r\n\t\t\tvar c = (buff[p++]<<8) | buff[p++];\r\n\t\t\ts += String.fromCharCode(c);\r\n\t\t}\r\n\t\treturn s;\r\n\t},\r\n\t_tdec : window[\"TextDecoder\"] ? new window[\"TextDecoder\"]() : null,\r\n\treadUTF8 : function(buff, p, l) {\r\n\t\tvar tdec = Typr._bin._tdec;\r\n\t\tif(tdec && p==0 && l==buff.length) return tdec[\"decode\"](buff);\r\n\t\treturn Typr._bin.readASCII(buff,p,l);\r\n\t},\r\n\treadBytes : function(buff, p, l)\r\n\t{\r\n\t\t//if(p>=buff.length) throw \"error\";\r\n\t\tvar arr = [];\r\n\t\tfor(var i=0; i<l; i++) arr.push(buff[p+i]);\r\n\t\treturn arr;\r\n\t},\r\n\treadASCIIArray : function(buff, p, l)\t// l : length in Characters (not Bytes)\r\n\t{\r\n\t\t//if(p>=buff.length) throw \"error\";\r\n\t\tvar s = [];\r\n\t\tfor(var i = 0; i < l; i++)\t\r\n\t\t\ts.push(String.fromCharCode(buff[p+i]));\r\n\t\treturn s;\r\n\t}\r\n};\r\n\r\nTypr._bin.t = {\r\n\tbuff: new ArrayBuffer(8),\r\n};\r\nTypr._bin.t.int8   = new Int8Array  (Typr._bin.t.buff);\r\nTypr._bin.t.uint8  = new Uint8Array (Typr._bin.t.buff);\r\nTypr._bin.t.int16  = new Int16Array (Typr._bin.t.buff);\r\nTypr._bin.t.uint16 = new Uint16Array(Typr._bin.t.buff);\r\nTypr._bin.t.int32  = new Int32Array (Typr._bin.t.buff);\r\nTypr._bin.t.uint32 = new Uint32Array(Typr._bin.t.buff);\r\n\r\n\r\n\r\n\r\n\r\n// OpenType Layout Common Table Formats\r\n\r\nTypr._lctf = {};\r\n\r\nTypr._lctf.parse = function(data, offset, length, font, subt)\r\n{\r\n\tvar bin = Typr._bin;\r\n\tvar obj = {};\r\n\tvar offset0 = offset;\r\n\tvar tableVersion = bin.readFixed(data, offset);  offset += 4;\r\n\t\r\n\tvar offScriptList  = bin.readUshort(data, offset);  offset += 2;\r\n\tvar offFeatureList = bin.readUshort(data, offset);  offset += 2;\r\n\tvar offLookupList  = bin.readUshort(data, offset);  offset += 2;\r\n\t\r\n\t\r\n\tobj.scriptList  = Typr._lctf.readScriptList (data, offset0 + offScriptList);\r\n\tobj.featureList = Typr._lctf.readFeatureList(data, offset0 + offFeatureList);\r\n\tobj.lookupList  = Typr._lctf.readLookupList (data, offset0 + offLookupList, subt);\r\n\t\r\n\treturn obj;\r\n};\r\n\r\nTypr._lctf.readLookupList = function(data, offset, subt)\r\n{\r\n\tvar bin = Typr._bin;\r\n\tvar offset0 = offset;\r\n\tvar obj = [];\r\n\tvar count = bin.readUshort(data, offset);  offset+=2;\r\n\tfor(var i=0; i<count; i++) \r\n\t{\r\n\t\tvar noff = bin.readUshort(data, offset);  offset+=2;\r\n\t\tvar lut = Typr._lctf.readLookupTable(data, offset0 + noff, subt);\r\n\t\tobj.push(lut);\r\n\t}\r\n\treturn obj;\r\n};\r\n\r\nTypr._lctf.readLookupTable = function(data, offset, subt)\r\n{\r\n\t//console.log(\"Parsing lookup table\", offset);\r\n\tvar bin = Typr._bin;\r\n\tvar offset0 = offset;\r\n\tvar obj = {tabs:[]};\r\n\t\r\n\tobj.ltype = bin.readUshort(data, offset);  offset+=2;\r\n\tobj.flag  = bin.readUshort(data, offset);  offset+=2;\r\n\tvar cnt   = bin.readUshort(data, offset);  offset+=2;\r\n\t\r\n\tfor(var i=0; i<cnt; i++)\r\n\t{\r\n\t\tvar noff = bin.readUshort(data, offset);  offset+=2;\r\n\t\tvar tab = subt(data, obj.ltype, offset0 + noff);\r\n\t\t//console.log(obj.type, tab);\r\n\t\tobj.tabs.push(tab);\r\n\t}\r\n\treturn obj;\r\n};\r\n\r\nTypr._lctf.numOfOnes = function(n)\r\n{\r\n\tvar num = 0;\r\n\tfor(var i=0; i<32; i++) if(((n>>>i)&1) != 0) num++;\r\n\treturn num;\r\n};\r\n\r\nTypr._lctf.readClassDef = function(data, offset)\r\n{\r\n\tvar bin = Typr._bin;\r\n\tvar obj = [];\r\n\tvar format = bin.readUshort(data, offset);  offset+=2;\r\n\tif(format==1) \r\n\t{\r\n\t\tvar startGlyph  = bin.readUshort(data, offset);  offset+=2;\r\n\t\tvar glyphCount  = bin.readUshort(data, offset);  offset+=2;\r\n\t\tfor(var i=0; i<glyphCount; i++)\r\n\t\t{\r\n\t\t\tobj.push(startGlyph+i);\r\n\t\t\tobj.push(startGlyph+i);\r\n\t\t\tobj.push(bin.readUshort(data, offset));  offset+=2;\r\n\t\t}\r\n\t}\r\n\tif(format==2)\r\n\t{\r\n\t\tvar count = bin.readUshort(data, offset);  offset+=2;\r\n\t\tfor(var i=0; i<count; i++)\r\n\t\t{\r\n\t\t\tobj.push(bin.readUshort(data, offset));  offset+=2;\r\n\t\t\tobj.push(bin.readUshort(data, offset));  offset+=2;\r\n\t\t\tobj.push(bin.readUshort(data, offset));  offset+=2;\r\n\t\t}\r\n\t}\r\n\treturn obj;\r\n};\r\nTypr._lctf.getInterval = function(tab, val)\r\n{\r\n\tfor(var i=0; i<tab.length; i+=3)\r\n\t{\r\n\t\tvar start = tab[i], end = tab[i+1], index = tab[i+2];\r\n\t\tif(start<=val && val<=end) return i;\r\n\t}\r\n\treturn -1;\r\n};\r\n\r\n\r\nTypr._lctf.readCoverage = function(data, offset)\r\n{\r\n\tvar bin = Typr._bin;\r\n\tvar cvg = {};\r\n\tcvg.fmt   = bin.readUshort(data, offset);  offset+=2;\r\n\tvar count = bin.readUshort(data, offset);  offset+=2;\r\n\t//console.log(\"parsing coverage\", offset-4, format, count);\r\n\tif(cvg.fmt==1) cvg.tab = bin.readUshorts(data, offset, count); \r\n\tif(cvg.fmt==2) cvg.tab = bin.readUshorts(data, offset, count*3);\r\n\treturn cvg;\r\n};\r\n\r\nTypr._lctf.coverageIndex = function(cvg, val)\r\n{\r\n\tvar tab = cvg.tab;\r\n\tif(cvg.fmt==1) return tab.indexOf(val);\r\n\tif(cvg.fmt==2) {\r\n\t\tvar ind = Typr._lctf.getInterval(tab, val);\r\n\t\tif(ind!=-1) return tab[ind+2] + (val - tab[ind]);\r\n\t}\r\n\treturn -1;\r\n};\r\n\r\nTypr._lctf.readFeatureList = function(data, offset)\r\n{\r\n\tvar bin = Typr._bin;\r\n\tvar offset0 = offset;\r\n\tvar obj = [];\r\n\t\r\n\tvar count = bin.readUshort(data, offset);  offset+=2;\r\n\t\r\n\tfor(var i=0; i<count; i++)\r\n\t{\r\n\t\tvar tag = bin.readASCII(data, offset, 4);  offset+=4;\r\n\t\tvar noff = bin.readUshort(data, offset);  offset+=2;\r\n\t\tobj.push({tag: tag.trim(), tab:Typr._lctf.readFeatureTable(data, offset0 + noff)});\r\n\t}\r\n\treturn obj;\r\n};\r\n\r\nTypr._lctf.readFeatureTable = function(data, offset)\r\n{\r\n\tvar bin = Typr._bin;\r\n\t\r\n\tvar featureParams = bin.readUshort(data, offset);  offset+=2;\t// = 0\r\n\tvar lookupCount = bin.readUshort(data, offset);  offset+=2;\r\n\t\r\n\tvar indices = [];\r\n\tfor(var i=0; i<lookupCount; i++) indices.push(bin.readUshort(data, offset+2*i));\r\n\treturn indices;\r\n};\r\n\r\n\r\nTypr._lctf.readScriptList = function(data, offset)\r\n{\r\n\tvar bin = Typr._bin;\r\n\tvar offset0 = offset;\r\n\tvar obj = {};\r\n\t\r\n\tvar count = bin.readUshort(data, offset);  offset+=2;\r\n\t\r\n\tfor(var i=0; i<count; i++)\r\n\t{\r\n\t\tvar tag = bin.readASCII(data, offset, 4);  offset+=4;\r\n\t\tvar noff = bin.readUshort(data, offset);  offset+=2;\r\n\t\tobj[tag.trim()] = Typr._lctf.readScriptTable(data, offset0 + noff);\r\n\t}\r\n\treturn obj;\r\n};\r\n\r\nTypr._lctf.readScriptTable = function(data, offset)\r\n{\r\n\tvar bin = Typr._bin;\r\n\tvar offset0 = offset;\r\n\tvar obj = {};\r\n\t\r\n\tvar defLangSysOff = bin.readUshort(data, offset);  offset+=2;\r\n\tobj.default = Typr._lctf.readLangSysTable(data, offset0 + defLangSysOff);\r\n\t\r\n\tvar langSysCount = bin.readUshort(data, offset);  offset+=2;\r\n\t\r\n\tfor(var i=0; i<langSysCount; i++)\r\n\t{\r\n\t\tvar tag = bin.readASCII(data, offset, 4);  offset+=4;\r\n\t\tvar langSysOff = bin.readUshort(data, offset);  offset+=2;\r\n\t\tobj[tag.trim()] = Typr._lctf.readLangSysTable(data, offset0 + langSysOff);\r\n\t}\r\n\treturn obj;\r\n};\r\n\r\nTypr._lctf.readLangSysTable = function(data, offset)\r\n{\r\n\tvar bin = Typr._bin;\r\n\tvar obj = {};\r\n\t\r\n\tvar lookupOrder = bin.readUshort(data, offset);  offset+=2;\r\n\t//if(lookupOrder!=0)  throw \"lookupOrder not 0\";\r\n\tobj.reqFeature = bin.readUshort(data, offset);  offset+=2;\r\n\t//if(obj.reqFeature != 0xffff) throw \"reqFeatureIndex != 0xffff\";\r\n\t\r\n\t//console.log(lookupOrder, obj.reqFeature);\r\n\t\r\n\tvar featureCount = bin.readUshort(data, offset);  offset+=2;\r\n\tobj.features = bin.readUshorts(data, offset, featureCount);\r\n\treturn obj;\r\n};\r\n\r\n\tTypr.CFF = {};\r\n\tTypr.CFF.parse = function(data, offset, length)\r\n\t{\r\n\t\tvar bin = Typr._bin;\r\n\t\t\r\n\t\tdata = new Uint8Array(data.buffer, offset, length);\r\n\t\toffset = 0;\r\n\t\t\r\n\t\t// Header\r\n\t\tvar major = data[offset];  offset++;\r\n\t\tvar minor = data[offset];  offset++;\r\n\t\tvar hdrSize = data[offset];  offset++;\r\n\t\tvar offsize = data[offset];  offset++;\r\n\t\t//console.log(major, minor, hdrSize, offsize);\r\n\t\t\r\n\t\t// Name INDEX\r\n\t\tvar ninds = [];\r\n\t\toffset = Typr.CFF.readIndex(data, offset, ninds);\r\n\t\tvar names = [];\r\n\t\t\r\n\t\tfor(var i=0; i<ninds.length-1; i++) names.push(bin.readASCII(data, offset+ninds[i], ninds[i+1]-ninds[i]));\r\n\t\toffset += ninds[ninds.length-1];\r\n\t\t\r\n\t\t\r\n\t\t// Top DICT INDEX\r\n\t\tvar tdinds = [];\r\n\t\toffset = Typr.CFF.readIndex(data, offset, tdinds);  //console.log(tdinds);\r\n\t\t// Top DICT Data\r\n\t\tvar topDicts = [];\r\n\t\tfor(var i=0; i<tdinds.length-1; i++) topDicts.push( Typr.CFF.readDict(data, offset+tdinds[i], offset+tdinds[i+1]) );\r\n\t\toffset += tdinds[tdinds.length-1];\r\n\t\tvar topdict = topDicts[0];\r\n\t\t//console.log(topdict);\r\n\t\t\r\n\t\t// String INDEX\r\n\t\tvar sinds = [];\r\n\t\toffset = Typr.CFF.readIndex(data, offset, sinds);\r\n\t\t// String Data\r\n\t\tvar strings = [];\r\n\t\tfor(var i=0; i<sinds.length-1; i++) strings.push(bin.readASCII(data, offset+sinds[i], sinds[i+1]-sinds[i]));\r\n\t\toffset += sinds[sinds.length-1];\r\n\t\t\r\n\t\t// Global Subr INDEX  (subroutines)\t\t\r\n\t\tTypr.CFF.readSubrs(data, offset, topdict);\r\n\t\t\r\n\t\t// charstrings\r\n\t\tif(topdict.CharStrings)\r\n\t\t{\r\n\t\t\toffset = topdict.CharStrings;\r\n\t\t\tvar sinds = [];\r\n\t\t\toffset = Typr.CFF.readIndex(data, offset, sinds);\r\n\t\t\t\r\n\t\t\tvar cstr = [];\r\n\t\t\tfor(var i=0; i<sinds.length-1; i++) cstr.push(bin.readBytes(data, offset+sinds[i], sinds[i+1]-sinds[i]));\r\n\t\t\t//offset += sinds[sinds.length-1];\r\n\t\t\ttopdict.CharStrings = cstr;\r\n\t\t\t//console.log(topdict.CharStrings);\r\n\t\t}\r\n\t\t\r\n\t\t// CID font\r\n\t\tif(topdict.ROS) {\r\n\t\t\toffset = topdict.FDArray;\r\n\t\t\tvar fdind = [];\r\n\t\t\toffset = Typr.CFF.readIndex(data, offset, fdind);\r\n\t\t\t\r\n\t\t\ttopdict.FDArray = [];\r\n\t\t\tfor(var i=0; i<fdind.length-1; i++) {\r\n\t\t\t\tvar dict = Typr.CFF.readDict(data, offset+fdind[i], offset+fdind[i+1]);\r\n\t\t\t\tTypr.CFF._readFDict(data, dict, strings);\r\n\t\t\t\ttopdict.FDArray.push( dict );\r\n\t\t\t}\r\n\t\t\toffset += fdind[fdind.length-1];\r\n\t\t\t\r\n\t\t\toffset = topdict.FDSelect;\r\n\t\t\ttopdict.FDSelect = [];\r\n\t\t\tvar fmt = data[offset];  offset++;\r\n\t\t\tif(fmt==3) {\r\n\t\t\t\tvar rns = bin.readUshort(data, offset);  offset+=2;\r\n\t\t\t\tfor(var i=0; i<rns+1; i++) {\r\n\t\t\t\t\ttopdict.FDSelect.push(bin.readUshort(data, offset), data[offset+2]);  offset+=3;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse throw fmt;\r\n\t\t}\r\n\t\t\r\n\t\t// Encoding\r\n\t\tif(topdict.Encoding) topdict.Encoding = Typr.CFF.readEncoding(data, topdict.Encoding, topdict.CharStrings.length);\r\n\t\t\r\n\t\t// charset\r\n\t\tif(topdict.charset ) topdict.charset  = Typr.CFF.readCharset (data, topdict.charset , topdict.CharStrings.length);\r\n\t\t\r\n\t\tTypr.CFF._readFDict(data, topdict, strings);\r\n\t\treturn topdict;\r\n\t};\r\n\tTypr.CFF._readFDict = function(data, dict, ss) {\r\n\t\tvar offset;\r\n\t\tif(dict.Private) {\r\n\t\t\toffset = dict.Private[1];\r\n\t\t\tdict.Private = Typr.CFF.readDict(data, offset, offset+dict.Private[0]);\r\n\t\t\tif(dict.Private.Subrs)  Typr.CFF.readSubrs(data, offset+dict.Private.Subrs, dict.Private);\r\n\t\t}\r\n\t\tfor(var p in dict) if([\"FamilyName\",\"FontName\",\"FullName\",\"Notice\",\"version\",\"Copyright\"].indexOf(p)!=-1)  dict[p]=ss[dict[p] -426 + 35];\r\n\t};\r\n\t\r\n\tTypr.CFF.readSubrs = function(data, offset, obj)\r\n\t{\r\n\t\tvar bin = Typr._bin;\r\n\t\tvar gsubinds = [];\r\n\t\toffset = Typr.CFF.readIndex(data, offset, gsubinds);\r\n\t\t\r\n\t\tvar bias, nSubrs = gsubinds.length;\r\n\t\tif (nSubrs <  1240) bias = 107;\r\n\t\telse if (nSubrs < 33900) bias = 1131;\r\n\t\telse bias = 32768;\r\n\t\tobj.Bias = bias;\r\n\t\t\r\n\t\tobj.Subrs = [];\r\n\t\tfor(var i=0; i<gsubinds.length-1; i++) obj.Subrs.push(bin.readBytes(data, offset+gsubinds[i], gsubinds[i+1]-gsubinds[i]));\r\n\t\t//offset += gsubinds[gsubinds.length-1];\r\n\t};\r\n\t\r\n\tTypr.CFF.tableSE = [\r\n      0,   0,   0,   0,   0,   0,   0,   0,\r\n      0,   0,   0,   0,   0,   0,   0,   0,\r\n      0,   0,   0,   0,   0,   0,   0,   0,\r\n      0,   0,   0,   0,   0,   0,   0,   0,\r\n      1,   2,   3,   4,   5,   6,   7,   8,\r\n      9,  10,  11,  12,  13,  14,  15,  16,\r\n     17,  18,  19,  20,  21,  22,  23,  24,\r\n     25,  26,  27,  28,  29,  30,  31,  32,\r\n     33,  34,  35,  36,  37,  38,  39,  40,\r\n     41,  42,  43,  44,  45,  46,  47,  48,\r\n     49,  50,  51,  52,  53,  54,  55,  56,\r\n     57,  58,  59,  60,  61,  62,  63,  64,\r\n     65,  66,  67,  68,  69,  70,  71,  72,\r\n     73,  74,  75,  76,  77,  78,  79,  80,\r\n     81,  82,  83,  84,  85,  86,  87,  88,\r\n     89,  90,  91,  92,  93,  94,  95,   0,\r\n      0,   0,   0,   0,   0,   0,   0,   0,\r\n      0,   0,   0,   0,   0,   0,   0,   0,\r\n      0,   0,   0,   0,   0,   0,   0,   0,\r\n      0,   0,   0,   0,   0,   0,   0,   0,\r\n      0,  96,  97,  98,  99, 100, 101, 102,\r\n    103, 104, 105, 106, 107, 108, 109, 110,\r\n      0, 111, 112, 113, 114,   0, 115, 116,\r\n    117, 118, 119, 120, 121, 122,   0, 123,\r\n      0, 124, 125, 126, 127, 128, 129, 130,\r\n    131,   0, 132, 133,   0, 134, 135, 136,\r\n    137,   0,   0,   0,   0,   0,   0,   0,\r\n      0,   0,   0,   0,   0,   0,   0,   0,\r\n      0, 138,   0, 139,   0,   0,   0,   0,\r\n    140, 141, 142, 143,   0,   0,   0,   0,\r\n      0, 144,   0,   0,   0, 145,   0,   0,\r\n    146, 147, 148, 149,   0,   0,   0,   0\r\n  ];\r\n  \r\n\tTypr.CFF.glyphByUnicode = function(cff, code)\r\n\t{\r\n\t\tfor(var i=0; i<cff.charset.length; i++) if(cff.charset[i]==code) return i;\r\n\t\treturn -1;\r\n\t};\r\n\t\r\n\tTypr.CFF.glyphBySE = function(cff, charcode)\t// glyph by standard encoding\r\n\t{\r\n\t\tif ( charcode < 0 || charcode > 255 ) return -1;\r\n\t\treturn Typr.CFF.glyphByUnicode(cff, Typr.CFF.tableSE[charcode]);\t\t\r\n\t};\r\n\t\r\n\tTypr.CFF.readEncoding = function(data, offset, num)\r\n\t{\r\n\t\tvar bin = Typr._bin;\r\n\t\t\r\n\t\tvar array = ['.notdef'];\r\n\t\tvar format = data[offset];  offset++;\r\n\t\t//console.log(\"Encoding\");\r\n\t\t//console.log(format);\r\n\t\t\r\n\t\tif(format==0)\r\n\t\t{\r\n\t\t\tvar nCodes = data[offset];  offset++;\r\n\t\t\tfor(var i=0; i<nCodes; i++)  array.push(data[offset+i]);\r\n\t\t}\r\n\t\t/*\r\n\t\telse if(format==1 || format==2)\r\n\t\t{\r\n\t\t\twhile(charset.length<num)\r\n\t\t\t{\r\n\t\t\t\tvar first = bin.readUshort(data, offset);  offset+=2;\r\n\t\t\t\tvar nLeft=0;\r\n\t\t\t\tif(format==1) {  nLeft = data[offset];  offset++;  }\r\n\t\t\t\telse          {  nLeft = bin.readUshort(data, offset);  offset+=2;  }\r\n\t\t\t\tfor(var i=0; i<=nLeft; i++)  {  charset.push(first);  first++;  }\r\n\t\t\t}\r\n\t\t}\r\n\t\t*/\r\n\t\telse throw \"error: unknown encoding format: \" + format;\r\n\t\t\r\n\t\treturn array;\r\n\t};\r\n\r\n\tTypr.CFF.readCharset = function(data, offset, num)\r\n\t{\r\n\t\tvar bin = Typr._bin;\r\n\t\t\r\n\t\tvar charset = ['.notdef'];\r\n\t\tvar format = data[offset];  offset++;\r\n\t\t\r\n\t\tif(format==0)\r\n\t\t{\r\n\t\t\tfor(var i=0; i<num; i++) \r\n\t\t\t{\r\n\t\t\t\tvar first = bin.readUshort(data, offset);  offset+=2;\r\n\t\t\t\tcharset.push(first);\r\n\t\t\t}\r\n\t\t}\r\n\t\telse if(format==1 || format==2)\r\n\t\t{\r\n\t\t\twhile(charset.length<num)\r\n\t\t\t{\r\n\t\t\t\tvar first = bin.readUshort(data, offset);  offset+=2;\r\n\t\t\t\tvar nLeft=0;\r\n\t\t\t\tif(format==1) {  nLeft = data[offset];  offset++;  }\r\n\t\t\t\telse          {  nLeft = bin.readUshort(data, offset);  offset+=2;  }\r\n\t\t\t\tfor(var i=0; i<=nLeft; i++)  {  charset.push(first);  first++;  }\r\n\t\t\t}\r\n\t\t}\r\n\t\telse throw \"error: format: \" + format;\r\n\t\t\r\n\t\treturn charset;\r\n\t};\r\n\r\n\tTypr.CFF.readIndex = function(data, offset, inds)\r\n\t{\r\n\t\tvar bin = Typr._bin;\r\n\t\t\r\n\t\tvar count = bin.readUshort(data, offset)+1;  offset+=2;\r\n\t\tvar offsize = data[offset];  offset++;\r\n\t\t\r\n\t\tif     (offsize==1) for(var i=0; i<count; i++) inds.push( data[offset+i] );\r\n\t\telse if(offsize==2) for(var i=0; i<count; i++) inds.push( bin.readUshort(data, offset+i*2) );\r\n\t\telse if(offsize==3) for(var i=0; i<count; i++) inds.push( bin.readUint  (data, offset+i*3 - 1) & 0x00ffffff );\r\n\t\telse if(count!=1) throw \"unsupported offset size: \" + offsize + \", count: \" + count;\r\n\t\t\r\n\t\toffset += count*offsize;\r\n\t\treturn offset-1;\r\n\t};\r\n\t\r\n\tTypr.CFF.getCharString = function(data, offset, o)\r\n\t{\r\n\t\tvar bin = Typr._bin;\r\n\t\t\r\n\t\tvar b0 = data[offset], b1 = data[offset+1], b2 = data[offset+2], b3 = data[offset+3], b4=data[offset+4];\r\n\t\tvar vs = 1;\r\n\t\tvar op=null, val=null;\r\n\t\t// operand\r\n\t\tif(b0<=20) { op = b0;  vs=1;  }\r\n\t\tif(b0==12) { op = b0*100+b1;  vs=2;  }\r\n\t\t//if(b0==19 || b0==20) { op = b0/*+\" \"+b1*/;  vs=2; }\r\n\t\tif(21 <=b0 && b0<= 27) { op = b0;  vs=1; }\r\n\t\tif(b0==28) { val = bin.readShort(data,offset+1);  vs=3; }\r\n\t\tif(29 <=b0 && b0<= 31) { op = b0;  vs=1; }\r\n\t\tif(32 <=b0 && b0<=246) { val = b0-139;  vs=1; }\r\n\t\tif(247<=b0 && b0<=250) { val = (b0-247)*256+b1+108;  vs=2; }\r\n\t\tif(251<=b0 && b0<=254) { val =-(b0-251)*256-b1-108;  vs=2; }\r\n\t\tif(b0==255) {  val = bin.readInt(data, offset+1)/0xffff;  vs=5;   }\r\n\t\t\r\n\t\to.val = val!=null ? val : \"o\"+op;\r\n\t\to.size = vs;\r\n\t};\r\n\t\r\n\tTypr.CFF.readCharString = function(data, offset, length)\r\n\t{\r\n\t\tvar end = offset + length;\r\n\t\tvar bin = Typr._bin;\r\n\t\tvar arr = [];\r\n\t\t\r\n\t\twhile(offset<end)\r\n\t\t{\r\n\t\t\tvar b0 = data[offset], b1 = data[offset+1], b2 = data[offset+2], b3 = data[offset+3], b4=data[offset+4];\r\n\t\t\tvar vs = 1;\r\n\t\t\tvar op=null, val=null;\r\n\t\t\t// operand\r\n\t\t\tif(b0<=20) { op = b0;  vs=1;  }\r\n\t\t\tif(b0==12) { op = b0*100+b1;  vs=2;  }\r\n\t\t\tif(b0==19 || b0==20) { op = b0/*+\" \"+b1*/;  vs=2; }\r\n\t\t\tif(21 <=b0 && b0<= 27) { op = b0;  vs=1; }\r\n\t\t\tif(b0==28) { val = bin.readShort(data,offset+1);  vs=3; }\r\n\t\t\tif(29 <=b0 && b0<= 31) { op = b0;  vs=1; }\r\n\t\t\tif(32 <=b0 && b0<=246) { val = b0-139;  vs=1; }\r\n\t\t\tif(247<=b0 && b0<=250) { val = (b0-247)*256+b1+108;  vs=2; }\r\n\t\t\tif(251<=b0 && b0<=254) { val =-(b0-251)*256-b1-108;  vs=2; }\r\n\t\t\tif(b0==255) {  val = bin.readInt(data, offset+1)/0xffff;  vs=5;   }\r\n\t\t\t\r\n\t\t\tarr.push(val!=null ? val : \"o\"+op);\r\n\t\t\toffset += vs;\t\r\n\r\n\t\t\t//var cv = arr[arr.length-1];\r\n\t\t\t//if(cv==undefined) throw \"error\";\r\n\t\t\t//console.log()\r\n\t\t}\t\r\n\t\treturn arr;\r\n\t};\r\n\r\n\tTypr.CFF.readDict = function(data, offset, end)\r\n\t{\r\n\t\tvar bin = Typr._bin;\r\n\t\t//var dict = [];\r\n\t\tvar dict = {};\r\n\t\tvar carr = [];\r\n\t\t\r\n\t\twhile(offset<end)\r\n\t\t{\r\n\t\t\tvar b0 = data[offset], b1 = data[offset+1], b2 = data[offset+2], b3 = data[offset+3], b4=data[offset+4];\r\n\t\t\tvar vs = 1;\r\n\t\t\tvar key=null, val=null;\r\n\t\t\t// operand\r\n\t\t\tif(b0==28) { val = bin.readShort(data,offset+1);  vs=3; }\r\n\t\t\tif(b0==29) { val = bin.readInt  (data,offset+1);  vs=5; }\r\n\t\t\tif(32 <=b0 && b0<=246) { val = b0-139;  vs=1; }\r\n\t\t\tif(247<=b0 && b0<=250) { val = (b0-247)*256+b1+108;  vs=2; }\r\n\t\t\tif(251<=b0 && b0<=254) { val =-(b0-251)*256-b1-108;  vs=2; }\r\n\t\t\tif(b0==255) {  val = bin.readInt(data, offset+1)/0xffff;  vs=5;  throw \"unknown number\";  }\r\n\t\t\t\r\n\t\t\tif(b0==30) \r\n\t\t\t{  \r\n\t\t\t\tvar nibs = [];\r\n\t\t\t\tvs = 1;\r\n\t\t\t\twhile(true)\r\n\t\t\t\t{\r\n\t\t\t\t\tvar b = data[offset+vs];  vs++;\r\n\t\t\t\t\tvar nib0 = b>>4, nib1 = b&0xf;\r\n\t\t\t\t\tif(nib0 != 0xf) nibs.push(nib0);  if(nib1!=0xf) nibs.push(nib1);\r\n\t\t\t\t\tif(nib1==0xf) break;\r\n\t\t\t\t}\r\n\t\t\t\tvar s = \"\";\r\n\t\t\t\tvar chars = [0,1,2,3,4,5,6,7,8,9,\".\",\"e\",\"e-\",\"reserved\",\"-\",\"endOfNumber\"];\r\n\t\t\t\tfor(var i=0; i<nibs.length; i++) s += chars[nibs[i]];\r\n\t\t\t\t//console.log(nibs);\r\n\t\t\t\tval = parseFloat(s);\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tif(b0<=21)\t// operator\r\n\t\t\t{\r\n\t\t\t\tvar keys = [\"version\", \"Notice\", \"FullName\", \"FamilyName\", \"Weight\", \"FontBBox\", \"BlueValues\", \"OtherBlues\", \"FamilyBlues\",\"FamilyOtherBlues\",\r\n\t\t\t\t\t\"StdHW\", \"StdVW\", \"escape\", \"UniqueID\", \"XUID\", \"charset\", \"Encoding\", \"CharStrings\", \"Private\", \"Subrs\", \r\n\t\t\t\t\t\"defaultWidthX\", \"nominalWidthX\"];\r\n\t\t\t\t\t\r\n\t\t\t\tkey = keys[b0];  vs=1;\r\n\t\t\t\tif(b0==12) { \r\n\t\t\t\t\tvar keys = [ \"Copyright\", \"isFixedPitch\", \"ItalicAngle\", \"UnderlinePosition\", \"UnderlineThickness\", \"PaintType\", \"CharstringType\", \"FontMatrix\", \"StrokeWidth\", \"BlueScale\",\r\n\t\t\t\t\t\"BlueShift\", \"BlueFuzz\", \"StemSnapH\", \"StemSnapV\", \"ForceBold\", 0,0, \"LanguageGroup\", \"ExpansionFactor\", \"initialRandomSeed\",\r\n\t\t\t\t\t\"SyntheticBase\", \"PostScript\", \"BaseFontName\", \"BaseFontBlend\", 0,0,0,0,0,0, \r\n\t\t\t\t\t\"ROS\", \"CIDFontVersion\", \"CIDFontRevision\", \"CIDFontType\", \"CIDCount\", \"UIDBase\", \"FDArray\", \"FDSelect\", \"FontName\"];\r\n\t\t\t\t\tkey = keys[b1];  vs=2; \r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tif(key!=null) {  dict[key] = carr.length==1 ? carr[0] : carr;  carr=[]; }\r\n\t\t\telse  carr.push(val);  \r\n\t\t\t\r\n\t\t\toffset += vs;\t\t\r\n\t\t}\t\r\n\t\treturn dict;\r\n\t};\r\n\r\n\r\nTypr.cmap = {};\r\nTypr.cmap.parse = function(data, offset, length)\r\n{\r\n\tdata = new Uint8Array(data.buffer, offset, length);\r\n\toffset = 0;\r\n\tvar bin = Typr._bin;\r\n\tvar obj = {};\r\n\tvar version   = bin.readUshort(data, offset);  offset += 2;\r\n\tvar numTables = bin.readUshort(data, offset);  offset += 2;\r\n\t\r\n\t//console.log(version, numTables);\r\n\t\r\n\tvar offs = [];\r\n\tobj.tables = [];\r\n\t\r\n\t\r\n\tfor(var i=0; i<numTables; i++)\r\n\t{\r\n\t\tvar platformID = bin.readUshort(data, offset);  offset += 2;\r\n\t\tvar encodingID = bin.readUshort(data, offset);  offset += 2;\r\n\t\tvar noffset = bin.readUint(data, offset);       offset += 4;\r\n\t\t\r\n\t\tvar id = \"p\"+platformID+\"e\"+encodingID;\r\n\t\t\r\n\t\t//console.log(\"cmap subtable\", platformID, encodingID, noffset);\r\n\t\t\r\n\t\t\r\n\t\tvar tind = offs.indexOf(noffset);\r\n\t\t\r\n\t\tif(tind==-1)\r\n\t\t{\r\n\t\t\ttind = obj.tables.length;\r\n\t\t\tvar subt;\r\n\t\t\toffs.push(noffset);\r\n\t\t\tvar format = bin.readUshort(data, noffset);\r\n\t\t\tif     (format== 0) subt = Typr.cmap.parse0(data, noffset);\r\n\t\t\telse if(format== 4) subt = Typr.cmap.parse4(data, noffset);\r\n\t\t\telse if(format== 6) subt = Typr.cmap.parse6(data, noffset);\r\n\t\t\telse if(format==12) subt = Typr.cmap.parse12(data,noffset);\r\n\t\t\telse console.log(\"unknown format: \"+format, platformID, encodingID, noffset);\r\n\t\t\tobj.tables.push(subt);\r\n\t\t}\r\n\t\t\r\n\t\tif(obj[id]!=null) throw \"multiple tables for one platform+encoding\";\r\n\t\tobj[id] = tind;\r\n\t}\r\n\treturn obj;\r\n};\r\n\r\nTypr.cmap.parse0 = function(data, offset)\r\n{\r\n\tvar bin = Typr._bin;\r\n\tvar obj = {};\r\n\tobj.format = bin.readUshort(data, offset);  offset += 2;\r\n\tvar len    = bin.readUshort(data, offset);  offset += 2;\r\n\tvar lang   = bin.readUshort(data, offset);  offset += 2;\r\n\tobj.map = [];\r\n\tfor(var i=0; i<len-6; i++) obj.map.push(data[offset+i]);\r\n\treturn obj;\r\n};\r\n\r\nTypr.cmap.parse4 = function(data, offset)\r\n{\r\n\tvar bin = Typr._bin;\r\n\tvar offset0 = offset;\r\n\tvar obj = {};\r\n\t\r\n\tobj.format = bin.readUshort(data, offset);  offset+=2;\r\n\tvar length = bin.readUshort(data, offset);  offset+=2;\r\n\tvar language = bin.readUshort(data, offset);  offset+=2;\r\n\tvar segCountX2 = bin.readUshort(data, offset);  offset+=2;\r\n\tvar segCount = segCountX2/2;\r\n\tobj.searchRange = bin.readUshort(data, offset);  offset+=2;\r\n\tobj.entrySelector = bin.readUshort(data, offset);  offset+=2;\r\n\tobj.rangeShift = bin.readUshort(data, offset);  offset+=2;\r\n\tobj.endCount   = bin.readUshorts(data, offset, segCount);  offset += segCount*2;\r\n\toffset+=2;\r\n\tobj.startCount = bin.readUshorts(data, offset, segCount);  offset += segCount*2;\r\n\tobj.idDelta = [];\r\n\tfor(var i=0; i<segCount; i++) {obj.idDelta.push(bin.readShort(data, offset));  offset+=2;}\r\n\tobj.idRangeOffset = bin.readUshorts(data, offset, segCount);  offset += segCount*2;\r\n\tobj.glyphIdArray = [];\r\n\twhile(offset< offset0+length) {obj.glyphIdArray.push(bin.readUshort(data, offset));  offset+=2;}\r\n\treturn obj;\r\n};\r\n\r\nTypr.cmap.parse6 = function(data, offset)\r\n{\r\n\tvar bin = Typr._bin;\r\n\tvar obj = {};\r\n\t\r\n\tobj.format = bin.readUshort(data, offset);  offset+=2;\r\n\tvar length = bin.readUshort(data, offset);  offset+=2;\r\n\tvar language = bin.readUshort(data, offset);  offset+=2;\r\n\tobj.firstCode = bin.readUshort(data, offset);  offset+=2;\r\n\tvar entryCount = bin.readUshort(data, offset);  offset+=2;\r\n\tobj.glyphIdArray = [];\r\n\tfor(var i=0; i<entryCount; i++) {obj.glyphIdArray.push(bin.readUshort(data, offset));  offset+=2;}\r\n\t\r\n\treturn obj;\r\n};\r\n\r\nTypr.cmap.parse12 = function(data, offset)\r\n{\r\n\tvar bin = Typr._bin;\r\n\tvar obj = {};\r\n\t\r\n\tobj.format = bin.readUshort(data, offset);  offset+=2;\r\n\toffset += 2;\r\n\tvar length = bin.readUint(data, offset);  offset+=4;\r\n\tvar lang   = bin.readUint(data, offset);  offset+=4;\r\n\tvar nGroups= bin.readUint(data, offset);  offset+=4;\r\n\tobj.groups = [];\r\n\t\r\n\tfor(var i=0; i<nGroups; i++)  \r\n\t{\r\n\t\tvar off = offset + i * 12;\r\n\t\tvar startCharCode = bin.readUint(data, off+0);\r\n\t\tvar endCharCode   = bin.readUint(data, off+4);\r\n\t\tvar startGlyphID  = bin.readUint(data, off+8);\r\n\t\tobj.groups.push([  startCharCode, endCharCode, startGlyphID  ]);\r\n\t}\r\n\treturn obj;\r\n};\r\n\r\nTypr.glyf = {};\r\nTypr.glyf.parse = function(data, offset, length, font)\r\n{\r\n\tvar obj = [];\r\n\tfor(var g=0; g<font.maxp.numGlyphs; g++) obj.push(null);\r\n\treturn obj;\r\n};\r\n\r\nTypr.glyf._parseGlyf = function(font, g)\r\n{\r\n\tvar bin = Typr._bin;\r\n\tvar data = font._data;\r\n\t\r\n\tvar offset = Typr._tabOffset(data, \"glyf\", font._offset) + font.loca[g];\r\n\t\t\r\n\tif(font.loca[g]==font.loca[g+1]) return null;\r\n\t\t\r\n\tvar gl = {};\r\n\t\t\r\n\tgl.noc  = bin.readShort(data, offset);  offset+=2;\t\t// number of contours\r\n\tgl.xMin = bin.readShort(data, offset);  offset+=2;\r\n\tgl.yMin = bin.readShort(data, offset);  offset+=2;\r\n\tgl.xMax = bin.readShort(data, offset);  offset+=2;\r\n\tgl.yMax = bin.readShort(data, offset);  offset+=2;\r\n\t\r\n\tif(gl.xMin>=gl.xMax || gl.yMin>=gl.yMax) return null;\r\n\t\t\r\n\tif(gl.noc>0)\r\n\t{\r\n\t\tgl.endPts = [];\r\n\t\tfor(var i=0; i<gl.noc; i++) { gl.endPts.push(bin.readUshort(data,offset)); offset+=2; }\r\n\t\t\r\n\t\tvar instructionLength = bin.readUshort(data,offset); offset+=2;\r\n\t\tif((data.length-offset)<instructionLength) return null;\r\n\t\tgl.instructions = bin.readBytes(data, offset, instructionLength);   offset+=instructionLength;\r\n\t\t\r\n\t\tvar crdnum = gl.endPts[gl.noc-1]+1;\r\n\t\tgl.flags = [];\r\n\t\tfor(var i=0; i<crdnum; i++ ) \r\n\t\t{ \r\n\t\t\tvar flag = data[offset];  offset++; \r\n\t\t\tgl.flags.push(flag); \r\n\t\t\tif((flag&8)!=0)\r\n\t\t\t{\r\n\t\t\t\tvar rep = data[offset];  offset++;\r\n\t\t\t\tfor(var j=0; j<rep; j++) { gl.flags.push(flag); i++; }\r\n\t\t\t}\r\n\t\t}\r\n\t\tgl.xs = [];\r\n\t\tfor(var i=0; i<crdnum; i++) {\r\n\t\t\tvar i8=((gl.flags[i]&2)!=0), same=((gl.flags[i]&16)!=0);  \r\n\t\t\tif(i8) { gl.xs.push(same ? data[offset] : -data[offset]);  offset++; }\r\n\t\t\telse\r\n\t\t\t{\r\n\t\t\t\tif(same) gl.xs.push(0);\r\n\t\t\t\telse { gl.xs.push(bin.readShort(data, offset));  offset+=2; }\r\n\t\t\t}\r\n\t\t}\r\n\t\tgl.ys = [];\r\n\t\tfor(var i=0; i<crdnum; i++) {\r\n\t\t\tvar i8=((gl.flags[i]&4)!=0), same=((gl.flags[i]&32)!=0);  \r\n\t\t\tif(i8) { gl.ys.push(same ? data[offset] : -data[offset]);  offset++; }\r\n\t\t\telse\r\n\t\t\t{\r\n\t\t\t\tif(same) gl.ys.push(0);\r\n\t\t\t\telse { gl.ys.push(bin.readShort(data, offset));  offset+=2; }\r\n\t\t\t}\r\n\t\t}\r\n\t\tvar x = 0, y = 0;\r\n\t\tfor(var i=0; i<crdnum; i++) { x += gl.xs[i]; y += gl.ys[i];  gl.xs[i]=x;  gl.ys[i]=y; }\r\n\t\t//console.log(endPtsOfContours, instructionLength, instructions, flags, xCoordinates, yCoordinates);\r\n\t}\r\n\telse\r\n\t{\r\n\t\tvar ARG_1_AND_2_ARE_WORDS\t= 1<<0;\r\n\t\tvar ARGS_ARE_XY_VALUES\t\t= 1<<1;\r\n\t\tvar WE_HAVE_A_SCALE\t\t\t= 1<<3;\r\n\t\tvar MORE_COMPONENTS\t\t\t= 1<<5;\r\n\t\tvar WE_HAVE_AN_X_AND_Y_SCALE= 1<<6;\r\n\t\tvar WE_HAVE_A_TWO_BY_TWO\t= 1<<7;\r\n\t\tvar WE_HAVE_INSTRUCTIONS\t= 1<<8;\r\n\t\t\r\n\t\tgl.parts = [];\r\n\t\tvar flags;\r\n\t\tdo {\r\n\t\t\tflags = bin.readUshort(data, offset);  offset += 2;\r\n\t\t\tvar part = { m:{a:1,b:0,c:0,d:1,tx:0,ty:0}, p1:-1, p2:-1 };  gl.parts.push(part);\r\n\t\t\tpart.glyphIndex = bin.readUshort(data, offset);  offset += 2;\r\n\t\t\tif ( flags & ARG_1_AND_2_ARE_WORDS) {\r\n\t\t\t\tvar arg1 = bin.readShort(data, offset);  offset += 2;\r\n\t\t\t\tvar arg2 = bin.readShort(data, offset);  offset += 2;\r\n\t\t\t} else {\r\n\t\t\t\tvar arg1 = bin.readInt8(data, offset);  offset ++;\r\n\t\t\t\tvar arg2 = bin.readInt8(data, offset);  offset ++;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tif(flags & ARGS_ARE_XY_VALUES) { part.m.tx = arg1;  part.m.ty = arg2; }\r\n\t\t\telse  {  part.p1=arg1;  part.p2=arg2;  }\r\n\t\t\t//part.m.tx = arg1;  part.m.ty = arg2;\r\n\t\t\t//else { throw \"params are not XY values\"; }\r\n\t\t\t\r\n\t\t\tif ( flags & WE_HAVE_A_SCALE ) {\r\n\t\t\t\tpart.m.a = part.m.d = bin.readF2dot14(data, offset);  offset += 2;    \r\n\t\t\t} else if ( flags & WE_HAVE_AN_X_AND_Y_SCALE ) {\r\n\t\t\t\tpart.m.a = bin.readF2dot14(data, offset);  offset += 2; \r\n\t\t\t\tpart.m.d = bin.readF2dot14(data, offset);  offset += 2; \r\n\t\t\t} else if ( flags & WE_HAVE_A_TWO_BY_TWO ) {\r\n\t\t\t\tpart.m.a = bin.readF2dot14(data, offset);  offset += 2; \r\n\t\t\t\tpart.m.b = bin.readF2dot14(data, offset);  offset += 2; \r\n\t\t\t\tpart.m.c = bin.readF2dot14(data, offset);  offset += 2; \r\n\t\t\t\tpart.m.d = bin.readF2dot14(data, offset);  offset += 2; \r\n\t\t\t}\r\n\t\t} while ( flags & MORE_COMPONENTS ) \r\n\t\tif (flags & WE_HAVE_INSTRUCTIONS){\r\n\t\t\tvar numInstr = bin.readUshort(data, offset);  offset += 2;\r\n\t\t\tgl.instr = [];\r\n\t\t\tfor(var i=0; i<numInstr; i++) { gl.instr.push(data[offset]);  offset++; }\r\n\t\t}\r\n\t}\r\n\treturn gl;\r\n};\r\n\r\n\r\nTypr.GPOS = {};\r\nTypr.GPOS.parse = function(data, offset, length, font) {  return Typr._lctf.parse(data, offset, length, font, Typr.GPOS.subt);  };\r\n\r\n\r\nTypr.GPOS.subt = function(data, ltype, offset)\t// lookup type\r\n{\r\n\tvar bin = Typr._bin, offset0 = offset, tab = {};\r\n\t\r\n\ttab.fmt  = bin.readUshort(data, offset);  offset+=2;\r\n\t\r\n\t//console.log(ltype, tab.fmt);\r\n\t\r\n\tif(ltype==1 || ltype==2 || ltype==3 || ltype==7 || (ltype==8 && tab.fmt<=2)) {\r\n\t\tvar covOff  = bin.readUshort(data, offset);  offset+=2;\r\n\t\ttab.coverage = Typr._lctf.readCoverage(data, covOff+offset0);\r\n\t}\r\n\tif(ltype==1 && tab.fmt==1) {\r\n\t\tvar valFmt1 = bin.readUshort(data, offset);  offset+=2;\r\n\t\tvar ones1 = Typr._lctf.numOfOnes(valFmt1);\r\n\t\tif(valFmt1!=0)  tab.pos = Typr.GPOS.readValueRecord(data, offset, valFmt1);\r\n\t}\r\n\telse if(ltype==2) {\r\n\t\tvar valFmt1 = bin.readUshort(data, offset);  offset+=2;\r\n\t\tvar valFmt2 = bin.readUshort(data, offset);  offset+=2;\r\n\t\tvar ones1 = Typr._lctf.numOfOnes(valFmt1);\r\n\t\tvar ones2 = Typr._lctf.numOfOnes(valFmt2);\r\n\t\tif(tab.fmt==1)\r\n\t\t{\r\n\t\t\ttab.pairsets = [];\r\n\t\t\tvar psc = bin.readUshort(data, offset);  offset+=2;  // PairSetCount\r\n\t\t\t\r\n\t\t\tfor(var i=0; i<psc; i++)\r\n\t\t\t{\r\n\t\t\t\tvar psoff = offset0 + bin.readUshort(data, offset);  offset+=2;\r\n\t\t\t\t\r\n\t\t\t\tvar pvc = bin.readUshort(data, psoff);  psoff+=2;\r\n\t\t\t\tvar arr = [];\r\n\t\t\t\tfor(var j=0; j<pvc; j++)\r\n\t\t\t\t{\r\n\t\t\t\t\tvar gid2 = bin.readUshort(data, psoff);  psoff+=2;\r\n\t\t\t\t\tvar value1, value2;\r\n\t\t\t\t\tif(valFmt1!=0) {  value1 = Typr.GPOS.readValueRecord(data, psoff, valFmt1);  psoff+=ones1*2;  }\r\n\t\t\t\t\tif(valFmt2!=0) {  value2 = Typr.GPOS.readValueRecord(data, psoff, valFmt2);  psoff+=ones2*2;  }\r\n\t\t\t\t\t//if(value1!=null) throw \"e\";\r\n\t\t\t\t\tarr.push({gid2:gid2, val1:value1, val2:value2});\r\n\t\t\t\t}\r\n\t\t\t\ttab.pairsets.push(arr);\r\n\t\t\t}\r\n\t\t}\r\n\t\tif(tab.fmt==2)\r\n\t\t{\r\n\t\t\tvar classDef1 = bin.readUshort(data, offset);  offset+=2;\r\n\t\t\tvar classDef2 = bin.readUshort(data, offset);  offset+=2;\r\n\t\t\tvar class1Count = bin.readUshort(data, offset);  offset+=2;\r\n\t\t\tvar class2Count = bin.readUshort(data, offset);  offset+=2;\r\n\t\t\t\r\n\t\t\ttab.classDef1 = Typr._lctf.readClassDef(data, offset0 + classDef1);\r\n\t\t\ttab.classDef2 = Typr._lctf.readClassDef(data, offset0 + classDef2);\r\n\t\t\t\r\n\t\t\ttab.matrix = [];\r\n\t\t\tfor(var i=0; i<class1Count; i++)\r\n\t\t\t{\r\n\t\t\t\tvar row = [];\r\n\t\t\t\tfor(var j=0; j<class2Count; j++)\r\n\t\t\t\t{\r\n\t\t\t\t\tvar value1 = null, value2 = null;\r\n\t\t\t\t\tif(tab.valFmt1!=0) { value1 = Typr.GPOS.readValueRecord(data, offset, tab.valFmt1);  offset+=ones1*2; }\r\n\t\t\t\t\tif(tab.valFmt2!=0) { value2 = Typr.GPOS.readValueRecord(data, offset, tab.valFmt2);  offset+=ones2*2; }\r\n\t\t\t\t\trow.push({val1:value1, val2:value2});\r\n\t\t\t\t}\r\n\t\t\t\ttab.matrix.push(row);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\telse ;\r\n\treturn tab;\r\n};\r\n\r\n\r\nTypr.GPOS.readValueRecord = function(data, offset, valFmt)\r\n{\r\n\tvar bin = Typr._bin;\r\n\tvar arr = [];\r\n\tarr.push( (valFmt&1) ? bin.readShort(data, offset) : 0 );  offset += (valFmt&1) ? 2 : 0;  // X_PLACEMENT\r\n\tarr.push( (valFmt&2) ? bin.readShort(data, offset) : 0 );  offset += (valFmt&2) ? 2 : 0;  // Y_PLACEMENT\r\n\tarr.push( (valFmt&4) ? bin.readShort(data, offset) : 0 );  offset += (valFmt&4) ? 2 : 0;  // X_ADVANCE\r\n\tarr.push( (valFmt&8) ? bin.readShort(data, offset) : 0 );  offset += (valFmt&8) ? 2 : 0;  // Y_ADVANCE\r\n\treturn arr;\r\n};\r\n\r\nTypr.GSUB = {};\r\nTypr.GSUB.parse = function(data, offset, length, font) {  return Typr._lctf.parse(data, offset, length, font, Typr.GSUB.subt);  };\r\n\r\n\r\nTypr.GSUB.subt = function(data, ltype, offset)\t// lookup type\r\n{\r\n\tvar bin = Typr._bin, offset0 = offset, tab = {};\r\n\t\r\n\ttab.fmt  = bin.readUshort(data, offset);  offset+=2;\r\n\t\r\n\tif(ltype!=1 && ltype!=4 && ltype!=5 && ltype!=6) return null;\r\n\t\r\n\tif(ltype==1 || ltype==4 || (ltype==5 && tab.fmt<=2) || (ltype==6 && tab.fmt<=2)) {\r\n\t\tvar covOff  = bin.readUshort(data, offset);  offset+=2;\r\n\t\ttab.coverage = Typr._lctf.readCoverage(data, offset0+covOff);\t// not always is coverage here\r\n\t}\r\n\t\r\n\tif(ltype==1) {\t\r\n\t\tif(tab.fmt==1) {\r\n\t\t\ttab.delta = bin.readShort(data, offset);  offset+=2;\r\n\t\t}\r\n\t\telse if(tab.fmt==2) {\r\n\t\t\tvar cnt = bin.readUshort(data, offset);  offset+=2;\r\n\t\t\ttab.newg = bin.readUshorts(data, offset, cnt);  offset+=tab.newg.length*2;\r\n\t\t}\r\n\t}\r\n\t//  Ligature Substitution Subtable\r\n\telse if(ltype==4) {\r\n\t\ttab.vals = [];\r\n\t\tvar cnt = bin.readUshort(data, offset);  offset+=2;\r\n\t\tfor(var i=0; i<cnt; i++) {\r\n\t\t\tvar loff = bin.readUshort(data, offset);  offset+=2;\r\n\t\t\ttab.vals.push(Typr.GSUB.readLigatureSet(data, offset0+loff));\r\n\t\t}\r\n\t\t//console.log(tab.coverage);\r\n\t\t//console.log(tab.vals);\r\n\t} \r\n\t//  Contextual Substitution Subtable\r\n\telse if(ltype==5) {\r\n\t\tif(tab.fmt==2) {\r\n\t\t\tvar cDefOffset = bin.readUshort(data, offset);  offset+=2;\r\n\t\t\ttab.cDef = Typr._lctf.readClassDef(data, offset0 + cDefOffset);\r\n\t\t\ttab.scset = [];\r\n\t\t\tvar subClassSetCount = bin.readUshort(data, offset);  offset+=2;\r\n\t\t\tfor(var i=0; i<subClassSetCount; i++)\r\n\t\t\t{\r\n\t\t\t\tvar scsOff = bin.readUshort(data, offset);  offset+=2;\r\n\t\t\t\ttab.scset.push(  scsOff==0 ? null : Typr.GSUB.readSubClassSet(data, offset0 + scsOff)  );\r\n\t\t\t}\r\n\t\t}\r\n\t\t//else console.log(\"unknown table format\", tab.fmt);\r\n\t}\r\n\t//*\r\n\telse if(ltype==6) {\r\n\t\t/*\r\n\t\tif(tab.fmt==2) {\r\n\t\t\tvar btDef = bin.readUshort(data, offset);  offset+=2;\r\n\t\t\tvar inDef = bin.readUshort(data, offset);  offset+=2;\r\n\t\t\tvar laDef = bin.readUshort(data, offset);  offset+=2;\r\n\t\t\t\r\n\t\t\ttab.btDef = Typr._lctf.readClassDef(data, offset0 + btDef);\r\n\t\t\ttab.inDef = Typr._lctf.readClassDef(data, offset0 + inDef);\r\n\t\t\ttab.laDef = Typr._lctf.readClassDef(data, offset0 + laDef);\r\n\t\t\t\r\n\t\t\ttab.scset = [];\r\n\t\t\tvar cnt = bin.readUshort(data, offset);  offset+=2;\r\n\t\t\tfor(var i=0; i<cnt; i++) {\r\n\t\t\t\tvar loff = bin.readUshort(data, offset);  offset+=2;\r\n\t\t\t\ttab.scset.push(Typr.GSUB.readChainSubClassSet(data, offset0+loff));\r\n\t\t\t}\r\n\t\t}\r\n\t\t*/\r\n\t\tif(tab.fmt==3) {\r\n\t\t\tfor(var i=0; i<3; i++) {\r\n\t\t\t\tvar cnt = bin.readUshort(data, offset);  offset+=2;\r\n\t\t\t\tvar cvgs = [];\r\n\t\t\t\tfor(var j=0; j<cnt; j++) cvgs.push(  Typr._lctf.readCoverage(data, offset0 + bin.readUshort(data, offset+j*2))   );\r\n\t\t\t\toffset+=cnt*2;\r\n\t\t\t\tif(i==0) tab.backCvg = cvgs;\r\n\t\t\t\tif(i==1) tab.inptCvg = cvgs;\r\n\t\t\t\tif(i==2) tab.ahedCvg = cvgs;\r\n\t\t\t}\r\n\t\t\tvar cnt = bin.readUshort(data, offset);  offset+=2;\r\n\t\t\ttab.lookupRec = Typr.GSUB.readSubstLookupRecords(data, offset, cnt);\r\n\t\t}\r\n\t\t//console.log(tab);\r\n\t} //*/\r\n\t//if(tab.coverage.indexOf(3)!=-1) console.log(ltype, fmt, tab);\r\n\t\r\n\treturn tab;\r\n};\r\n\r\nTypr.GSUB.readSubClassSet = function(data, offset)\r\n{\r\n\tvar rUs = Typr._bin.readUshort, offset0 = offset, lset = [];\r\n\tvar cnt = rUs(data, offset);  offset+=2;\r\n\tfor(var i=0; i<cnt; i++) {\r\n\t\tvar loff = rUs(data, offset);  offset+=2;\r\n\t\tlset.push(Typr.GSUB.readSubClassRule(data, offset0+loff));\r\n\t}\r\n\treturn lset;\r\n};\r\nTypr.GSUB.readSubClassRule= function(data, offset)\r\n{\r\n\tvar rUs = Typr._bin.readUshort, rule = {};\r\n\tvar gcount = rUs(data, offset);  offset+=2;\r\n\tvar scount = rUs(data, offset);  offset+=2;\r\n\trule.input = [];\r\n\tfor(var i=0; i<gcount-1; i++) {\r\n\t\trule.input.push(rUs(data, offset));  offset+=2;\r\n\t}\r\n\trule.substLookupRecords = Typr.GSUB.readSubstLookupRecords(data, offset, scount);\r\n\treturn rule;\r\n};\r\nTypr.GSUB.readSubstLookupRecords = function(data, offset, cnt)\r\n{\r\n\tvar rUs = Typr._bin.readUshort;\r\n\tvar out = [];\r\n\tfor(var i=0; i<cnt; i++) {  out.push(rUs(data, offset), rUs(data, offset+2));  offset+=4;  }\r\n\treturn out;\r\n};\r\n\r\nTypr.GSUB.readChainSubClassSet = function(data, offset)\r\n{\r\n\tvar bin = Typr._bin, offset0 = offset, lset = [];\r\n\tvar cnt = bin.readUshort(data, offset);  offset+=2;\r\n\tfor(var i=0; i<cnt; i++) {\r\n\t\tvar loff = bin.readUshort(data, offset);  offset+=2;\r\n\t\tlset.push(Typr.GSUB.readChainSubClassRule(data, offset0+loff));\r\n\t}\r\n\treturn lset;\r\n};\r\nTypr.GSUB.readChainSubClassRule= function(data, offset)\r\n{\r\n\tvar bin = Typr._bin, rule = {};\r\n\tvar pps = [\"backtrack\", \"input\", \"lookahead\"];\r\n\tfor(var pi=0; pi<pps.length; pi++) {\r\n\t\tvar cnt = bin.readUshort(data, offset);  offset+=2;  if(pi==1) cnt--;\r\n\t\trule[pps[pi]]=bin.readUshorts(data, offset, cnt);  offset+= rule[pps[pi]].length*2;\r\n\t}\r\n\tvar cnt = bin.readUshort(data, offset);  offset+=2;\r\n\trule.subst = bin.readUshorts(data, offset, cnt*2);  offset += rule.subst.length*2;\r\n\treturn rule;\r\n};\r\n\r\nTypr.GSUB.readLigatureSet = function(data, offset)\r\n{\r\n\tvar bin = Typr._bin, offset0 = offset, lset = [];\r\n\tvar lcnt = bin.readUshort(data, offset);  offset+=2;\r\n\tfor(var j=0; j<lcnt; j++) {\r\n\t\tvar loff = bin.readUshort(data, offset);  offset+=2;\r\n\t\tlset.push(Typr.GSUB.readLigature(data, offset0+loff));\r\n\t}\r\n\treturn lset;\r\n};\r\nTypr.GSUB.readLigature = function(data, offset)\r\n{\r\n\tvar bin = Typr._bin, lig = {chain:[]};\r\n\tlig.nglyph = bin.readUshort(data, offset);  offset+=2;\r\n\tvar ccnt = bin.readUshort(data, offset);  offset+=2;\r\n\tfor(var k=0; k<ccnt-1; k++) {  lig.chain.push(bin.readUshort(data, offset));  offset+=2;  }\r\n\treturn lig;\r\n};\r\n\r\n\r\n\r\nTypr.head = {};\r\nTypr.head.parse = function(data, offset, length)\r\n{\r\n\tvar bin = Typr._bin;\r\n\tvar obj = {};\r\n\tvar tableVersion = bin.readFixed(data, offset);  offset += 4;\r\n\tobj.fontRevision = bin.readFixed(data, offset);  offset += 4;\r\n\tvar checkSumAdjustment = bin.readUint(data, offset);  offset += 4;\r\n\tvar magicNumber = bin.readUint(data, offset);  offset += 4;\r\n\tobj.flags = bin.readUshort(data, offset);  offset += 2;\r\n\tobj.unitsPerEm = bin.readUshort(data, offset);  offset += 2;\r\n\tobj.created  = bin.readUint64(data, offset);  offset += 8;\r\n\tobj.modified = bin.readUint64(data, offset);  offset += 8;\r\n\tobj.xMin = bin.readShort(data, offset);  offset += 2;\r\n\tobj.yMin = bin.readShort(data, offset);  offset += 2;\r\n\tobj.xMax = bin.readShort(data, offset);  offset += 2;\r\n\tobj.yMax = bin.readShort(data, offset);  offset += 2;\r\n\tobj.macStyle = bin.readUshort(data, offset);  offset += 2;\r\n\tobj.lowestRecPPEM = bin.readUshort(data, offset);  offset += 2;\r\n\tobj.fontDirectionHint = bin.readShort(data, offset);  offset += 2;\r\n\tobj.indexToLocFormat  = bin.readShort(data, offset);  offset += 2;\r\n\tobj.glyphDataFormat   = bin.readShort(data, offset);  offset += 2;\r\n\treturn obj;\r\n};\r\n\r\n\r\nTypr.hhea = {};\r\nTypr.hhea.parse = function(data, offset, length)\r\n{\r\n\tvar bin = Typr._bin;\r\n\tvar obj = {};\r\n\tvar tableVersion = bin.readFixed(data, offset);  offset += 4;\r\n\tobj.ascender  = bin.readShort(data, offset);  offset += 2;\r\n\tobj.descender = bin.readShort(data, offset);  offset += 2;\r\n\tobj.lineGap = bin.readShort(data, offset);  offset += 2;\r\n\t\r\n\tobj.advanceWidthMax = bin.readUshort(data, offset);  offset += 2;\r\n\tobj.minLeftSideBearing  = bin.readShort(data, offset);  offset += 2;\r\n\tobj.minRightSideBearing = bin.readShort(data, offset);  offset += 2;\r\n\tobj.xMaxExtent = bin.readShort(data, offset);  offset += 2;\r\n\t\r\n\tobj.caretSlopeRise = bin.readShort(data, offset);  offset += 2;\r\n\tobj.caretSlopeRun  = bin.readShort(data, offset);  offset += 2;\r\n\tobj.caretOffset    = bin.readShort(data, offset);  offset += 2;\r\n\t\r\n\toffset += 4*2;\r\n\t\r\n\tobj.metricDataFormat = bin.readShort (data, offset);  offset += 2;\r\n\tobj.numberOfHMetrics = bin.readUshort(data, offset);  offset += 2;\r\n\treturn obj;\r\n};\r\n\r\n\r\nTypr.hmtx = {};\r\nTypr.hmtx.parse = function(data, offset, length, font)\r\n{\r\n\tvar bin = Typr._bin;\r\n\tvar obj = {};\r\n\t\r\n\tobj.aWidth = [];\r\n\tobj.lsBearing = [];\r\n\t\r\n\t\r\n\tvar aw = 0, lsb = 0;\r\n\t\r\n\tfor(var i=0; i<font.maxp.numGlyphs; i++)\r\n\t{\r\n\t\tif(i<font.hhea.numberOfHMetrics) {  aw=bin.readUshort(data, offset);  offset += 2;  lsb=bin.readShort(data, offset);  offset+=2;  }\r\n\t\tobj.aWidth.push(aw);\r\n\t\tobj.lsBearing.push(lsb);\r\n\t}\r\n\t\r\n\treturn obj;\r\n};\r\n\r\n\r\nTypr.kern = {};\r\nTypr.kern.parse = function(data, offset, length, font)\r\n{\r\n\tvar bin = Typr._bin;\r\n\t\r\n\tvar version = bin.readUshort(data, offset);  offset+=2;\r\n\tif(version==1) return Typr.kern.parseV1(data, offset-2, length, font);\r\n\tvar nTables = bin.readUshort(data, offset);  offset+=2;\r\n\t\r\n\tvar map = {glyph1: [], rval:[]};\r\n\tfor(var i=0; i<nTables; i++)\r\n\t{\r\n\t\toffset+=2;\t// skip version\r\n\t\tvar length  = bin.readUshort(data, offset);  offset+=2;\r\n\t\tvar coverage = bin.readUshort(data, offset);  offset+=2;\r\n\t\tvar format = coverage>>>8;\r\n\t\t/* I have seen format 128 once, that's why I do */ format &= 0xf;\r\n\t\tif(format==0) offset = Typr.kern.readFormat0(data, offset, map);\r\n\t\telse throw \"unknown kern table format: \"+format;\r\n\t}\r\n\treturn map;\r\n};\r\n\r\nTypr.kern.parseV1 = function(data, offset, length, font)\r\n{\r\n\tvar bin = Typr._bin;\r\n\t\r\n\tvar version = bin.readFixed(data, offset);  offset+=4;\r\n\tvar nTables = bin.readUint(data, offset);  offset+=4;\r\n\t\r\n\tvar map = {glyph1: [], rval:[]};\r\n\tfor(var i=0; i<nTables; i++)\r\n\t{\r\n\t\tvar length = bin.readUint(data, offset);   offset+=4;\r\n\t\tvar coverage = bin.readUshort(data, offset);  offset+=2;\r\n\t\tvar tupleIndex = bin.readUshort(data, offset);  offset+=2;\r\n\t\tvar format = coverage>>>8;\r\n\t\t/* I have seen format 128 once, that's why I do */ format &= 0xf;\r\n\t\tif(format==0) offset = Typr.kern.readFormat0(data, offset, map);\r\n\t\telse throw \"unknown kern table format: \"+format;\r\n\t}\r\n\treturn map;\r\n};\r\n\r\nTypr.kern.readFormat0 = function(data, offset, map)\r\n{\r\n\tvar bin = Typr._bin;\r\n\tvar pleft = -1;\r\n\tvar nPairs        = bin.readUshort(data, offset);  offset+=2;\r\n\tvar searchRange   = bin.readUshort(data, offset);  offset+=2;\r\n\tvar entrySelector = bin.readUshort(data, offset);  offset+=2;\r\n\tvar rangeShift    = bin.readUshort(data, offset);  offset+=2;\r\n\tfor(var j=0; j<nPairs; j++)\r\n\t{\r\n\t\tvar left  = bin.readUshort(data, offset);  offset+=2;\r\n\t\tvar right = bin.readUshort(data, offset);  offset+=2;\r\n\t\tvar value = bin.readShort (data, offset);  offset+=2;\r\n\t\tif(left!=pleft) { map.glyph1.push(left);  map.rval.push({ glyph2:[], vals:[] }); }\r\n\t\tvar rval = map.rval[map.rval.length-1];\r\n\t\trval.glyph2.push(right);   rval.vals.push(value);\r\n\t\tpleft = left;\r\n\t}\r\n\treturn offset;\r\n};\r\n\r\n\r\n\r\nTypr.loca = {};\r\nTypr.loca.parse = function(data, offset, length, font)\r\n{\r\n\tvar bin = Typr._bin;\r\n\tvar obj = [];\r\n\t\r\n\tvar ver = font.head.indexToLocFormat;\r\n\t//console.log(\"loca\", ver, length, 4*font.maxp.numGlyphs);\r\n\tvar len = font.maxp.numGlyphs+1;\r\n\t\r\n\tif(ver==0) for(var i=0; i<len; i++) obj.push(bin.readUshort(data, offset+(i<<1))<<1);\r\n\tif(ver==1) for(var i=0; i<len; i++) obj.push(bin.readUint  (data, offset+(i<<2))   );\r\n\t\r\n\treturn obj;\r\n};\r\n\r\n\r\nTypr.maxp = {};\r\nTypr.maxp.parse = function(data, offset, length)\r\n{\r\n\t//console.log(data.length, offset, length);\r\n\t\r\n\tvar bin = Typr._bin;\r\n\tvar obj = {};\r\n\t\r\n\t// both versions 0.5 and 1.0\r\n\tvar ver = bin.readUint(data, offset); offset += 4;\r\n\tobj.numGlyphs = bin.readUshort(data, offset);  offset += 2;\r\n\t\r\n\t// only 1.0\r\n\tif(ver == 0x00010000)\r\n\t{\r\n\t\tobj.maxPoints             = bin.readUshort(data, offset);  offset += 2;\r\n\t\tobj.maxContours           = bin.readUshort(data, offset);  offset += 2;\r\n\t\tobj.maxCompositePoints    = bin.readUshort(data, offset);  offset += 2;\r\n\t\tobj.maxCompositeContours  = bin.readUshort(data, offset);  offset += 2;\r\n\t\tobj.maxZones              = bin.readUshort(data, offset);  offset += 2;\r\n\t\tobj.maxTwilightPoints     = bin.readUshort(data, offset);  offset += 2;\r\n\t\tobj.maxStorage            = bin.readUshort(data, offset);  offset += 2;\r\n\t\tobj.maxFunctionDefs       = bin.readUshort(data, offset);  offset += 2;\r\n\t\tobj.maxInstructionDefs    = bin.readUshort(data, offset);  offset += 2;\r\n\t\tobj.maxStackElements      = bin.readUshort(data, offset);  offset += 2;\r\n\t\tobj.maxSizeOfInstructions = bin.readUshort(data, offset);  offset += 2;\r\n\t\tobj.maxComponentElements  = bin.readUshort(data, offset);  offset += 2;\r\n\t\tobj.maxComponentDepth     = bin.readUshort(data, offset);  offset += 2;\r\n\t}\r\n\t\r\n\treturn obj;\r\n};\r\n\r\n\r\nTypr.name = {};\r\nTypr.name.parse = function(data, offset, length)\r\n{\r\n\tvar bin = Typr._bin;\r\n\tvar obj = {};\r\n\tvar format = bin.readUshort(data, offset);  offset += 2;\r\n\tvar count  = bin.readUshort(data, offset);  offset += 2;\r\n\tvar stringOffset = bin.readUshort(data, offset);  offset += 2;\r\n\t\r\n\t//console.log(format,count);\r\n\t\r\n\tvar names = [\r\n\t\t\"copyright\",\r\n\t\t\"fontFamily\",\r\n\t\t\"fontSubfamily\",\r\n\t\t\"ID\",\r\n\t\t\"fullName\",\r\n\t\t\"version\",\r\n\t\t\"postScriptName\",\r\n\t\t\"trademark\",\r\n\t\t\"manufacturer\",\r\n\t\t\"designer\",\r\n\t\t\"description\",\r\n\t\t\"urlVendor\",\r\n\t\t\"urlDesigner\",\r\n\t\t\"licence\",\r\n\t\t\"licenceURL\",\r\n\t\t\"---\",\r\n\t\t\"typoFamilyName\",\r\n\t\t\"typoSubfamilyName\",\r\n\t\t\"compatibleFull\",\r\n\t\t\"sampleText\",\r\n\t\t\"postScriptCID\",\r\n\t\t\"wwsFamilyName\",\r\n\t\t\"wwsSubfamilyName\",\r\n\t\t\"lightPalette\",\r\n\t\t\"darkPalette\"\r\n\t];\r\n\t\r\n\tvar offset0 = offset;\r\n\t\r\n\tfor(var i=0; i<count; i++)\r\n\t{\r\n\t\tvar platformID = bin.readUshort(data, offset);  offset += 2;\r\n\t\tvar encodingID = bin.readUshort(data, offset);  offset += 2;\r\n\t\tvar languageID = bin.readUshort(data, offset);  offset += 2;\r\n\t\tvar nameID     = bin.readUshort(data, offset);  offset += 2;\r\n\t\tvar slen       = bin.readUshort(data, offset);  offset += 2;\r\n\t\tvar noffset    = bin.readUshort(data, offset);  offset += 2;\r\n\t\t//console.log(platformID, encodingID, languageID.toString(16), nameID, length, noffset);\r\n\t\t\r\n\t\tvar cname = names[nameID];\r\n\t\tvar soff = offset0 + count*12 + noffset;\r\n\t\tvar str;\r\n\t\tif(platformID == 0) str = bin.readUnicode(data, soff, slen/2);\r\n\t\telse if(platformID == 3 && encodingID == 0) str = bin.readUnicode(data, soff, slen/2);\r\n\t\telse if(encodingID == 0) str = bin.readASCII  (data, soff, slen);\r\n\t\telse if(encodingID == 1) str = bin.readUnicode(data, soff, slen/2);\r\n\t\telse if(encodingID == 3) str = bin.readUnicode(data, soff, slen/2);\r\n\t\t\r\n\t\telse if(platformID == 1) { str = bin.readASCII(data, soff, slen);  console.log(\"reading unknown MAC encoding \"+encodingID+\" as ASCII\"); }\r\n\t\telse throw \"unknown encoding \"+encodingID + \", platformID: \"+platformID;\r\n\t\t\r\n\t\tvar tid = \"p\"+platformID+\",\"+(languageID).toString(16);//Typr._platforms[platformID];\r\n\t\tif(obj[tid]==null) obj[tid] = {};\r\n\t\tobj[tid][cname] = str;\r\n\t\tobj[tid]._lang = languageID;\r\n\t\t//console.log(tid, obj[tid]);\r\n\t}\r\n\t/*\r\n\tif(format == 1)\r\n\t{\r\n\t\tvar langTagCount = bin.readUshort(data, offset);  offset += 2;\r\n\t\tfor(var i=0; i<langTagCount; i++)\r\n\t\t{\r\n\t\t\tvar length  = bin.readUshort(data, offset);  offset += 2;\r\n\t\t\tvar noffset = bin.readUshort(data, offset);  offset += 2;\r\n\t\t}\r\n\t}\r\n\t*/\r\n\t\r\n\t//console.log(obj);\r\n\t\r\n\tfor(var p in obj) if(obj[p].postScriptName!=null && obj[p]._lang==0x0409) return obj[p];\t\t// United States\r\n\tfor(var p in obj) if(obj[p].postScriptName!=null && obj[p]._lang==0x0000) return obj[p];\t\t// Universal\r\n\tfor(var p in obj) if(obj[p].postScriptName!=null && obj[p]._lang==0x0c0c) return obj[p];\t\t// Canada\r\n\tfor(var p in obj) if(obj[p].postScriptName!=null) return obj[p];\r\n\t\r\n\tvar tname;\r\n\tfor(var p in obj) { tname=p; break; }\r\n\tconsole.log(\"returning name table with languageID \"+ obj[tname]._lang);\r\n\treturn obj[tname];\r\n};\r\n\r\n\r\nTypr[\"OS/2\"] = {};\r\nTypr[\"OS/2\"].parse = function(data, offset, length)\r\n{\r\n\tvar bin = Typr._bin;\r\n\tvar ver = bin.readUshort(data, offset); offset += 2;\r\n\t\r\n\tvar obj = {};\r\n\tif     (ver==0) Typr[\"OS/2\"].version0(data, offset, obj);\r\n\telse if(ver==1) Typr[\"OS/2\"].version1(data, offset, obj);\r\n\telse if(ver==2 || ver==3 || ver==4) Typr[\"OS/2\"].version2(data, offset, obj);\r\n\telse if(ver==5) Typr[\"OS/2\"].version5(data, offset, obj);\r\n\telse throw \"unknown OS/2 table version: \"+ver;\r\n\t\r\n\treturn obj;\r\n};\r\n\r\nTypr[\"OS/2\"].version0 = function(data, offset, obj)\r\n{\r\n\tvar bin = Typr._bin;\r\n\tobj.xAvgCharWidth = bin.readShort(data, offset); offset += 2;\r\n\tobj.usWeightClass = bin.readUshort(data, offset); offset += 2;\r\n\tobj.usWidthClass  = bin.readUshort(data, offset); offset += 2;\r\n\tobj.fsType = bin.readUshort(data, offset); offset += 2;\r\n\tobj.ySubscriptXSize = bin.readShort(data, offset); offset += 2;\r\n\tobj.ySubscriptYSize = bin.readShort(data, offset); offset += 2;\r\n\tobj.ySubscriptXOffset = bin.readShort(data, offset); offset += 2;\r\n\tobj.ySubscriptYOffset = bin.readShort(data, offset); offset += 2; \r\n\tobj.ySuperscriptXSize = bin.readShort(data, offset); offset += 2; \r\n\tobj.ySuperscriptYSize = bin.readShort(data, offset); offset += 2; \r\n\tobj.ySuperscriptXOffset = bin.readShort(data, offset); offset += 2;\r\n\tobj.ySuperscriptYOffset = bin.readShort(data, offset); offset += 2;\r\n\tobj.yStrikeoutSize = bin.readShort(data, offset); offset += 2;\r\n\tobj.yStrikeoutPosition = bin.readShort(data, offset); offset += 2;\r\n\tobj.sFamilyClass = bin.readShort(data, offset); offset += 2;\r\n\tobj.panose = bin.readBytes(data, offset, 10);  offset += 10;\r\n\tobj.ulUnicodeRange1\t= bin.readUint(data, offset);  offset += 4;\r\n\tobj.ulUnicodeRange2\t= bin.readUint(data, offset);  offset += 4;\r\n\tobj.ulUnicodeRange3\t= bin.readUint(data, offset);  offset += 4;\r\n\tobj.ulUnicodeRange4\t= bin.readUint(data, offset);  offset += 4;\r\n\tobj.achVendID = [bin.readInt8(data, offset), bin.readInt8(data, offset+1),bin.readInt8(data, offset+2),bin.readInt8(data, offset+3)];  offset += 4;\r\n\tobj.fsSelection\t = bin.readUshort(data, offset); offset += 2;\r\n\tobj.usFirstCharIndex = bin.readUshort(data, offset); offset += 2;\r\n\tobj.usLastCharIndex = bin.readUshort(data, offset); offset += 2;\r\n\tobj.sTypoAscender = bin.readShort(data, offset); offset += 2;\r\n\tobj.sTypoDescender = bin.readShort(data, offset); offset += 2;\r\n\tobj.sTypoLineGap = bin.readShort(data, offset); offset += 2;\r\n\tobj.usWinAscent = bin.readUshort(data, offset); offset += 2;\r\n\tobj.usWinDescent = bin.readUshort(data, offset); offset += 2;\r\n\treturn offset;\r\n};\r\n\r\nTypr[\"OS/2\"].version1 = function(data, offset, obj)\r\n{\r\n\tvar bin = Typr._bin;\r\n\toffset = Typr[\"OS/2\"].version0(data, offset, obj);\r\n\t\r\n\tobj.ulCodePageRange1 = bin.readUint(data, offset); offset += 4;\r\n\tobj.ulCodePageRange2 = bin.readUint(data, offset); offset += 4;\r\n\treturn offset;\r\n};\r\n\r\nTypr[\"OS/2\"].version2 = function(data, offset, obj)\r\n{\r\n\tvar bin = Typr._bin;\r\n\toffset = Typr[\"OS/2\"].version1(data, offset, obj);\r\n\t\r\n\tobj.sxHeight = bin.readShort(data, offset); offset += 2;\r\n\tobj.sCapHeight = bin.readShort(data, offset); offset += 2;\r\n\tobj.usDefault = bin.readUshort(data, offset); offset += 2;\r\n\tobj.usBreak = bin.readUshort(data, offset); offset += 2;\r\n\tobj.usMaxContext = bin.readUshort(data, offset); offset += 2;\r\n\treturn offset;\r\n};\r\n\r\nTypr[\"OS/2\"].version5 = function(data, offset, obj)\r\n{\r\n\tvar bin = Typr._bin;\r\n\toffset = Typr[\"OS/2\"].version2(data, offset, obj);\r\n\r\n\tobj.usLowerOpticalPointSize = bin.readUshort(data, offset); offset += 2;\r\n\tobj.usUpperOpticalPointSize = bin.readUshort(data, offset); offset += 2;\r\n\treturn offset;\r\n};\r\n\r\nTypr.post = {};\r\nTypr.post.parse = function(data, offset, length)\r\n{\r\n\tvar bin = Typr._bin;\r\n\tvar obj = {};\r\n\t\r\n\tobj.version           = bin.readFixed(data, offset);  offset+=4;\r\n\tobj.italicAngle       = bin.readFixed(data, offset);  offset+=4;\r\n\tobj.underlinePosition = bin.readShort(data, offset);  offset+=2;\r\n\tobj.underlineThickness = bin.readShort(data, offset);  offset+=2;\r\n\r\n\treturn obj;\r\n};\r\nTypr.SVG = {};\r\nTypr.SVG.parse = function(data, offset, length)\r\n{\r\n\tvar bin = Typr._bin;\r\n\tvar obj = { entries: []};\r\n\r\n\tvar offset0 = offset;\r\n\r\n\tvar tableVersion = bin.readUshort(data, offset);\toffset += 2;\r\n\tvar svgDocIndexOffset = bin.readUint(data, offset);\toffset += 4;\r\n\tvar reserved = bin.readUint(data, offset); offset += 4;\r\n\r\n\toffset = svgDocIndexOffset + offset0;\r\n\r\n\tvar numEntries = bin.readUshort(data, offset);\toffset += 2;\r\n\r\n\tfor(var i=0; i<numEntries; i++)\r\n\t{\r\n\t\tvar startGlyphID = bin.readUshort(data, offset);  offset += 2;\r\n\t\tvar endGlyphID   = bin.readUshort(data, offset);  offset += 2;\r\n\t\tvar svgDocOffset = bin.readUint  (data, offset);  offset += 4;\r\n\t\tvar svgDocLength = bin.readUint  (data, offset);  offset += 4;\r\n\r\n\t\tvar sbuf = new Uint8Array(data.buffer, offset0 + svgDocOffset + svgDocIndexOffset, svgDocLength);\r\n\t\tvar svg = bin.readUTF8(sbuf, 0, sbuf.length);\r\n\t\t\r\n\t\tfor(var f=startGlyphID; f<=endGlyphID; f++) {\r\n\t\t\tobj.entries[f] = svg;\r\n\t\t}\r\n\t}\r\n\treturn obj;\r\n};\r\n\r\nTypr.SVG.toPath = function(str)\r\n{\r\n\tvar pth = {cmds:[], crds:[]};\r\n\tif(str==null) return pth;\r\n\t\r\n\tvar prsr = new DOMParser();\r\n\tvar doc = prsr[\"parseFromString\"](str,\"image/svg+xml\");\r\n\t\r\n\tvar svg = doc.firstChild;  while(svg.tagName!=\"svg\") svg = svg.nextSibling;\r\n\tvar vb = svg.getAttribute(\"viewBox\");\r\n\tif(vb) vb = vb.trim().split(\" \").map(parseFloat);  else   vb = [0,0,1000,1000];\r\n\tTypr.SVG._toPath(svg.children, pth);\r\n\tfor(var i=0; i<pth.crds.length; i+=2) {\r\n\t\tvar x = pth.crds[i], y = pth.crds[i+1];\r\n\t\tx -= vb[0];\r\n\t\ty -= vb[1];\r\n\t\ty = -y;\r\n\t\tpth.crds[i] = x;\r\n\t\tpth.crds[i+1] = y;\r\n\t}\r\n\treturn pth;\r\n};\r\n\r\nTypr.SVG._toPath = function(nds, pth, fill) {\r\n\tfor(var ni=0; ni<nds.length; ni++) {\r\n\t\tvar nd = nds[ni], tn = nd.tagName;\r\n\t\tvar cfl = nd.getAttribute(\"fill\");  if(cfl==null) cfl = fill;\r\n\t\tif(tn==\"g\") Typr.SVG._toPath(nd.children, pth, cfl);\r\n\t\telse if(tn==\"path\") {\r\n\t\t\tpth.cmds.push(cfl?cfl:\"#000000\");\r\n\t\t\tvar d = nd.getAttribute(\"d\");  //console.log(d);\r\n\t\t\tvar toks = Typr.SVG._tokens(d);  //console.log(toks);\r\n\t\t\tTypr.SVG._toksToPath(toks, pth);  pth.cmds.push(\"X\");\r\n\t\t}\r\n\t\telse if(tn==\"defs\") ;\r\n\t\telse console.log(tn, nd);\r\n\t}\r\n};\r\n\r\nTypr.SVG._tokens = function(d) {\r\n\tvar ts = [], off = 0, rn=false, cn=\"\";  // reading number, current number\r\n\twhile(off<d.length){\r\n\t\tvar cc=d.charCodeAt(off), ch = d.charAt(off);  off++;\r\n\t\tvar isNum = (48<=cc && cc<=57) || ch==\".\" || ch==\"-\";\r\n\t\t\r\n\t\tif(rn) {\r\n\t\t\tif(ch==\"-\") {  ts.push(parseFloat(cn));  cn=ch;  }\r\n\t\t\telse if(isNum) cn+=ch;\r\n\t\t\telse {  ts.push(parseFloat(cn));  if(ch!=\",\" && ch!=\" \") ts.push(ch);  rn=false;  }\r\n\t\t}\r\n\t\telse {\r\n\t\t\tif(isNum) {  cn=ch;  rn=true;  }\r\n\t\t\telse if(ch!=\",\" && ch!=\" \") ts.push(ch);\r\n\t\t}\r\n\t}\r\n\tif(rn) ts.push(parseFloat(cn));\r\n\treturn ts;\r\n};\r\n\r\nTypr.SVG._toksToPath = function(ts, pth) {\t\r\n\tvar i = 0, x = 0, y = 0, ox = 0, oy = 0;\r\n\tvar pc = {\"M\":2,\"L\":2,\"H\":1,\"V\":1,   \"S\":4,   \"C\":6};\r\n\tvar cmds = pth.cmds, crds = pth.crds;\r\n\t\r\n\twhile(i<ts.length) {\r\n\t\tvar cmd = ts[i];  i++;\r\n\t\t\r\n\t\tif(cmd==\"z\") {  cmds.push(\"Z\");  x=ox;  y=oy;  }\r\n\t\telse {\r\n\t\t\tvar cmu = cmd.toUpperCase();\r\n\t\t\tvar ps = pc[cmu], reps = Typr.SVG._reps(ts, i, ps);\r\n\t\t\r\n\t\t\tfor(var j=0; j<reps; j++) {\r\n\t\t\t\tvar xi = 0, yi = 0;   if(cmd!=cmu) {  xi=x;  yi=y;  }\r\n\t\t\t\t\r\n\t\t\t\tif(cmu==\"M\") {  x = xi+ts[i++];  y = yi+ts[i++];  cmds.push(\"M\");  crds.push(x,y);  ox=x;  oy=y; }\r\n\t\t\t\telse if(cmu==\"L\") {  x = xi+ts[i++];  y = yi+ts[i++];  cmds.push(\"L\");  crds.push(x,y);  }\r\n\t\t\t\telse if(cmu==\"H\") {  x = xi+ts[i++];                   cmds.push(\"L\");  crds.push(x,y);  }\r\n\t\t\t\telse if(cmu==\"V\") {  y = yi+ts[i++];                   cmds.push(\"L\");  crds.push(x,y);  }\r\n\t\t\t\telse if(cmu==\"C\") {\r\n\t\t\t\t\tvar x1=xi+ts[i++], y1=yi+ts[i++], x2=xi+ts[i++], y2=yi+ts[i++], x3=xi+ts[i++], y3=yi+ts[i++];\r\n\t\t\t\t\tcmds.push(\"C\");  crds.push(x1,y1,x2,y2,x3,y3);  x=x3;  y=y3;\r\n\t\t\t\t}\r\n\t\t\t\telse if(cmu==\"S\") {\r\n\t\t\t\t\tvar co = Math.max(crds.length-4, 0);\r\n\t\t\t\t\tvar x1 = x+x-crds[co], y1 = y+y-crds[co+1];\r\n\t\t\t\t\tvar x2=xi+ts[i++], y2=yi+ts[i++], x3=xi+ts[i++], y3=yi+ts[i++];  \r\n\t\t\t\t\tcmds.push(\"C\");  crds.push(x1,y1,x2,y2,x3,y3);  x=x3;  y=y3;\r\n\t\t\t\t}\r\n\t\t\t\telse console.log(\"Unknown SVG command \"+cmd);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n};\r\nTypr.SVG._reps = function(ts, off, ps) {\r\n\tvar i = off;\r\n\twhile(i<ts.length) {  if((typeof ts[i]) == \"string\") break;  i+=ps;  }\r\n\treturn (i-off)/ps;\r\n};\r\n// End Typr.js\r\n\r\n// Begin Typr.U.js\r\n\r\nif(Typr  ==null) Typr   = {};\r\nif(Typr.U==null) Typr.U = {};\r\n\r\n\r\nTypr.U.codeToGlyph = function(font, code)\r\n{\r\n\tvar cmap = font.cmap;\r\n\t\r\n\tvar tind = -1;\r\n\tif(cmap.p0e4!=null) tind = cmap.p0e4;\r\n\telse if(cmap.p3e1!=null) tind = cmap.p3e1;\r\n\telse if(cmap.p1e0!=null) tind = cmap.p1e0;\r\n\telse if(cmap.p0e3!=null) tind = cmap.p0e3;\r\n\t\r\n\tif(tind==-1) throw \"no familiar platform and encoding!\";\r\n\t\r\n\tvar tab = cmap.tables[tind];\r\n\t\r\n\tif(tab.format==0)\r\n\t{\r\n\t\tif(code>=tab.map.length) return 0;\r\n\t\treturn tab.map[code];\r\n\t}\r\n\telse if(tab.format==4)\r\n\t{\r\n\t\tvar sind = -1;\r\n\t\tfor(var i=0; i<tab.endCount.length; i++)   if(code<=tab.endCount[i]){  sind=i;  break;  } \r\n\t\tif(sind==-1) return 0;\r\n\t\tif(tab.startCount[sind]>code) return 0;\r\n\t\t\r\n\t\tvar gli = 0;\r\n\t\tif(tab.idRangeOffset[sind]!=0) gli = tab.glyphIdArray[(code-tab.startCount[sind]) + (tab.idRangeOffset[sind]>>1) - (tab.idRangeOffset.length-sind)];\r\n\t\telse                           gli = code + tab.idDelta[sind];\r\n\t\treturn gli & 0xFFFF;\r\n\t}\r\n\telse if(tab.format==12)\r\n\t{\r\n\t\tif(code>tab.groups[tab.groups.length-1][1]) return 0;\r\n\t\tfor(var i=0; i<tab.groups.length; i++)\r\n\t\t{\r\n\t\t\tvar grp = tab.groups[i];\r\n\t\t\tif(grp[0]<=code && code<=grp[1]) return grp[2] + (code-grp[0]);\r\n\t\t}\r\n\t\treturn 0;\r\n\t}\r\n\telse throw \"unknown cmap table format \"+tab.format;\r\n};\r\n\r\n\r\nTypr.U.glyphToPath = function(font, gid)\r\n{\r\n\tvar path = { cmds:[], crds:[] };\r\n\tif(font.SVG && font.SVG.entries[gid]) {\r\n\t\tvar p = font.SVG.entries[gid];  if(p==null) return path;\r\n\t\tif(typeof p == \"string\") {  p = Typr.SVG.toPath(p);  font.SVG.entries[gid]=p;  }\r\n\t\treturn p;\r\n\t}\r\n\telse if(font.CFF) {\r\n\t\tvar state = {x:0,y:0,stack:[],nStems:0,haveWidth:false,width: font.CFF.Private ? font.CFF.Private.defaultWidthX : 0,open:false};\r\n\t\tvar cff=font.CFF, pdct = font.CFF.Private;\r\n\t\tif(cff.ROS) {\r\n\t\t\tvar gi = 0;\r\n\t\t\twhile(cff.FDSelect[gi+2]<=gid) gi+=2;\r\n\t\t\tpdct = cff.FDArray[cff.FDSelect[gi+1]].Private;\r\n\t\t}\r\n\t\tTypr.U._drawCFF(font.CFF.CharStrings[gid], state, cff, pdct, path);\r\n\t}\r\n\telse if(font.glyf) {  Typr.U._drawGlyf(gid, font, path);  }\r\n\treturn path;\r\n};\r\n\r\nTypr.U._drawGlyf = function(gid, font, path)\r\n{\r\n\tvar gl = font.glyf[gid];\r\n\tif(gl==null) gl = font.glyf[gid] = Typr.glyf._parseGlyf(font, gid);\r\n\tif(gl!=null){\r\n\t\tif(gl.noc>-1) Typr.U._simpleGlyph(gl, path);\r\n\t\telse          Typr.U._compoGlyph (gl, font, path);\r\n\t}\r\n};\r\nTypr.U._simpleGlyph = function(gl, p)\r\n{\r\n\tfor(var c=0; c<gl.noc; c++)\r\n\t{\r\n\t\tvar i0 = (c==0) ? 0 : (gl.endPts[c-1] + 1);\r\n\t\tvar il = gl.endPts[c];\r\n\t\t\r\n\t\tfor(var i=i0; i<=il; i++)\r\n\t\t{\r\n\t\t\tvar pr = (i==i0)?il:(i-1);\r\n\t\t\tvar nx = (i==il)?i0:(i+1);\r\n\t\t\tvar onCurve = gl.flags[i]&1;\r\n\t\t\tvar prOnCurve = gl.flags[pr]&1;\r\n\t\t\tvar nxOnCurve = gl.flags[nx]&1;\r\n\t\t\t\r\n\t\t\tvar x = gl.xs[i], y = gl.ys[i];\r\n\t\t\t\r\n\t\t\tif(i==i0) { \r\n\t\t\t\tif(onCurve)  \r\n\t\t\t\t{\r\n\t\t\t\t\tif(prOnCurve) Typr.U.P.moveTo(p, gl.xs[pr], gl.ys[pr]); \r\n\t\t\t\t\telse          {  Typr.U.P.moveTo(p,x,y);  continue;  /*  will do curveTo at il  */  }\r\n\t\t\t\t}\r\n\t\t\t\telse        \r\n\t\t\t\t{\r\n\t\t\t\t\tif(prOnCurve) Typr.U.P.moveTo(p,  gl.xs[pr],       gl.ys[pr]        );\r\n\t\t\t\t\telse          Typr.U.P.moveTo(p, (gl.xs[pr]+x)/2, (gl.ys[pr]+y)/2   ); \r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif(onCurve)\r\n\t\t\t{\r\n\t\t\t\tif(prOnCurve) Typr.U.P.lineTo(p,x,y);\r\n\t\t\t}\r\n\t\t\telse\r\n\t\t\t{\r\n\t\t\t\tif(nxOnCurve) Typr.U.P.qcurveTo(p, x, y, gl.xs[nx], gl.ys[nx]); \r\n\t\t\t\telse          Typr.U.P.qcurveTo(p, x, y, (x+gl.xs[nx])/2, (y+gl.ys[nx])/2); \r\n\t\t\t}\r\n\t\t}\r\n\t\tTypr.U.P.closePath(p);\r\n\t}\r\n};\r\nTypr.U._compoGlyph = function(gl, font, p)\r\n{\r\n\tfor(var j=0; j<gl.parts.length; j++)\r\n\t{\r\n\t\tvar path = { cmds:[], crds:[] };\r\n\t\tvar prt = gl.parts[j];\r\n\t\tTypr.U._drawGlyf(prt.glyphIndex, font, path);\r\n\t\t\r\n\t\tvar m = prt.m;\r\n\t\tfor(var i=0; i<path.crds.length; i+=2)\r\n\t\t{\r\n\t\t\tvar x = path.crds[i  ], y = path.crds[i+1];\r\n\t\t\tp.crds.push(x*m.a + y*m.b + m.tx);\r\n\t\t\tp.crds.push(x*m.c + y*m.d + m.ty);\r\n\t\t}\r\n\t\tfor(var i=0; i<path.cmds.length; i++) p.cmds.push(path.cmds[i]);\r\n\t}\r\n};\r\n\r\n\r\nTypr.U._getGlyphClass = function(g, cd)\r\n{\r\n\tvar intr = Typr._lctf.getInterval(cd, g);\r\n\treturn intr==-1 ? 0 : cd[intr+2];\r\n\t//for(var i=0; i<cd.start.length; i++) \r\n\t//\tif(cd.start[i]<=g && cd.end[i]>=g) return cd.class[i];\r\n\t//return 0;\r\n};\r\n\r\nTypr.U.getPairAdjustment = function(font, g1, g2)\r\n{\r\n\t//return 0;\r\n\tif(font.GPOS) {\r\n\t\tvar gpos = font[\"GPOS\"];\r\n\t\tvar llist = gpos.lookupList, flist = gpos.featureList;\r\n\t\tvar tused = [];\r\n\t\tfor(var i=0; i<flist.length; i++) \r\n\t\t{\r\n\t\t\tvar fl = flist[i];  //console.log(fl);\r\n\t\t\tif(fl.tag!=\"kern\") continue;\r\n\t\t\tfor(var ti=0; ti<fl.tab.length; ti++) {\r\n\t\t\t\tif(tused[fl.tab[ti]]) continue;  tused[fl.tab[ti]] = true;\r\n\t\t\t\tvar tab = llist[fl.tab[ti]];\r\n\t\t\t\t//console.log(tab);\r\n\t\t\t\t\r\n\t\t\t\tfor(var j=0; j<tab.tabs.length; j++)\r\n\t\t\t\t{\r\n\t\t\t\t\tif(tab.tabs[i]==null) continue;\r\n\t\t\t\t\tvar ltab = tab.tabs[j], ind;\r\n\t\t\t\t\tif(ltab.coverage) {  ind = Typr._lctf.coverageIndex(ltab.coverage, g1);  if(ind==-1) continue;  }\r\n\t\t\t\t\t\r\n\t\t\t\t\tif(tab.ltype==1) ;\r\n\t\t\t\t\telse if(tab.ltype==2)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tvar adj;\r\n\t\t\t\t\t\tif(ltab.fmt==1)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tvar right = ltab.pairsets[ind];\r\n\t\t\t\t\t\t\tfor(var i=0; i<right.length; i++) if(right[i].gid2==g2) adj = right[i];\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse if(ltab.fmt==2)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tvar c1 = Typr.U._getGlyphClass(g1, ltab.classDef1);\r\n\t\t\t\t\t\t\tvar c2 = Typr.U._getGlyphClass(g2, ltab.classDef2);\r\n\t\t\t\t\t\t\tadj = ltab.matrix[c1][c2];\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\t//if(adj) console.log(ltab, adj);\r\n\t\t\t\t\t\tif(adj && adj.val2) return adj.val2[2];\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\tif(font.kern)\r\n\t{\r\n\t\tvar ind1 = font.kern.glyph1.indexOf(g1);\r\n\t\tif(ind1!=-1)\r\n\t\t{\r\n\t\t\tvar ind2 = font.kern.rval[ind1].glyph2.indexOf(g2);\r\n\t\t\tif(ind2!=-1) return font.kern.rval[ind1].vals[ind2];\r\n\t\t}\r\n\t}\r\n\t\r\n\treturn 0;\r\n};\r\n\r\nTypr.U.stringToGlyphs = function(font, str)\r\n{\r\n\tvar gls = [];\r\n\tfor(var i=0; i<str.length; i++) {\r\n\t\tvar cc = str.codePointAt(i);  if(cc>0xffff) i++;\r\n\t\tgls.push(Typr.U.codeToGlyph(font, cc));\r\n\t}\r\n\tfor(var i=0; i<str.length; i++) {\r\n\t\tvar cc = str.codePointAt(i);  //\r\n\t\tif(cc==2367) {  var t=gls[i-1];  gls[i-1]=gls[i];  gls[i]=t;  }\r\n\t\t//if(cc==2381) {  var t=gls[i+1];  gls[i+1]=gls[i];  gls[i]=t;  }\r\n\t\tif(cc>0xffff) i++;\r\n\t}\r\n\t//console.log(gls.slice(0));\r\n\t\r\n\t//console.log(gls);  return gls;\r\n\t\r\n\tvar gsub = font[\"GSUB\"];  if(gsub==null) return gls;\r\n\tvar llist = gsub.lookupList, flist = gsub.featureList;\r\n\t\r\n\tvar cligs = [\"rlig\", \"liga\", \"mset\",  \"isol\",\"init\",\"fina\",\"medi\",   \"half\", \"pres\", \r\n\t\t\t\t\"blws\" /* Tibetan fonts like Himalaya.ttf */ ];\r\n\t\r\n\t//console.log(gls.slice(0));\r\n\tvar tused = [];\r\n\tfor(var fi=0; fi<flist.length; fi++)\r\n\t{\r\n\t\tvar fl = flist[fi];  if(cligs.indexOf(fl.tag)==-1) continue;\r\n\t\t//if(fl.tag==\"blwf\") continue;\r\n\t\t//console.log(fl);\r\n\t\t//console.log(fl.tag);\r\n\t\tfor(var ti=0; ti<fl.tab.length; ti++) {\r\n\t\t\tif(tused[fl.tab[ti]]) continue;  tused[fl.tab[ti]] = true;\r\n\t\t\tvar tab = llist[fl.tab[ti]];\r\n\t\t\t//console.log(fl.tab[ti], tab.ltype);\r\n\t\t\t//console.log(fl.tag, tab);\r\n\t\t\tfor(var ci=0; ci<gls.length; ci++) {\r\n\t\t\t\tvar feat = Typr.U._getWPfeature(str, ci);\r\n\t\t\t\tif(\"isol,init,fina,medi\".indexOf(fl.tag)!=-1 && fl.tag!=feat) continue;\r\n\t\t\t\t\r\n\t\t\t\tTypr.U._applySubs(gls, ci, tab, llist);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\t\r\n\treturn gls;\r\n};\r\nTypr.U._getWPfeature = function(str, ci) {  // get Word Position feature\r\n\tvar wsep = \"\\n\\t\\\" ,.:;!?()  ،\";\r\n\tvar R = \"آأؤإاةدذرزوٱٲٳٵٶٷڈډڊڋڌڍڎڏڐڑڒړڔڕږڗژڙۀۃۄۅۆۇۈۉۊۋۍۏےۓەۮۯܐܕܖܗܘܙܞܨܪܬܯݍݙݚݛݫݬݱݳݴݸݹࡀࡆࡇࡉࡔࡧࡩࡪࢪࢫࢬࢮࢱࢲࢹૅેૉ૊૎૏ૐ૑૒૝ૡ૤૯஁ஃ஄அஉ஌எஏ஑னப஫஬\";\r\n\tvar L = \"ꡲ્૗\";\r\n\t\r\n\tvar slft = ci==0            || wsep.indexOf(str[ci-1])!=-1;\r\n\tvar srgt = ci==str.length-1 || wsep.indexOf(str[ci+1])!=-1;\r\n\t\t\r\n\tif(!slft && R.indexOf(str[ci-1])!=-1) slft=true;\r\n\tif(!srgt && R.indexOf(str[ci  ])!=-1) srgt=true;\r\n\t\t\r\n\tif(!srgt && L.indexOf(str[ci+1])!=-1) srgt=true;\r\n\tif(!slft && L.indexOf(str[ci  ])!=-1) slft=true;\r\n\t\t\r\n\tvar feat = null;\r\n\tif(slft) feat = srgt ? \"isol\" : \"init\";\r\n\telse     feat = srgt ? \"fina\" : \"medi\";\r\n\t\r\n\treturn feat;\r\n};\r\nTypr.U._applySubs = function(gls, ci, tab, llist) {\r\n\tvar rlim = gls.length-ci-1;\r\n\t//if(ci==0) console.log(\"++++ \", tab.ltype);\r\n\tfor(var j=0; j<tab.tabs.length; j++)\r\n\t{\r\n\t\tif(tab.tabs[j]==null) continue;\r\n\t\tvar ltab = tab.tabs[j], ind;\r\n\t\tif(ltab.coverage) {  ind = Typr._lctf.coverageIndex(ltab.coverage, gls[ci]);  if(ind==-1) continue;  }\r\n\t\t//if(ci==0) console.log(ind, ltab);\r\n\t\t//*\r\n\t\tif(tab.ltype==1) {\r\n\t\t\tvar gl = gls[ci];\r\n\t\t\tif(ltab.fmt==1) gls[ci] = gls[ci]+ltab.delta;\r\n\t\t\telse            gls[ci] = ltab.newg[ind];\r\n\t\t\t//console.log(\"applying ... 1\", ci, gl, gls[ci]);\r\n\t\t}//*\r\n\t\telse if(tab.ltype==4) {\r\n\t\t\tvar vals = ltab.vals[ind];\r\n\t\t\t\r\n\t\t\tfor(var k=0; k<vals.length; k++) {\r\n\t\t\t\tvar lig = vals[k], rl = lig.chain.length;  if(rl>rlim) continue;\r\n\t\t\t\tvar good = true, em1 = 0;\r\n\t\t\t\tfor(var l=0; l<rl; l++) {  while(gls[ci+em1+(1+l)]==-1)em1++;  if(lig.chain[l]!=gls[ci+em1+(1+l)]) good=false;  }\r\n\t\t\t\tif(!good) continue;\r\n\t\t\t\tgls[ci]=lig.nglyph;\r\n\t\t\t\tfor(var l=0; l<rl+em1; l++) gls[ci+l+1]=-1;   break;  // first character changed, other ligatures do not apply anymore\r\n\t\t\t\t//console.log(\"lig\", ci, lig.chain, lig.nglyph);\r\n\t\t\t\t//console.log(\"applying ...\");\r\n\t\t\t}\r\n\t\t}\r\n\t\telse  if(tab.ltype==5 && ltab.fmt==2) {\r\n\t\t\tvar cind = Typr._lctf.getInterval(ltab.cDef, gls[ci]);\r\n\t\t\tvar cls = ltab.cDef[cind+2], scs = ltab.scset[cls]; \r\n\t\t\tfor(var i=0; i<scs.length; i++) {\r\n\t\t\t\tvar sc = scs[i], inp = sc.input;\r\n\t\t\t\tif(inp.length>rlim) continue;\r\n\t\t\t\tvar good = true;\r\n\t\t\t\tfor(var l=0; l<inp.length; l++) {\r\n\t\t\t\t\tvar cind2 = Typr._lctf.getInterval(ltab.cDef, gls[ci+1+l]);\r\n\t\t\t\t\tif(cind==-1 && ltab.cDef[cind2+2]!=inp[l]) {  good=false;  break;  }\r\n\t\t\t\t}\r\n\t\t\t\tif(!good) continue;\r\n\t\t\t\t//console.log(ci, gl);\r\n\t\t\t\tvar lrs = sc.substLookupRecords;\r\n\t\t\t\tfor(var k=0; k<lrs.length; k+=2)\r\n\t\t\t\t{\r\n\t\t\t\t\tvar gi = lrs[k], tabi = lrs[k+1];\r\n\t\t\t\t\t//Typr.U._applyType1(gls, ci+gi, llist[tabi]);\r\n\t\t\t\t\t//console.log(tabi, gls[ci+gi], llist[tabi]);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\telse if(tab.ltype==6 && ltab.fmt==3) {\r\n\t\t\t//if(ltab.backCvg.length==0) return;\r\n\t\t\tif(!Typr.U._glsCovered(gls, ltab.backCvg, ci-ltab.backCvg.length)) continue;\r\n\t\t\tif(!Typr.U._glsCovered(gls, ltab.inptCvg, ci)) continue;\r\n\t\t\tif(!Typr.U._glsCovered(gls, ltab.ahedCvg, ci+ltab.inptCvg.length)) continue;\r\n\t\t\t//console.log(ci, ltab);\r\n\t\t\tvar lr = ltab.lookupRec;  //console.log(ci, gl, lr);\r\n\t\t\tfor(var i=0; i<lr.length; i+=2) {\r\n\t\t\t\tvar cind = lr[i], tab2 = llist[lr[i+1]];\r\n\t\t\t\t//console.log(\"-\", lr[i+1], tab2);\r\n\t\t\t\tTypr.U._applySubs(gls, ci+cind, tab2, llist);\r\n\t\t\t}\r\n\t\t}\r\n\t\t//else console.log(\"Unknown table\", tab.ltype, ltab.fmt);\r\n\t\t//*/\r\n\t}\r\n};\r\n\r\nTypr.U._glsCovered = function(gls, cvgs, ci) {\r\n\tfor(var i=0; i<cvgs.length; i++) {\r\n\t\tvar ind = Typr._lctf.coverageIndex(cvgs[i], gls[ci+i]);  if(ind==-1) return false;\r\n\t}\r\n\treturn true;\r\n};\r\n\r\nTypr.U.glyphsToPath = function(font, gls, clr)\r\n{\t\r\n\t//gls = gls.reverse();//gls.slice(0,12).concat(gls.slice(12).reverse());\r\n\t\r\n\tvar tpath = {cmds:[], crds:[]};\r\n\tvar x = 0;\r\n\t\r\n\tfor(var i=0; i<gls.length; i++)\r\n\t{\r\n\t\tvar gid = gls[i];  if(gid==-1) continue;\r\n\t\tvar gid2 = (i<gls.length-1 && gls[i+1]!=-1)  ? gls[i+1] : 0;\r\n\t\tvar path = Typr.U.glyphToPath(font, gid);\r\n\t\tfor(var j=0; j<path.crds.length; j+=2)\r\n\t\t{\r\n\t\t\ttpath.crds.push(path.crds[j] + x);\r\n\t\t\ttpath.crds.push(path.crds[j+1]);\r\n\t\t}\r\n\t\tif(clr) tpath.cmds.push(clr);\r\n\t\tfor(var j=0; j<path.cmds.length; j++) tpath.cmds.push(path.cmds[j]);\r\n\t\tif(clr) tpath.cmds.push(\"X\");\r\n\t\tx += font.hmtx.aWidth[gid];// - font.hmtx.lsBearing[gid];\r\n\t\tif(i<gls.length-1) x += Typr.U.getPairAdjustment(font, gid, gid2);\r\n\t}\r\n\treturn tpath;\r\n};\r\n\r\nTypr.U.pathToSVG = function(path, prec)\r\n{\r\n\tif(prec==null) prec = 5;\r\n\tvar out = [], co = 0, lmap = {\"M\":2,\"L\":2,\"Q\":4,\"C\":6};\r\n\tfor(var i=0; i<path.cmds.length; i++)\r\n\t{\r\n\t\tvar cmd = path.cmds[i], cn = co+(lmap[cmd]?lmap[cmd]:0);  \r\n\t\tout.push(cmd);\r\n\t\twhile(co<cn) {  var c = path.crds[co++];  out.push(parseFloat(c.toFixed(prec))+(co==cn?\"\":\" \"));  }\r\n\t}\r\n\treturn out.join(\"\");\r\n};\r\n\r\nTypr.U.pathToContext = function(path, ctx)\r\n{\r\n\tvar c = 0, crds = path.crds;\r\n\t\r\n\tfor(var j=0; j<path.cmds.length; j++)\r\n\t{\r\n\t\tvar cmd = path.cmds[j];\r\n\t\tif     (cmd==\"M\") {\r\n\t\t\tctx.moveTo(crds[c], crds[c+1]);\r\n\t\t\tc+=2;\r\n\t\t}\r\n\t\telse if(cmd==\"L\") {\r\n\t\t\tctx.lineTo(crds[c], crds[c+1]);\r\n\t\t\tc+=2;\r\n\t\t}\r\n\t\telse if(cmd==\"C\") {\r\n\t\t\tctx.bezierCurveTo(crds[c], crds[c+1], crds[c+2], crds[c+3], crds[c+4], crds[c+5]);\r\n\t\t\tc+=6;\r\n\t\t}\r\n\t\telse if(cmd==\"Q\") {\r\n\t\t\tctx.quadraticCurveTo(crds[c], crds[c+1], crds[c+2], crds[c+3]);\r\n\t\t\tc+=4;\r\n\t\t}\r\n\t\telse if(cmd.charAt(0)==\"#\") {\r\n\t\t\tctx.beginPath();\r\n\t\t\tctx.fillStyle = cmd;\r\n\t\t}\r\n\t\telse if(cmd==\"Z\") {\r\n\t\t\tctx.closePath();\r\n\t\t}\r\n\t\telse if(cmd==\"X\") {\r\n\t\t\tctx.fill();\r\n\t\t}\r\n\t}\r\n};\r\n\r\n\r\nTypr.U.P = {};\r\nTypr.U.P.moveTo = function(p, x, y)\r\n{\r\n\tp.cmds.push(\"M\");  p.crds.push(x,y);\r\n};\r\nTypr.U.P.lineTo = function(p, x, y)\r\n{\r\n\tp.cmds.push(\"L\");  p.crds.push(x,y);\r\n};\r\nTypr.U.P.curveTo = function(p, a,b,c,d,e,f)\r\n{\r\n\tp.cmds.push(\"C\");  p.crds.push(a,b,c,d,e,f);\r\n};\r\nTypr.U.P.qcurveTo = function(p, a,b,c,d)\r\n{\r\n\tp.cmds.push(\"Q\");  p.crds.push(a,b,c,d);\r\n};\r\nTypr.U.P.closePath = function(p) {  p.cmds.push(\"Z\");  };\r\n\r\n\r\n\r\n\r\nTypr.U._drawCFF = function(cmds, state, font, pdct, p)\r\n{\r\n\tvar stack = state.stack;\r\n\tvar nStems = state.nStems, haveWidth=state.haveWidth, width=state.width, open=state.open;\r\n\tvar i=0;\r\n\tvar x=state.x, y=state.y, c1x=0, c1y=0, c2x=0, c2y=0, c3x=0, c3y=0, c4x=0, c4y=0, jpx=0, jpy=0;\r\n\t\r\n\tvar o = {val:0,size:0};\r\n\t//console.log(cmds);\r\n\twhile(i<cmds.length)\r\n\t{\r\n\t\tTypr.CFF.getCharString(cmds, i, o);\r\n\t\tvar v = o.val;\r\n\t\ti += o.size;\r\n\t\t\t\r\n\t\tif(v==\"o1\" || v==\"o18\")  //  hstem || hstemhm\r\n\t\t{\r\n\t\t\tvar hasWidthArg;\r\n\r\n\t\t\t// The number of stem operators on the stack is always even.\r\n\t\t\t// If the value is uneven, that means a width is specified.\r\n\t\t\thasWidthArg = stack.length % 2 !== 0;\r\n\t\t\tif (hasWidthArg && !haveWidth) {\r\n\t\t\t\twidth = stack.shift() + pdct.nominalWidthX;\r\n\t\t\t}\r\n\r\n\t\t\tnStems += stack.length >> 1;\r\n\t\t\tstack.length = 0;\r\n\t\t\thaveWidth = true;\r\n\t\t}\r\n\t\telse if(v==\"o3\" || v==\"o23\")  // vstem || vstemhm\r\n\t\t{\r\n\t\t\tvar hasWidthArg;\r\n\r\n\t\t\t// The number of stem operators on the stack is always even.\r\n\t\t\t// If the value is uneven, that means a width is specified.\r\n\t\t\thasWidthArg = stack.length % 2 !== 0;\r\n\t\t\tif (hasWidthArg && !haveWidth) {\r\n\t\t\t\twidth = stack.shift() + pdct.nominalWidthX;\r\n\t\t\t}\r\n\r\n\t\t\tnStems += stack.length >> 1;\r\n\t\t\tstack.length = 0;\r\n\t\t\thaveWidth = true;\r\n\t\t}\r\n\t\telse if(v==\"o4\")\r\n\t\t{\r\n\t\t\tif (stack.length > 1 && !haveWidth) {\r\n                        width = stack.shift() + pdct.nominalWidthX;\r\n                        haveWidth = true;\r\n                    }\r\n\t\t\tif(open) Typr.U.P.closePath(p);\r\n\r\n                    y += stack.pop();\r\n\t\t\t\t\tTypr.U.P.moveTo(p,x,y);   open=true;\r\n\t\t}\r\n\t\telse if(v==\"o5\")\r\n\t\t{\r\n\t\t\twhile (stack.length > 0) {\r\n                        x += stack.shift();\r\n                        y += stack.shift();\r\n                        Typr.U.P.lineTo(p, x, y);\r\n                    }\r\n\t\t}\r\n\t\telse if(v==\"o6\" || v==\"o7\")  // hlineto || vlineto\r\n\t\t{\r\n\t\t\tvar count = stack.length;\r\n\t\t\tvar isX = (v == \"o6\");\r\n\t\t\t\r\n\t\t\tfor(var j=0; j<count; j++) {\r\n\t\t\t\tvar sval = stack.shift();\r\n\t\t\t\t\r\n\t\t\t\tif(isX) x += sval;  else  y += sval;\r\n\t\t\t\tisX = !isX;\r\n\t\t\t\tTypr.U.P.lineTo(p, x, y);\r\n\t\t\t}\r\n\t\t}\r\n\t\telse if(v==\"o8\" || v==\"o24\")\t// rrcurveto || rcurveline\r\n\t\t{\r\n\t\t\tvar count = stack.length;\r\n\t\t\tvar index = 0;\r\n\t\t\twhile(index+6 <= count) {\r\n\t\t\t\tc1x = x + stack.shift();\r\n\t\t\t\tc1y = y + stack.shift();\r\n\t\t\t\tc2x = c1x + stack.shift();\r\n\t\t\t\tc2y = c1y + stack.shift();\r\n\t\t\t\tx = c2x + stack.shift();\r\n\t\t\t\ty = c2y + stack.shift();\r\n\t\t\t\tTypr.U.P.curveTo(p, c1x, c1y, c2x, c2y, x, y);\r\n\t\t\t\tindex+=6;\r\n\t\t\t}\r\n\t\t\tif(v==\"o24\")\r\n\t\t\t{\r\n\t\t\t\tx += stack.shift();\r\n\t\t\t\ty += stack.shift();\r\n\t\t\t\tTypr.U.P.lineTo(p, x, y);\r\n\t\t\t}\r\n\t\t}\r\n\t\telse if(v==\"o11\")  break;\r\n\t\telse if(v==\"o1234\" || v==\"o1235\" || v==\"o1236\" || v==\"o1237\")//if((v+\"\").slice(0,3)==\"o12\")\r\n\t\t{\r\n\t\t\tif(v==\"o1234\")\r\n\t\t\t{\r\n\t\t\t\tc1x = x   + stack.shift();    // dx1\r\n                c1y = y;                      // dy1\r\n\t\t\t\tc2x = c1x + stack.shift();    // dx2\r\n\t\t\t\tc2y = c1y + stack.shift();    // dy2\r\n\t\t\t\tjpx = c2x + stack.shift();    // dx3\r\n\t\t\t\tjpy = c2y;                    // dy3\r\n\t\t\t\tc3x = jpx + stack.shift();    // dx4\r\n\t\t\t\tc3y = c2y;                    // dy4\r\n\t\t\t\tc4x = c3x + stack.shift();    // dx5\r\n\t\t\t\tc4y = y;                      // dy5\r\n\t\t\t\tx = c4x + stack.shift();      // dx6\r\n\t\t\t\tTypr.U.P.curveTo(p, c1x, c1y, c2x, c2y, jpx, jpy);\r\n\t\t\t\tTypr.U.P.curveTo(p, c3x, c3y, c4x, c4y, x, y);\r\n\t\t\t\t\r\n\t\t\t}\r\n\t\t\tif(v==\"o1235\")\r\n\t\t\t{\r\n\t\t\t\tc1x = x   + stack.shift();    // dx1\r\n\t\t\t\tc1y = y   + stack.shift();    // dy1\r\n\t\t\t\tc2x = c1x + stack.shift();    // dx2\r\n\t\t\t\tc2y = c1y + stack.shift();    // dy2\r\n\t\t\t\tjpx = c2x + stack.shift();    // dx3\r\n\t\t\t\tjpy = c2y + stack.shift();    // dy3\r\n\t\t\t\tc3x = jpx + stack.shift();    // dx4\r\n\t\t\t\tc3y = jpy + stack.shift();    // dy4\r\n\t\t\t\tc4x = c3x + stack.shift();    // dx5\r\n\t\t\t\tc4y = c3y + stack.shift();    // dy5\r\n\t\t\t\tx = c4x + stack.shift();      // dx6\r\n\t\t\t\ty = c4y + stack.shift();      // dy6\r\n\t\t\t\tstack.shift();                // flex depth\r\n\t\t\t\tTypr.U.P.curveTo(p, c1x, c1y, c2x, c2y, jpx, jpy);\r\n\t\t\t\tTypr.U.P.curveTo(p, c3x, c3y, c4x, c4y, x, y);\r\n\t\t\t}\r\n\t\t\tif(v==\"o1236\")\r\n\t\t\t{\r\n\t\t\t\tc1x = x   + stack.shift();    // dx1\r\n\t\t\t\tc1y = y   + stack.shift();    // dy1\r\n\t\t\t\tc2x = c1x + stack.shift();    // dx2\r\n\t\t\t\tc2y = c1y + stack.shift();    // dy2\r\n\t\t\t\tjpx = c2x + stack.shift();    // dx3\r\n\t\t\t\tjpy = c2y;                    // dy3\r\n\t\t\t\tc3x = jpx + stack.shift();    // dx4\r\n\t\t\t\tc3y = c2y;                    // dy4\r\n\t\t\t\tc4x = c3x + stack.shift();    // dx5\r\n\t\t\t\tc4y = c3y + stack.shift();    // dy5\r\n\t\t\t\tx = c4x + stack.shift();      // dx6\r\n\t\t\t\tTypr.U.P.curveTo(p, c1x, c1y, c2x, c2y, jpx, jpy);\r\n\t\t\t\tTypr.U.P.curveTo(p, c3x, c3y, c4x, c4y, x, y);\r\n\t\t\t}\r\n\t\t\tif(v==\"o1237\")\r\n\t\t\t{\r\n\t\t\t\tc1x = x   + stack.shift();    // dx1\r\n\t\t\t\tc1y = y   + stack.shift();    // dy1\r\n\t\t\t\tc2x = c1x + stack.shift();    // dx2\r\n\t\t\t\tc2y = c1y + stack.shift();    // dy2\r\n\t\t\t\tjpx = c2x + stack.shift();    // dx3\r\n\t\t\t\tjpy = c2y + stack.shift();    // dy3\r\n\t\t\t\tc3x = jpx + stack.shift();    // dx4\r\n\t\t\t\tc3y = jpy + stack.shift();    // dy4\r\n\t\t\t\tc4x = c3x + stack.shift();    // dx5\r\n\t\t\t\tc4y = c3y + stack.shift();    // dy5\r\n\t\t\t\tif (Math.abs(c4x - x) > Math.abs(c4y - y)) {\r\n\t\t\t\t    x = c4x + stack.shift();\r\n\t\t\t\t} else {\r\n\t\t\t\t    y = c4y + stack.shift();\r\n\t\t\t\t}\r\n\t\t\t\tTypr.U.P.curveTo(p, c1x, c1y, c2x, c2y, jpx, jpy);\r\n\t\t\t\tTypr.U.P.curveTo(p, c3x, c3y, c4x, c4y, x, y);\r\n\t\t\t}\r\n\t\t}\r\n\t\telse if(v==\"o14\")\r\n\t\t{\r\n\t\t\tif (stack.length > 0 && !haveWidth) {\r\n                        width = stack.shift() + font.nominalWidthX;\r\n                        haveWidth = true;\r\n                    }\r\n\t\t\tif(stack.length==4) // seac = standard encoding accented character\r\n\t\t\t{\r\n\t\t\t\tvar adx = stack.shift();\r\n\t\t\t\tvar ady = stack.shift();\r\n\t\t\t\tvar bchar = stack.shift();\r\n\t\t\t\tvar achar = stack.shift();\r\n\t\t\t\r\n\t\t\t\t\r\n\t\t\t\tvar bind = Typr.CFF.glyphBySE(font, bchar);\r\n\t\t\t\tvar aind = Typr.CFF.glyphBySE(font, achar);\r\n\t\t\t\t\r\n\t\t\t\t//console.log(bchar, bind);\r\n\t\t\t\t//console.log(achar, aind);\r\n\t\t\t\t//state.x=x; state.y=y; state.nStems=nStems; state.haveWidth=haveWidth; state.width=width;  state.open=open;\r\n\t\t\t\t\r\n\t\t\t\tTypr.U._drawCFF(font.CharStrings[bind], state,font,pdct,p);\r\n\t\t\t\tstate.x = adx; state.y = ady;\r\n\t\t\t\tTypr.U._drawCFF(font.CharStrings[aind], state,font,pdct,p);\r\n\t\t\t\t\r\n\t\t\t\t//x=state.x; y=state.y; nStems=state.nStems; haveWidth=state.haveWidth; width=state.width;  open=state.open;\r\n\t\t\t}\r\n\t\t\tif(open) {  Typr.U.P.closePath(p);  open=false;  }\r\n\t\t}\t\t\r\n\t\telse if(v==\"o19\" || v==\"o20\") \r\n\t\t{ \r\n\t\t\tvar hasWidthArg;\r\n\r\n\t\t\t// The number of stem operators on the stack is always even.\r\n\t\t\t// If the value is uneven, that means a width is specified.\r\n\t\t\thasWidthArg = stack.length % 2 !== 0;\r\n\t\t\tif (hasWidthArg && !haveWidth) {\r\n\t\t\t\twidth = stack.shift() + pdct.nominalWidthX;\r\n\t\t\t}\r\n\r\n\t\t\tnStems += stack.length >> 1;\r\n\t\t\tstack.length = 0;\r\n\t\t\thaveWidth = true;\r\n\t\t\t\r\n\t\t\ti += (nStems + 7) >> 3;\r\n\t\t}\r\n\t\t\r\n\t\telse if(v==\"o21\") {\r\n\t\t\tif (stack.length > 2 && !haveWidth) {\r\n                        width = stack.shift() + pdct.nominalWidthX;\r\n                        haveWidth = true;\r\n                    }\r\n\r\n                    y += stack.pop();\r\n                    x += stack.pop();\r\n\t\t\t\t\t\r\n\t\t\t\t\tif(open) Typr.U.P.closePath(p);\r\n                    Typr.U.P.moveTo(p,x,y);   open=true;\r\n\t\t}\r\n\t\telse if(v==\"o22\")\r\n\t\t{\r\n\t\t\t if (stack.length > 1 && !haveWidth) {\r\n                        width = stack.shift() + pdct.nominalWidthX;\r\n                        haveWidth = true;\r\n                    }\r\n\t\t\t\t\t\r\n                    x += stack.pop();\r\n\t\t\t\t\t\r\n\t\t\t\t\tif(open) Typr.U.P.closePath(p);\r\n\t\t\t\t\tTypr.U.P.moveTo(p,x,y);   open=true;                    \r\n\t\t}\r\n\t\telse if(v==\"o25\")\r\n\t\t{\r\n\t\t\twhile (stack.length > 6) {\r\n                        x += stack.shift();\r\n                        y += stack.shift();\r\n                        Typr.U.P.lineTo(p, x, y);\r\n                    }\r\n\r\n                    c1x = x + stack.shift();\r\n                    c1y = y + stack.shift();\r\n                    c2x = c1x + stack.shift();\r\n                    c2y = c1y + stack.shift();\r\n                    x = c2x + stack.shift();\r\n                    y = c2y + stack.shift();\r\n                    Typr.U.P.curveTo(p, c1x, c1y, c2x, c2y, x, y);\r\n\t\t}\r\n\t\telse if(v==\"o26\") \r\n\t\t{\r\n\t\t\tif (stack.length % 2) {\r\n                        x += stack.shift();\r\n                    }\r\n\r\n                    while (stack.length > 0) {\r\n                        c1x = x;\r\n                        c1y = y + stack.shift();\r\n                        c2x = c1x + stack.shift();\r\n                        c2y = c1y + stack.shift();\r\n                        x = c2x;\r\n                        y = c2y + stack.shift();\r\n                        Typr.U.P.curveTo(p, c1x, c1y, c2x, c2y, x, y);\r\n                    }\r\n\r\n\t\t}\r\n\t\telse if(v==\"o27\")\r\n\t\t{\r\n\t\t\tif (stack.length % 2) {\r\n                        y += stack.shift();\r\n                    }\r\n\r\n                    while (stack.length > 0) {\r\n                        c1x = x + stack.shift();\r\n                        c1y = y;\r\n                        c2x = c1x + stack.shift();\r\n                        c2y = c1y + stack.shift();\r\n                        x = c2x + stack.shift();\r\n                        y = c2y;\r\n                        Typr.U.P.curveTo(p, c1x, c1y, c2x, c2y, x, y);\r\n                    }\r\n\t\t}\r\n\t\telse if(v==\"o10\" || v==\"o29\")\t// callsubr || callgsubr\r\n\t\t{\r\n\t\t\tvar obj = (v==\"o10\" ? pdct : font);\r\n\t\t\tif(stack.length==0) { console.log(\"error: empty stack\");  }\r\n\t\t\telse {\r\n\t\t\t\tvar ind = stack.pop();\r\n\t\t\t\tvar subr = obj.Subrs[ ind + obj.Bias ];\r\n\t\t\t\tstate.x=x; state.y=y; state.nStems=nStems; state.haveWidth=haveWidth; state.width=width;  state.open=open;\r\n\t\t\t\tTypr.U._drawCFF(subr, state,font,pdct,p);\r\n\t\t\t\tx=state.x; y=state.y; nStems=state.nStems; haveWidth=state.haveWidth; width=state.width;  open=state.open;\r\n\t\t\t}\r\n\t\t}\r\n\t\telse if(v==\"o30\" || v==\"o31\")   // vhcurveto || hvcurveto\r\n\t\t{\r\n\t\t\tvar count, count1 = stack.length;\r\n\t\t\tvar index = 0;\r\n\t\t\tvar alternate = v == \"o31\";\r\n\t\t\t\r\n\t\t\tcount  = count1 & ~2;\r\n\t\t\tindex += count1 - count;\r\n\t\t\t\r\n\t\t\twhile ( index < count ) \r\n\t\t\t{\r\n\t\t\t\tif(alternate)\r\n\t\t\t\t{\r\n\t\t\t\t\tc1x = x + stack.shift();\r\n\t\t\t\t\tc1y = y;\r\n\t\t\t\t\tc2x = c1x + stack.shift();\r\n\t\t\t\t\tc2y = c1y + stack.shift();\r\n\t\t\t\t\ty = c2y + stack.shift();\r\n\t\t\t\t\tif(count-index == 5) {  x = c2x + stack.shift();  index++;  }\r\n\t\t\t\t\telse x = c2x;\r\n\t\t\t\t\talternate = false;\r\n\t\t\t\t}\r\n\t\t\t\telse\r\n\t\t\t\t{\r\n\t\t\t\t\tc1x = x;\r\n\t\t\t\t\tc1y = y + stack.shift();\r\n\t\t\t\t\tc2x = c1x + stack.shift();\r\n\t\t\t\t\tc2y = c1y + stack.shift();\r\n\t\t\t\t\tx = c2x + stack.shift();\r\n\t\t\t\t\tif(count-index == 5) {  y = c2y + stack.shift();  index++;  }\r\n\t\t\t\t\telse y = c2y;\r\n\t\t\t\t\talternate = true;\r\n\t\t\t\t}\r\n                Typr.U.P.curveTo(p, c1x, c1y, c2x, c2y, x, y);\r\n\t\t\t\tindex += 4;\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\telse if((v+\"\").charAt(0)==\"o\") {   console.log(\"Unknown operation: \"+v, cmds); throw v;  }\r\n\t\telse stack.push(v);\r\n\t}\r\n\t//console.log(cmds);\r\n\tstate.x=x; state.y=y; state.nStems=nStems; state.haveWidth=haveWidth; state.width=width; state.open=open;\r\n};\r\n\r\n// End Typr.U.js\r\n\r\nreturn Typr\r\n\r\n}\n\n// Custom bundle of woff2otf (https://github.com/arty-name/woff2otf) with tiny-inflate \r\n// (https://github.com/foliojs/tiny-inflate) for use in troika-3d-text. \r\n// Original licenses apply: \r\n// - tiny-inflate: https://github.com/foliojs/tiny-inflate/blob/master/LICENSE (MIT)\r\n// - woff2otf.js: https://github.com/arty-name/woff2otf/blob/master/woff2otf.js (Apache2)\r\n\r\nfunction woff2otfFactory() {\r\n\r\n// Begin tinyInflate\r\nconst tinyInflate = (function() {\r\n  const module = {};\r\n  var TINF_OK = 0;\r\nvar TINF_DATA_ERROR = -3;\r\n\r\nfunction Tree() {\r\n  this.table = new Uint16Array(16);   /* table of code length counts */\r\n  this.trans = new Uint16Array(288);  /* code -> symbol translation table */\r\n}\r\n\r\nfunction Data(source, dest) {\r\n  this.source = source;\r\n  this.sourceIndex = 0;\r\n  this.tag = 0;\r\n  this.bitcount = 0;\r\n  \r\n  this.dest = dest;\r\n  this.destLen = 0;\r\n  \r\n  this.ltree = new Tree();  /* dynamic length/symbol tree */\r\n  this.dtree = new Tree();  /* dynamic distance tree */\r\n}\r\n\r\n/* --------------------------------------------------- *\r\n * -- uninitialized global data (static structures) -- *\r\n * --------------------------------------------------- */\r\n\r\nvar sltree = new Tree();\r\nvar sdtree = new Tree();\r\n\r\n/* extra bits and base tables for length codes */\r\nvar length_bits = new Uint8Array(30);\r\nvar length_base = new Uint16Array(30);\r\n\r\n/* extra bits and base tables for distance codes */\r\nvar dist_bits = new Uint8Array(30);\r\nvar dist_base = new Uint16Array(30);\r\n\r\n/* special ordering of code length codes */\r\nvar clcidx = new Uint8Array([\r\n  16, 17, 18, 0, 8, 7, 9, 6,\r\n  10, 5, 11, 4, 12, 3, 13, 2,\r\n  14, 1, 15\r\n]);\r\n\r\n/* used by tinf_decode_trees, avoids allocations every call */\r\nvar code_tree = new Tree();\r\nvar lengths = new Uint8Array(288 + 32);\r\n\r\n/* ----------------------- *\r\n * -- utility functions -- *\r\n * ----------------------- */\r\n\r\n/* build extra bits and base tables */\r\nfunction tinf_build_bits_base(bits, base, delta, first) {\r\n  var i, sum;\r\n\r\n  /* build bits table */\r\n  for (i = 0; i < delta; ++i) bits[i] = 0;\r\n  for (i = 0; i < 30 - delta; ++i) bits[i + delta] = i / delta | 0;\r\n\r\n  /* build base table */\r\n  for (sum = first, i = 0; i < 30; ++i) {\r\n    base[i] = sum;\r\n    sum += 1 << bits[i];\r\n  }\r\n}\r\n\r\n/* build the fixed huffman trees */\r\nfunction tinf_build_fixed_trees(lt, dt) {\r\n  var i;\r\n\r\n  /* build fixed length tree */\r\n  for (i = 0; i < 7; ++i) lt.table[i] = 0;\r\n\r\n  lt.table[7] = 24;\r\n  lt.table[8] = 152;\r\n  lt.table[9] = 112;\r\n\r\n  for (i = 0; i < 24; ++i) lt.trans[i] = 256 + i;\r\n  for (i = 0; i < 144; ++i) lt.trans[24 + i] = i;\r\n  for (i = 0; i < 8; ++i) lt.trans[24 + 144 + i] = 280 + i;\r\n  for (i = 0; i < 112; ++i) lt.trans[24 + 144 + 8 + i] = 144 + i;\r\n\r\n  /* build fixed distance tree */\r\n  for (i = 0; i < 5; ++i) dt.table[i] = 0;\r\n\r\n  dt.table[5] = 32;\r\n\r\n  for (i = 0; i < 32; ++i) dt.trans[i] = i;\r\n}\r\n\r\n/* given an array of code lengths, build a tree */\r\nvar offs = new Uint16Array(16);\r\n\r\nfunction tinf_build_tree(t, lengths, off, num) {\r\n  var i, sum;\r\n\r\n  /* clear code length count table */\r\n  for (i = 0; i < 16; ++i) t.table[i] = 0;\r\n\r\n  /* scan symbol lengths, and sum code length counts */\r\n  for (i = 0; i < num; ++i) t.table[lengths[off + i]]++;\r\n\r\n  t.table[0] = 0;\r\n\r\n  /* compute offset table for distribution sort */\r\n  for (sum = 0, i = 0; i < 16; ++i) {\r\n    offs[i] = sum;\r\n    sum += t.table[i];\r\n  }\r\n\r\n  /* create code->symbol translation table (symbols sorted by code) */\r\n  for (i = 0; i < num; ++i) {\r\n    if (lengths[off + i]) t.trans[offs[lengths[off + i]]++] = i;\r\n  }\r\n}\r\n\r\n/* ---------------------- *\r\n * -- decode functions -- *\r\n * ---------------------- */\r\n\r\n/* get one bit from source stream */\r\nfunction tinf_getbit(d) {\r\n  /* check if tag is empty */\r\n  if (!d.bitcount--) {\r\n    /* load next tag */\r\n    d.tag = d.source[d.sourceIndex++];\r\n    d.bitcount = 7;\r\n  }\r\n\r\n  /* shift bit out of tag */\r\n  var bit = d.tag & 1;\r\n  d.tag >>>= 1;\r\n\r\n  return bit;\r\n}\r\n\r\n/* read a num bit value from a stream and add base */\r\nfunction tinf_read_bits(d, num, base) {\r\n  if (!num)\r\n    return base;\r\n\r\n  while (d.bitcount < 24) {\r\n    d.tag |= d.source[d.sourceIndex++] << d.bitcount;\r\n    d.bitcount += 8;\r\n  }\r\n\r\n  var val = d.tag & (0xffff >>> (16 - num));\r\n  d.tag >>>= num;\r\n  d.bitcount -= num;\r\n  return val + base;\r\n}\r\n\r\n/* given a data stream and a tree, decode a symbol */\r\nfunction tinf_decode_symbol(d, t) {\r\n  while (d.bitcount < 24) {\r\n    d.tag |= d.source[d.sourceIndex++] << d.bitcount;\r\n    d.bitcount += 8;\r\n  }\r\n  \r\n  var sum = 0, cur = 0, len = 0;\r\n  var tag = d.tag;\r\n\r\n  /* get more bits while code value is above sum */\r\n  do {\r\n    cur = 2 * cur + (tag & 1);\r\n    tag >>>= 1;\r\n    ++len;\r\n\r\n    sum += t.table[len];\r\n    cur -= t.table[len];\r\n  } while (cur >= 0);\r\n  \r\n  d.tag = tag;\r\n  d.bitcount -= len;\r\n\r\n  return t.trans[sum + cur];\r\n}\r\n\r\n/* given a data stream, decode dynamic trees from it */\r\nfunction tinf_decode_trees(d, lt, dt) {\r\n  var hlit, hdist, hclen;\r\n  var i, num, length;\r\n\r\n  /* get 5 bits HLIT (257-286) */\r\n  hlit = tinf_read_bits(d, 5, 257);\r\n\r\n  /* get 5 bits HDIST (1-32) */\r\n  hdist = tinf_read_bits(d, 5, 1);\r\n\r\n  /* get 4 bits HCLEN (4-19) */\r\n  hclen = tinf_read_bits(d, 4, 4);\r\n\r\n  for (i = 0; i < 19; ++i) lengths[i] = 0;\r\n\r\n  /* read code lengths for code length alphabet */\r\n  for (i = 0; i < hclen; ++i) {\r\n    /* get 3 bits code length (0-7) */\r\n    var clen = tinf_read_bits(d, 3, 0);\r\n    lengths[clcidx[i]] = clen;\r\n  }\r\n\r\n  /* build code length tree */\r\n  tinf_build_tree(code_tree, lengths, 0, 19);\r\n\r\n  /* decode code lengths for the dynamic trees */\r\n  for (num = 0; num < hlit + hdist;) {\r\n    var sym = tinf_decode_symbol(d, code_tree);\r\n\r\n    switch (sym) {\r\n      case 16:\r\n        /* copy previous code length 3-6 times (read 2 bits) */\r\n        var prev = lengths[num - 1];\r\n        for (length = tinf_read_bits(d, 2, 3); length; --length) {\r\n          lengths[num++] = prev;\r\n        }\r\n        break;\r\n      case 17:\r\n        /* repeat code length 0 for 3-10 times (read 3 bits) */\r\n        for (length = tinf_read_bits(d, 3, 3); length; --length) {\r\n          lengths[num++] = 0;\r\n        }\r\n        break;\r\n      case 18:\r\n        /* repeat code length 0 for 11-138 times (read 7 bits) */\r\n        for (length = tinf_read_bits(d, 7, 11); length; --length) {\r\n          lengths[num++] = 0;\r\n        }\r\n        break;\r\n      default:\r\n        /* values 0-15 represent the actual code lengths */\r\n        lengths[num++] = sym;\r\n        break;\r\n    }\r\n  }\r\n\r\n  /* build dynamic trees */\r\n  tinf_build_tree(lt, lengths, 0, hlit);\r\n  tinf_build_tree(dt, lengths, hlit, hdist);\r\n}\r\n\r\n/* ----------------------------- *\r\n * -- block inflate functions -- *\r\n * ----------------------------- */\r\n\r\n/* given a stream and two trees, inflate a block of data */\r\nfunction tinf_inflate_block_data(d, lt, dt) {\r\n  while (1) {\r\n    var sym = tinf_decode_symbol(d, lt);\r\n\r\n    /* check for end of block */\r\n    if (sym === 256) {\r\n      return TINF_OK;\r\n    }\r\n\r\n    if (sym < 256) {\r\n      d.dest[d.destLen++] = sym;\r\n    } else {\r\n      var length, dist, offs;\r\n      var i;\r\n\r\n      sym -= 257;\r\n\r\n      /* possibly get more bits from length code */\r\n      length = tinf_read_bits(d, length_bits[sym], length_base[sym]);\r\n\r\n      dist = tinf_decode_symbol(d, dt);\r\n\r\n      /* possibly get more bits from distance code */\r\n      offs = d.destLen - tinf_read_bits(d, dist_bits[dist], dist_base[dist]);\r\n\r\n      /* copy match */\r\n      for (i = offs; i < offs + length; ++i) {\r\n        d.dest[d.destLen++] = d.dest[i];\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\n/* inflate an uncompressed block of data */\r\nfunction tinf_inflate_uncompressed_block(d) {\r\n  var length, invlength;\r\n  var i;\r\n  \r\n  /* unread from bitbuffer */\r\n  while (d.bitcount > 8) {\r\n    d.sourceIndex--;\r\n    d.bitcount -= 8;\r\n  }\r\n\r\n  /* get length */\r\n  length = d.source[d.sourceIndex + 1];\r\n  length = 256 * length + d.source[d.sourceIndex];\r\n\r\n  /* get one's complement of length */\r\n  invlength = d.source[d.sourceIndex + 3];\r\n  invlength = 256 * invlength + d.source[d.sourceIndex + 2];\r\n\r\n  /* check length */\r\n  if (length !== (~invlength & 0x0000ffff))\r\n    return TINF_DATA_ERROR;\r\n\r\n  d.sourceIndex += 4;\r\n\r\n  /* copy block */\r\n  for (i = length; i; --i)\r\n    d.dest[d.destLen++] = d.source[d.sourceIndex++];\r\n\r\n  /* make sure we start next block on a byte boundary */\r\n  d.bitcount = 0;\r\n\r\n  return TINF_OK;\r\n}\r\n\r\n/* inflate stream from source to dest */\r\nfunction tinf_uncompress(source, dest) {\r\n  var d = new Data(source, dest);\r\n  var bfinal, btype, res;\r\n\r\n  do {\r\n    /* read final block flag */\r\n    bfinal = tinf_getbit(d);\r\n\r\n    /* read block type (2 bits) */\r\n    btype = tinf_read_bits(d, 2, 0);\r\n\r\n    /* decompress block */\r\n    switch (btype) {\r\n      case 0:\r\n        /* decompress uncompressed block */\r\n        res = tinf_inflate_uncompressed_block(d);\r\n        break;\r\n      case 1:\r\n        /* decompress block with fixed huffman trees */\r\n        res = tinf_inflate_block_data(d, sltree, sdtree);\r\n        break;\r\n      case 2:\r\n        /* decompress block with dynamic huffman trees */\r\n        tinf_decode_trees(d, d.ltree, d.dtree);\r\n        res = tinf_inflate_block_data(d, d.ltree, d.dtree);\r\n        break;\r\n      default:\r\n        res = TINF_DATA_ERROR;\r\n    }\r\n\r\n    if (res !== TINF_OK)\r\n      throw new Error('Data error');\r\n\r\n  } while (!bfinal);\r\n\r\n  if (d.destLen < d.dest.length) {\r\n    if (typeof d.dest.slice === 'function')\r\n      return d.dest.slice(0, d.destLen);\r\n    else\r\n      return d.dest.subarray(0, d.destLen);\r\n  }\r\n  \r\n  return d.dest;\r\n}\r\n\r\n/* -------------------- *\r\n * -- initialization -- *\r\n * -------------------- */\r\n\r\n/* build fixed huffman trees */\r\ntinf_build_fixed_trees(sltree, sdtree);\r\n\r\n/* build extra bits and base tables */\r\ntinf_build_bits_base(length_bits, length_base, 4, 3);\r\ntinf_build_bits_base(dist_bits, dist_base, 2, 1);\r\n\r\n/* fix a special case */\r\nlength_bits[28] = 0;\r\nlength_base[28] = 258;\r\n\r\nmodule.exports = tinf_uncompress;\r\n\r\n  return module.exports\r\n})();\r\n// End tinyInflate\r\n\r\n// Begin woff2otf.js\r\n/*\r\n Copyright 2012, Steffen Hanikel (https://github.com/hanikesn)\r\n Modified by Artemy Tregubenko, 2014 (https://github.com/arty-name/woff2otf)\r\n Modified by Jason Johnston, 2019 (pako --> tiny-inflate)\r\n \r\n   Licensed under the Apache License, Version 2.0 (the \"License\");\r\n   you may not use this file except in compliance with the License.\r\n   You may obtain a copy of the License at\r\n\r\n       http://www.apache.org/licenses/LICENSE-2.0\r\n\r\n   Unless required by applicable law or agreed to in writing, software\r\n   distributed under the License is distributed on an \"AS IS\" BASIS,\r\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n   See the License for the specific language governing permissions and\r\n   limitations under the License.\r\n\r\n A tool to convert a WOFF back to a TTF/OTF font file, in pure Javascript\r\n*/\r\n\r\nfunction convert_streams(bufferIn, tinyInflate) {\r\n    var dataViewIn = new DataView(bufferIn);\r\n    var offsetIn = 0;\r\n\r\n    function read2() {\r\n        var uint16 = dataViewIn.getUint16(offsetIn);\r\n        offsetIn += 2;\r\n        return uint16;\r\n    }\r\n\r\n    function read4() {\r\n        var uint32 = dataViewIn.getUint32(offsetIn);\r\n        offsetIn += 4;\r\n        return uint32;\r\n    }\r\n\r\n    function write2(uint16) {\r\n        dataViewOut.setUint16(offsetOut, uint16);\r\n        offsetOut += 2;\r\n    }\r\n\r\n    function write4(uint32) {\r\n        dataViewOut.setUint32(offsetOut, uint32);\r\n        offsetOut += 4;\r\n    }\r\n\r\n    var WOFFHeader = {\r\n        signature: read4(),\r\n        flavor: read4(),\r\n        length: read4(),\r\n        numTables: read2(),\r\n        reserved: read2(),\r\n        totalSfntSize: read4(),\r\n        majorVersion: read2(),\r\n        minorVersion: read2(),\r\n        metaOffset: read4(),\r\n        metaLength: read4(),\r\n        metaOrigLength: read4(),\r\n        privOffset: read4(),\r\n        privLength: read4()\r\n    };\r\n\r\n    var entrySelector = 0;\r\n    while (Math.pow(2, entrySelector) <= WOFFHeader.numTables) {\r\n        entrySelector++;\r\n    }\r\n    entrySelector--;\r\n\r\n    var searchRange = Math.pow(2, entrySelector) * 16;\r\n    var rangeShift = WOFFHeader.numTables * 16 - searchRange;\r\n\r\n    var offset = 4 + 2 + 2 + 2 + 2;\r\n    var TableDirectoryEntries = [];\r\n    for (var i = 0; i < WOFFHeader.numTables; i++) {\r\n        TableDirectoryEntries.push({\r\n            tag: read4(),\r\n            offset: read4(),\r\n            compLength: read4(),\r\n            origLength: read4(),\r\n            origChecksum: read4()\r\n        });\r\n        offset += 4 * 4;\r\n    }\r\n\r\n    var arrayOut = new Uint8Array(\r\n        4 + 2 + 2 + 2 + 2 +\r\n        TableDirectoryEntries.length * (4 + 4 + 4 + 4) +\r\n        TableDirectoryEntries.reduce(function(acc, entry) { return acc + entry.origLength + 4; }, 0)\r\n    );\r\n    var bufferOut = arrayOut.buffer;\r\n    var dataViewOut = new DataView(bufferOut);\r\n    var offsetOut = 0;\r\n\r\n    write4(WOFFHeader.flavor);\r\n    write2(WOFFHeader.numTables);\r\n    write2(searchRange);\r\n    write2(entrySelector);\r\n    write2(rangeShift);\r\n\r\n    TableDirectoryEntries.forEach(function(TableDirectoryEntry) {\r\n        write4(TableDirectoryEntry.tag);\r\n        write4(TableDirectoryEntry.origChecksum);\r\n        write4(offset);\r\n        write4(TableDirectoryEntry.origLength);\r\n\r\n        TableDirectoryEntry.outOffset = offset;\r\n        offset += TableDirectoryEntry.origLength;\r\n        if ((offset % 4) != 0) {\r\n            offset += 4 - (offset % 4);\r\n        }\r\n    });\r\n\r\n    var size;\r\n\r\n    TableDirectoryEntries.forEach(function(TableDirectoryEntry) {\r\n        var compressedData = bufferIn.slice(\r\n            TableDirectoryEntry.offset,\r\n            TableDirectoryEntry.offset + TableDirectoryEntry.compLength\r\n        );\r\n\r\n        if (TableDirectoryEntry.compLength != TableDirectoryEntry.origLength) {\r\n            var uncompressedData = new Uint8Array(TableDirectoryEntry.origLength);\r\n            tinyInflate(\r\n              new Uint8Array(compressedData, 2), //skip deflate header\r\n              uncompressedData\r\n            );\r\n        } else {\r\n            uncompressedData = new Uint8Array(compressedData);\r\n        }\r\n\r\n        arrayOut.set(uncompressedData, TableDirectoryEntry.outOffset);\r\n        offset = TableDirectoryEntry.outOffset + TableDirectoryEntry.origLength;\r\n\r\n        var padding = 0;\r\n        if ((offset % 4) != 0) {\r\n            padding = 4 - (offset % 4);\r\n        }\r\n        arrayOut.set(\r\n            new Uint8Array(padding).buffer,\r\n            TableDirectoryEntry.outOffset + TableDirectoryEntry.origLength\r\n        );\r\n\r\n        size = offset + padding;\r\n    });\r\n\r\n    return bufferOut.slice(0, size);\r\n}\r\n\r\n// End woff2otf.js\r\n\r\nreturn function(buffer) {\r\n  return convert_streams(buffer, tinyInflate)\r\n}\r\n\r\n}\n\n/**\r\n * An adapter that allows Typr.js to be used as if it were (a subset of) the OpenType.js API.\r\n * Also adds support for WOFF files (not WOFF2).\r\n */\r\n\r\nfunction parserFactory(Typr, woff2otf) {\r\n  const cmdArgLengths = {\r\n    M: 2,\r\n    L: 2,\r\n    Q: 4,\r\n    C: 6,\r\n    Z: 0\r\n  };\r\n\r\n  function wrapFontObj(typrFont) {\r\n    const glyphMap = Object.create(null);\r\n\r\n    const fontObj = {\r\n      unitsPerEm: typrFont.head.unitsPerEm,\r\n      ascender: typrFont.hhea.ascender,\r\n      descender: typrFont.hhea.descender,\r\n      forEachGlyph(text, fontSize, letterSpacing, callback) {\r\n        let glyphX = 0;\r\n        const fontScale = 1 / fontObj.unitsPerEm * fontSize;\r\n\r\n        const glyphIndices = Typr.U.stringToGlyphs(typrFont, text);\r\n        let charIndex = 0;\r\n        glyphIndices.forEach(glyphIndex => {\r\n          // Typr returns a glyph index per string codepoint, with -1s in place of those that\r\n          // were omitted due to ligature substitution. So we can track original index in the\r\n          // string via simple increment, and skip everything else when seeing a -1.\r\n          if (glyphIndex !== -1) {\r\n            let glyphObj = glyphMap[glyphIndex];\r\n            if (!glyphObj) {\r\n              const {cmds, crds} = Typr.U.glyphToPath(typrFont, glyphIndex);\r\n\r\n              // Find extents - Glyf gives this in metadata but not CFF, and Typr doesn't\r\n              // normalize the two, so it's simplest just to iterate ourselves.\r\n              let xMin, yMin, xMax, yMax;\r\n              if (crds.length) {\r\n                xMin = yMin = Infinity;\r\n                xMax = yMax = -Infinity;\r\n                for (let i = 0, len = crds.length; i < len; i += 2) {\r\n                  let x = crds[i];\r\n                  let y = crds[i + 1];\r\n                  if (x < xMin) xMin = x;\r\n                  if (y < yMin) yMin = y;\r\n                  if (x > xMax) xMax = x;\r\n                  if (y > yMax) yMax = y;\r\n                }\r\n              } else {\r\n                xMin = xMax = yMin = yMax = 0;\r\n              }\r\n\r\n              glyphObj = glyphMap[glyphIndex] = {\r\n                index: glyphIndex,\r\n                advanceWidth: typrFont.hmtx.aWidth[glyphIndex],\r\n                xMin,\r\n                yMin,\r\n                xMax,\r\n                yMax,\r\n                pathCommandCount: cmds.length,\r\n                forEachPathCommand(callback) {\r\n                  let argsIndex = 0;\r\n                  const argsArray = [];\r\n                  for (let i = 0, len = cmds.length; i < len; i++) {\r\n                    const numArgs = cmdArgLengths[cmds[i]];\r\n                    argsArray.length = 1 + numArgs;\r\n                    argsArray[0] = cmds[i];\r\n                    for (let j = 1; j <= numArgs; j++) {\r\n                      argsArray[j] = crds[argsIndex++];\r\n                    }\r\n                    callback.apply(null, argsArray);\r\n                  }\r\n                }\r\n              };\r\n            }\r\n\r\n            callback.call(null, glyphObj, glyphX, charIndex);\r\n\r\n            if (glyphObj.advanceWidth) {\r\n              glyphX += glyphObj.advanceWidth * fontScale;\r\n            }\r\n            if (letterSpacing) {\r\n              glyphX += letterSpacing * fontSize;\r\n            }\r\n          }\r\n          charIndex += (text.codePointAt(charIndex) > 0xffff ? 2 : 1);\r\n        });\r\n        return glyphX\r\n      }\r\n    };\r\n\r\n    return fontObj\r\n  }\r\n\r\n  return function parse(buffer) {\r\n    // Look to see if we have a WOFF file and convert it if so:\r\n    const peek = new Uint8Array(buffer, 0, 4);\r\n    const tag = Typr._bin.readASCII(peek, 0, 4);\r\n    if (tag === 'wOFF') {\r\n      buffer = woff2otf(buffer);\r\n    } else if (tag === 'wOF2') {\r\n      throw new Error('woff2 fonts not supported')\r\n    }\r\n    return wrapFontObj(Typr.parse(buffer)[0])\r\n  }\r\n}\r\n\r\n\r\nconst workerModule = /*#__PURE__*/defineWorkerModule({\r\n  name: 'Typr Font Parser',\r\n  dependencies: [typrFactory, woff2otfFactory, parserFactory],\r\n  init(typrFactory, woff2otfFactory, parserFactory) {\r\n    const Typr = typrFactory();\r\n    const woff2otf = woff2otfFactory();\r\n    return parserFactory(Typr, woff2otf)\r\n  }\r\n});\n\n//import fontParser from './FontParser_OpenType.js'\r\n\r\n\r\nconst CONFIG = {\r\n  defaultFontURL: 'https://fonts.gstatic.com/s/roboto/v18/KFOmCnqEu92Fr1Mu4mxM.woff', //Roboto Regular\r\n  sdfGlyphSize: 64,\r\n  sdfMargin: 1 / 16,\r\n  sdfExponent: 9,\r\n  textureWidth: 2048\r\n};\r\nconst tempColor = /*#__PURE__*/new Color();\r\nlet hasRequested = false;\r\n\r\n/**\r\n * Customizes the text builder configuration. This must be called prior to the first font processing\r\n * request, and applies to all fonts.\r\n *\r\n * @param {String} config.defaultFontURL - The URL of the default font to use for text processing\r\n *                 requests, in case none is specified or the specifiede font fails to load or parse.\r\n *                 Defaults to \"Roboto Regular\" from Google Fonts.\r\n * @param {Number} config.sdfGlyphSize - The default size of each glyph's SDF (signed distance field)\r\n *                 texture used for rendering. Must be a power-of-two number, and applies to all fonts,\r\n *                 but note that this can also be overridden per call to `getTextRenderInfo()`.\r\n *                 Larger sizes can improve the quality of glyph rendering by increasing the sharpness\r\n *                 of corners and preventing loss of very thin lines, at the expense of memory. Defaults\r\n *                 to 64 which is generally a good balance of size and quality.\r\n * @param {Number} config.sdfExponent - The exponent used when encoding the SDF values. A higher exponent\r\n *                 shifts the encoded 8-bit values to achieve higher precision/accuracy at texels nearer\r\n *                 the glyph's path, with lower precision further away. Defaults to 9.\r\n * @param {Number} config.sdfMargin - How much space to reserve in the SDF as margin outside the glyph's\r\n *                 path, as a percentage of the SDF width. A larger margin increases the quality of\r\n *                 extruded glyph outlines, but decreases the precision available for the glyph itself.\r\n *                 Defaults to 1/16th of the glyph size.\r\n * @param {Number} config.textureWidth - The width of the SDF texture; must be a power of 2. Defaults to\r\n *                 2048 which is a safe maximum texture dimension according to the stats at\r\n *                 https://webglstats.com/webgl/parameter/MAX_TEXTURE_SIZE and should allow for a\r\n *                 reasonably large number of glyphs (default glyph size of 64 and safe texture size of\r\n *                 2048^2 allows for 1024 glyphs.) This can be increased if you need to increase the\r\n *                 glyph size and/or have an extraordinary number of glyphs.\r\n */\r\nfunction configureTextBuilder(config) {\r\n  if (hasRequested) {\r\n    console.warn('configureTextBuilder called after first font request; will be ignored.');\r\n  } else {\r\n    assign(CONFIG, config);\r\n  }\r\n}\r\n\r\n/**\r\n * Repository for all font SDF atlas textures\r\n *\r\n *   {\r\n *     [font]: {\r\n *       sdfTexture: DataTexture\r\n *     }\r\n *   }\r\n */\r\nconst atlases = Object.create(null);\r\n\r\n/**\r\n * @typedef {object} TroikaTextRenderInfo - Format of the result from `getTextRenderInfo`.\r\n * @property {object} parameters - The normalized input arguments to the render call.\r\n * @property {DataTexture} sdfTexture - The SDF atlas texture.\r\n * @property {number} sdfGlyphSize - The size of each glyph's SDF; see `configureTextBuilder`.\r\n * @property {number} sdfExponent - The exponent used in encoding the SDF's values; see `configureTextBuilder`.\r\n * @property {Float32Array} glyphBounds - List of [minX, minY, maxX, maxY] quad bounds for each glyph.\r\n * @property {Float32Array} glyphAtlasIndices - List holding each glyph's index in the SDF atlas.\r\n * @property {Uint8Array} [glyphColors] - List holding each glyph's [r, g, b] color, if `colorRanges` was supplied.\r\n * @property {Float32Array} [caretPositions] - A list of caret positions for all glyphs; this is\r\n *           the bottom [x,y] of the cursor position before each char, plus one after the last char.\r\n * @property {number} [caretHeight] - An appropriate height for all selection carets.\r\n * @property {number} ascender - The font's ascender metric.\r\n * @property {number} descender - The font's descender metric.\r\n * @property {number} lineHeight - The final computed lineHeight measurement.\r\n * @property {number} topBaseline - The y position of the top line's baseline.\r\n * @property {Array<number>} blockBounds - The total [minX, minY, maxX, maxY] rect of the whole text block;\r\n *           this can include extra vertical space beyond the visible glyphs due to lineHeight, and is\r\n *           equivalent to the dimensions of a block-level text element in CSS.\r\n * @property {Array<number>} visibleBounds -\r\n * @property {Array<number>} totalBounds - DEPRECATED; use blockBounds instead.\r\n * @property {Array<number>} totalBlockSize - DEPRECATED; use blockBounds instead\r\n * @property {Array<number>} chunkedBounds - List of bounding rects for each consecutive set of N glyphs,\r\n *           in the format `{start:N, end:N, rect:[minX, minY, maxX, maxY]}`.\r\n * @property {object} timings - Timing info for various parts of the rendering logic including SDF\r\n *           generation, layout, etc.\r\n * @frozen\r\n */\r\n\r\n/**\r\n * @callback getTextRenderInfo~callback\r\n * @param {TroikaTextRenderInfo} textRenderInfo\r\n */\r\n\r\n/**\r\n * Main entry point for requesting the data needed to render a text string with given font parameters.\r\n * This is an asynchronous call, performing most of the logic in a web worker thread.\r\n * @param {object} args\r\n * @param {getTextRenderInfo~callback} callback\r\n */\r\nfunction getTextRenderInfo(args, callback) {\r\n  hasRequested = true;\r\n  args = assign({}, args);\r\n\r\n  // Apply default font here to avoid a 'null' atlas, and convert relative\r\n  // URLs to absolute so they can be resolved in the worker\r\n  args.font = toAbsoluteURL(args.font || CONFIG.defaultFontURL);\r\n\r\n  // Normalize text to a string\r\n  args.text = '' + args.text;\r\n\r\n  args.sdfGlyphSize = args.sdfGlyphSize || CONFIG.sdfGlyphSize;\r\n\r\n  // Normalize colors\r\n  if (args.colorRanges != null) {\r\n    let colors = {};\r\n    for (let key in args.colorRanges) {\r\n      if (args.colorRanges.hasOwnProperty(key)) {\r\n        let val = args.colorRanges[key];\r\n        if (typeof val !== 'number') {\r\n          val = tempColor.set(val).getHex();\r\n        }\r\n        colors[key] = val;\r\n      }\r\n    }\r\n    args.colorRanges = colors;\r\n  }\r\n\r\n  Object.freeze(args);\r\n\r\n  // Init the atlas for this font if needed\r\n  const {textureWidth, sdfExponent} = CONFIG;\r\n  const {sdfGlyphSize} = args;\r\n  let atlasKey = `${args.font}@${sdfGlyphSize}`;\r\n  let atlas = atlases[atlasKey];\r\n  if (!atlas) {\r\n    atlas = atlases[atlasKey] = {\r\n      sdfTexture: new DataTexture(\r\n        new Uint8Array(sdfGlyphSize * textureWidth),\r\n        textureWidth,\r\n        sdfGlyphSize,\r\n        LuminanceFormat,\r\n        undefined,\r\n        undefined,\r\n        undefined,\r\n        undefined,\r\n        LinearFilter,\r\n        LinearFilter\r\n      )\r\n    };\r\n    atlas.sdfTexture.font = args.font;\r\n  }\r\n\r\n  // Issue request to the FontProcessor in the worker\r\n  processInWorker(args).then(result => {\r\n    // If the response has newGlyphs, copy them into the atlas texture at the specified indices\r\n    if (result.newGlyphSDFs) {\r\n      result.newGlyphSDFs.forEach(({textureData, atlasIndex}) => {\r\n        const texImg = atlas.sdfTexture.image;\r\n\r\n        // Grow the texture by power of 2 if needed\r\n        while (texImg.data.length < (atlasIndex + 1) * sdfGlyphSize * sdfGlyphSize) {\r\n          const biggerArray = new Uint8Array(texImg.data.length * 2);\r\n          biggerArray.set(texImg.data);\r\n          texImg.data = biggerArray;\r\n          texImg.height *= 2;\r\n        }\r\n\r\n        // Insert the new glyph's data into the full texture image at the correct offsets\r\n        const cols = texImg.width / sdfGlyphSize;\r\n        const baseStartIndex = texImg.width * sdfGlyphSize * Math.floor(atlasIndex / cols) //full rows\r\n          + (atlasIndex % cols) * sdfGlyphSize; //partial row\r\n        for (let y = 0; y < sdfGlyphSize; y++) {\r\n          const srcStartIndex = y * sdfGlyphSize;\r\n          const rowStartIndex = baseStartIndex + (y * texImg.width);\r\n          for (let x = 0; x < sdfGlyphSize; x++) {\r\n            texImg.data[rowStartIndex + x] = textureData[srcStartIndex + x];\r\n          }\r\n        }\r\n      });\r\n      atlas.sdfTexture.needsUpdate = true;\r\n    }\r\n\r\n    // Invoke callback with the text layout arrays and updated texture\r\n    callback(Object.freeze({\r\n      parameters: args,\r\n      sdfTexture: atlas.sdfTexture,\r\n      sdfGlyphSize,\r\n      sdfExponent,\r\n      glyphBounds: result.glyphBounds,\r\n      glyphAtlasIndices: result.glyphAtlasIndices,\r\n      glyphColors: result.glyphColors,\r\n      caretPositions: result.caretPositions,\r\n      caretHeight: result.caretHeight,\r\n      chunkedBounds: result.chunkedBounds,\r\n      ascender: result.ascender,\r\n      descender: result.descender,\r\n      lineHeight: result.lineHeight,\r\n      topBaseline: result.topBaseline,\r\n      blockBounds: result.blockBounds,\r\n      visibleBounds: result.visibleBounds,\r\n      timings: result.timings,\r\n      get totalBounds() {\r\n        console.log('totalBounds deprecated, use blockBounds instead');\r\n        return result.blockBounds\r\n      },\r\n      get totalBlockSize() {\r\n        console.log('totalBlockSize deprecated, use blockBounds instead');\r\n        const [x0, y0, x1, y1] = result.blockBounds;\r\n        return [x1 - x0, y1 - y0]\r\n      }\r\n    }));\r\n  });\r\n}\r\n\r\n\r\n/**\r\n * Preload a given font and optionally pre-generate glyph SDFs for one or more character sequences.\r\n * This can be useful to avoid long pauses when first showing text in a scene, by preloading the\r\n * needed fonts and glyphs up front along with other assets.\r\n *\r\n * @param {object} options\r\n * @param {string} options.font - URL of the font file to preload. If not given, the default font will\r\n *        be loaded.\r\n * @param {string|string[]} options.characters - One or more character sequences for which to pre-\r\n *        generate glyph SDFs. Note that this will honor ligature substitution, so you may need\r\n *        to specify ligature sequences in addition to their individual characters to get all\r\n *        possible glyphs, e.g. `[\"t\", \"h\", \"th\"]` to get the \"t\" and \"h\" glyphs plus the \"th\" ligature.\r\n * @param {number} options.sdfGlyphSize - The size at which to prerender the SDF textures for the\r\n *        specified `characters`.\r\n * @param {function} callback - A function that will be called when the preloading is complete.\r\n */\r\nfunction preloadFont({font, characters, sdfGlyphSize}, callback) {\r\n  let text = Array.isArray(characters) ? characters.join('\\n') : '' + characters;\r\n  getTextRenderInfo({ font, sdfGlyphSize, text }, callback);\r\n}\r\n\r\n\r\n// Local assign impl so we don't have to import troika-core\r\nfunction assign(toObj, fromObj) {\r\n  for (let key in fromObj) {\r\n    if (fromObj.hasOwnProperty(key)) {\r\n      toObj[key] = fromObj[key];\r\n    }\r\n  }\r\n  return toObj\r\n}\r\n\r\n// Utility for making URLs absolute\r\nlet linkEl;\r\nfunction toAbsoluteURL(path) {\r\n  if (!linkEl) {\r\n    linkEl = typeof document === 'undefined' ? {} : document.createElement('a');\r\n  }\r\n  linkEl.href = path;\r\n  return linkEl.href\r\n}\r\n\r\n\r\nconst fontProcessorWorkerModule = /*#__PURE__*/defineWorkerModule({\r\n  name: 'FontProcessor',\r\n  dependencies: [\r\n    CONFIG,\r\n    workerModule,\r\n    createGlyphSegmentsIndex,\r\n    createSDFGenerator,\r\n    createFontProcessor\r\n  ],\r\n  init(config, fontParser, createGlyphSegmentsIndex, createSDFGenerator, createFontProcessor) {\r\n    const {sdfExponent, sdfMargin, defaultFontURL} = config;\r\n    const sdfGenerator = createSDFGenerator(createGlyphSegmentsIndex, { sdfExponent, sdfMargin });\r\n    return createFontProcessor(fontParser, sdfGenerator, { defaultFontURL })\r\n  }\r\n});\r\n\r\nconst processInWorker = /*#__PURE__*/defineWorkerModule({\r\n  name: 'TextBuilder',\r\n  dependencies: [fontProcessorWorkerModule, ThenableWorkerModule],\r\n  init(fontProcessor, Thenable) {\r\n    return function(args) {\r\n      const thenable = new Thenable();\r\n      fontProcessor.process(args, thenable.resolve);\r\n      return thenable\r\n    }\r\n  },\r\n  getTransferables(result) {\r\n    // Mark array buffers as transferable to avoid cloning during postMessage\r\n    const transferables = [\r\n      result.glyphBounds.buffer,\r\n      result.glyphAtlasIndices.buffer\r\n    ];\r\n    if (result.caretPositions) {\r\n      transferables.push(result.caretPositions.buffer);\r\n    }\r\n    if (result.newGlyphSDFs) {\r\n      result.newGlyphSDFs.forEach(d => {\r\n        transferables.push(d.textureData.buffer);\r\n      });\r\n    }\r\n    return transferables\r\n  }\r\n});\n\nconst GlyphsGeometry = /*#__PURE__*/(() => {\r\n\r\n  const templateGeometries = {};\r\n  function getTemplateGeometry(detail) {\r\n    let geom = templateGeometries[detail];\r\n    if (!geom) {\r\n      geom = templateGeometries[detail] = new PlaneBufferGeometry(1, 1, detail, detail).translate(0.5, 0.5, 0);\r\n    }\r\n    return geom\r\n  }\r\n  const tempVec3 = new Vector3();\r\n\r\n  const glyphBoundsAttrName = 'aTroikaGlyphBounds';\r\n  const glyphIndexAttrName = 'aTroikaGlyphIndex';\r\n  const glyphColorAttrName = 'aTroikaGlyphColor';\r\n\r\n  /**\r\n  @class GlyphsGeometry\r\n\r\n  A specialized Geometry for rendering a set of text glyphs. Uses InstancedBufferGeometry to\r\n  render the glyphs using GPU instancing of a single quad, rather than constructing a whole\r\n  geometry with vertices, for much smaller attribute arraybuffers according to this math:\r\n\r\n    Where N = number of glyphs...\r\n\r\n    Instanced:\r\n    - position: 4 * 3\r\n    - index: 2 * 3\r\n    - normal: 4 * 3\r\n    - uv: 4 * 2\r\n    - glyph x/y bounds: N * 4\r\n    - glyph indices: N * 1\r\n    = 5N + 38\r\n\r\n    Non-instanced:\r\n    - position: N * 4 * 3\r\n    - index: N * 2 * 3\r\n    - normal: N * 4 * 3\r\n    - uv: N * 4 * 2\r\n    - glyph indices: N * 1\r\n    = 39N\r\n\r\n  A downside of this is the rare-but-possible lack of the instanced arrays extension,\r\n  which we could potentially work around with a fallback non-instanced implementation.\r\n\r\n  */\r\n  class GlyphsGeometry extends InstancedBufferGeometry {\r\n    constructor() {\r\n      super();\r\n\r\n      this.detail = 1;\r\n\r\n      // Define groups for rendering text outline as a separate pass; these will only\r\n      // be used when the `material` getter returns an array, i.e. outlineWidth > 0.\r\n      this.groups = [\r\n        {start: 0, count: Infinity, materialIndex: 0},\r\n        {start: 0, count: Infinity, materialIndex: 1}\r\n      ];\r\n\r\n      // Preallocate zero-radius bounding sphere\r\n      this.boundingSphere = new Sphere();\r\n      this.boundingBox = new Box3();\r\n    }\r\n\r\n    computeBoundingSphere () {\r\n      // No-op; we'll sync the boundingSphere proactively in `updateGlyphs`.\r\n    }\r\n\r\n    computeBoundingBox() {\r\n      // No-op; we'll sync the boundingBox proactively in `updateGlyphs`.\r\n    }\r\n\r\n    set detail(detail) {\r\n      if (detail !== this._detail) {\r\n        this._detail = detail;\r\n        if (typeof detail !== 'number' || detail < 1) {\r\n          detail = 1;\r\n        }\r\n        let tpl = getTemplateGeometry(detail)\r\n        ;['position', 'normal', 'uv'].forEach(attr => {\r\n          this.attributes[attr] = tpl.attributes[attr].clone();\r\n        });\r\n        this.setIndex(tpl.getIndex().clone());\r\n      }\r\n    }\r\n    get detail() {\r\n      return this._detail\r\n    }\r\n\r\n    /**\r\n     * Update the geometry for a new set of glyphs.\r\n     * @param {Float32Array} glyphBounds - An array holding the planar bounds for all glyphs\r\n     *        to be rendered, 4 entries for each glyph: x1,x2,y1,y1\r\n     * @param {Float32Array} glyphAtlasIndices - An array holding the index of each glyph within\r\n     *        the SDF atlas texture.\r\n     * @param {Array} blockBounds - An array holding the [minX, minY, maxX, maxY] across all glyphs\r\n     * @param {Array} [chunkedBounds] - An array of objects describing bounds for each chunk of N\r\n     *        consecutive glyphs: `{start:N, end:N, rect:[minX, minY, maxX, maxY]}`. This can be\r\n     *        used with `applyClipRect` to choose an optimized `instanceCount`.\r\n     * @param {Uint8Array} [glyphColors] - An array holding r,g,b values for each glyph.\r\n     */\r\n    updateGlyphs(glyphBounds, glyphAtlasIndices, blockBounds, chunkedBounds, glyphColors) {\r\n      // Update the instance attributes\r\n      updateBufferAttr(this, glyphBoundsAttrName, glyphBounds, 4);\r\n      updateBufferAttr(this, glyphIndexAttrName, glyphAtlasIndices, 1);\r\n      updateBufferAttr(this, glyphColorAttrName, glyphColors, 3);\r\n      this._chunkedBounds = chunkedBounds;\r\n      setInstanceCount(this, glyphAtlasIndices.length);\r\n\r\n      // Update the boundingSphere based on the total bounds\r\n      const sphere = this.boundingSphere;\r\n      sphere.center.set(\r\n        (blockBounds[0] + blockBounds[2]) / 2,\r\n        (blockBounds[1] + blockBounds[3]) / 2,\r\n        0\r\n      );\r\n      sphere.radius = sphere.center.distanceTo(tempVec3.set(blockBounds[0], blockBounds[1], 0));\r\n\r\n      // Update the boundingBox based on the total bounds\r\n      const box = this.boundingBox;\r\n      box.min.set(blockBounds[0], blockBounds[1], 0);\r\n      box.max.set(blockBounds[2], blockBounds[3], 0);\r\n    }\r\n\r\n    /**\r\n     * Given a clipping rect, and the chunkedBounds from the last updateGlyphs call, choose the lowest\r\n     * `instanceCount` that will show all glyphs within the clipped view. This is an optimization\r\n     * for long blocks of text that are clipped, to skip vertex shader evaluation for glyphs that would\r\n     * be clipped anyway.\r\n     *\r\n     * Note that since `drawElementsInstanced[ANGLE]` only accepts an instance count and not a starting\r\n     * offset, this optimization becomes less effective as the clipRect moves closer to the end of the\r\n     * text block. We could fix that by switching from instancing to a full geometry with a drawRange,\r\n     * but at the expense of much larger attribute buffers (see classdoc above.)\r\n     *\r\n     * @param {Vector4} clipRect\r\n     */\r\n    applyClipRect(clipRect) {\r\n      let count = this.getAttribute(glyphIndexAttrName).count;\r\n      let chunks = this._chunkedBounds;\r\n      if (chunks) {\r\n        for (let i = chunks.length; i--;) {\r\n          count = chunks[i].end;\r\n          let rect = chunks[i].rect;\r\n          // note: both rects are l-b-r-t\r\n          if (rect[1] < clipRect.w && rect[3] > clipRect.y && rect[0] < clipRect.z && rect[2] > clipRect.x) {\r\n            break\r\n          }\r\n        }\r\n      }\r\n      setInstanceCount(this, count);\r\n    }\r\n  }\r\n\r\n  // Compat for pre r109:\r\n  if (!GlyphsGeometry.prototype.setAttribute) {\r\n    GlyphsGeometry.prototype.setAttribute = function(name, attribute) {\r\n      this.attributes[ name ] = attribute;\r\n      return this\r\n    };\r\n  }\r\n\r\n\r\n  function updateBufferAttr(geom, attrName, newArray, itemSize) {\r\n    const attr = geom.getAttribute(attrName);\r\n    if (newArray) {\r\n      // If length isn't changing, just update the attribute's array data\r\n      if (attr && attr.array.length === newArray.length) {\r\n        attr.array.set(newArray);\r\n        attr.needsUpdate = true;\r\n      } else {\r\n        geom.setAttribute(attrName, new InstancedBufferAttribute(newArray, itemSize));\r\n        // If the new attribute has a different size, we also have to (as of r117) manually clear the\r\n        // internal cached max instance count. See https://github.com/mrdoob/three.js/issues/19706\r\n        // It's unclear if this is a threejs bug or a truly unsupported scenario; discussion in\r\n        // that ticket is ambiguous as to whether replacing a BufferAttribute with one of a\r\n        // different size is supported, but https://github.com/mrdoob/three.js/pull/17418 strongly\r\n        // implies it should be supported. It's possible we need to\r\n        delete geom._maxInstanceCount; //for r117+, could be fragile\r\n        geom.dispose(); //for r118+, more robust feeling, but more heavy-handed than I'd like\r\n      }\r\n    } else if (attr) {\r\n      geom.deleteAttribute(attrName);\r\n    }\r\n  }\r\n\r\n  // Handle maxInstancedCount -> instanceCount rename that happened in three r117\r\n  function setInstanceCount(geom, count) {\r\n    geom[geom.hasOwnProperty('instanceCount') ? 'instanceCount' : 'maxInstancedCount'] = count;\r\n  }\r\n\r\n  return GlyphsGeometry\r\n})();\n\n// language=GLSL\r\nconst VERTEX_DEFS = `\r\nuniform vec2 uTroikaSDFTextureSize;\r\nuniform float uTroikaSDFGlyphSize;\r\nuniform vec4 uTroikaTotalBounds;\r\nuniform vec4 uTroikaClipRect;\r\nuniform mat3 uTroikaOrient;\r\nuniform bool uTroikaUseGlyphColors;\r\nuniform float uTroikaDistanceOffset;\r\nattribute vec4 aTroikaGlyphBounds;\r\nattribute float aTroikaGlyphIndex;\r\nattribute vec3 aTroikaGlyphColor;\r\nvarying vec2 vTroikaGlyphUV;\r\nvarying vec4 vTroikaTextureUVBounds;\r\nvarying vec3 vTroikaGlyphColor;\r\nvarying vec2 vTroikaGlyphDimensions;\r\n`;\r\n\r\n// language=GLSL prefix=\"void main() {\" suffix=\"}\"\r\nconst VERTEX_TRANSFORM = `\r\nvec4 bounds = aTroikaGlyphBounds;\r\nvec4 outlineBounds = vec4(bounds.xy - uTroikaDistanceOffset, bounds.zw + uTroikaDistanceOffset);\r\nvec4 clippedBounds = vec4(\r\n  clamp(outlineBounds.xy, uTroikaClipRect.xy, uTroikaClipRect.zw),\r\n  clamp(outlineBounds.zw, uTroikaClipRect.xy, uTroikaClipRect.zw)\r\n);\r\nvec2 clippedXY = (mix(clippedBounds.xy, clippedBounds.zw, position.xy) - bounds.xy) / (bounds.zw - bounds.xy);\r\n\r\nposition.xy = mix(bounds.xy, bounds.zw, clippedXY);\r\n\r\nuv = (position.xy - uTroikaTotalBounds.xy) / (uTroikaTotalBounds.zw - uTroikaTotalBounds.xy);\r\n\r\nposition = uTroikaOrient * position;\r\nnormal = uTroikaOrient * normal;\r\n\r\nvTroikaGlyphUV = clippedXY.xy;\r\nvTroikaGlyphDimensions = vec2(bounds[2] - bounds[0], bounds[3] - bounds[1]);\r\n\r\n${''/* NOTE: it seems important to calculate the glyph's bounding texture UVs here in the\r\n  vertex shader, rather than in the fragment shader, as the latter gives strange artifacts\r\n  on some glyphs (those in the leftmost texture column) on some systems. The exact reason\r\n  isn't understood but doing this here, then mix()-ing in the fragment shader, seems to work. */}\r\nfloat txCols = uTroikaSDFTextureSize.x / uTroikaSDFGlyphSize;\r\nvec2 txUvPerGlyph = uTroikaSDFGlyphSize / uTroikaSDFTextureSize;\r\nvec2 txStartUV = txUvPerGlyph * vec2(\r\n  mod(aTroikaGlyphIndex, txCols),\r\n  floor(aTroikaGlyphIndex / txCols)\r\n);\r\nvTroikaTextureUVBounds = vec4(txStartUV, vec2(txStartUV) + txUvPerGlyph);\r\n`;\r\n\r\n// language=GLSL\r\nconst FRAGMENT_DEFS = `\r\nuniform sampler2D uTroikaSDFTexture;\r\nuniform vec2 uTroikaSDFTextureSize;\r\nuniform float uTroikaSDFGlyphSize;\r\nuniform float uTroikaSDFExponent;\r\nuniform float uTroikaDistanceOffset;\r\nuniform bool uTroikaSDFDebug;\r\nvarying vec2 vTroikaGlyphUV;\r\nvarying vec4 vTroikaTextureUVBounds;\r\nvarying vec2 vTroikaGlyphDimensions;\r\n\r\nfloat troikaSdfValueToSignedDistance(float alpha) {\r\n  // Inverse of encoding in SDFGenerator.js\r\n  ${''/* TODO - there's some slight inaccuracy here when dealing with interpolated alpha values; those\r\n    are linearly interpolated where the encoding is exponential. Look into improving this by rounding\r\n    to nearest 2 whole texels, decoding those exponential values, and linearly interpolating the result.\r\n  */}\r\n  float maxDimension = max(vTroikaGlyphDimensions.x, vTroikaGlyphDimensions.y);\r\n  float absDist = (1.0 - pow(2.0 * (alpha > 0.5 ? 1.0 - alpha : alpha), 1.0 / uTroikaSDFExponent)) * maxDimension;\r\n  float signedDist = absDist * (alpha > 0.5 ? -1.0 : 1.0);\r\n  return signedDist;\r\n}\r\n\r\nfloat troikaGlyphUvToSdfValue(vec2 glyphUV) {\r\n  vec2 textureUV = mix(vTroikaTextureUVBounds.xy, vTroikaTextureUVBounds.zw, glyphUV);\r\n  return texture2D(uTroikaSDFTexture, textureUV).r;\r\n}\r\n\r\nfloat troikaGlyphUvToDistance(vec2 uv) {\r\n  return troikaSdfValueToSignedDistance(troikaGlyphUvToSdfValue(uv));\r\n}\r\n\r\nfloat troikaGetTextAlpha(float distanceOffset) {\r\n  vec2 clampedGlyphUV = clamp(vTroikaGlyphUV, 0.5 / uTroikaSDFGlyphSize, 1.0 - 0.5 / uTroikaSDFGlyphSize);\r\n  float distance = troikaGlyphUvToDistance(clampedGlyphUV);\r\n    \r\n  // Extrapolate distance when outside bounds:\r\n  distance += clampedGlyphUV == vTroikaGlyphUV ? 0.0 : \r\n    length((vTroikaGlyphUV - clampedGlyphUV) * vTroikaGlyphDimensions);\r\n\r\n  ${''/* \r\n  // TODO more refined extrapolated distance by adjusting for angle of gradient at edge...\r\n  // This has potential but currently gives very jagged extensions, maybe due to precision issues?\r\n  float uvStep = 1.0 / uTroikaSDFGlyphSize;\r\n  vec2 neighbor1UV = clampedGlyphUV + (\r\n    vTroikaGlyphUV.x != clampedGlyphUV.x ? vec2(0.0, uvStep * sign(0.5 - vTroikaGlyphUV.y)) :\r\n    vTroikaGlyphUV.y != clampedGlyphUV.y ? vec2(uvStep * sign(0.5 - vTroikaGlyphUV.x), 0.0) :\r\n    vec2(0.0)\r\n  );\r\n  vec2 neighbor2UV = clampedGlyphUV + (\r\n    vTroikaGlyphUV.x != clampedGlyphUV.x ? vec2(0.0, uvStep * -sign(0.5 - vTroikaGlyphUV.y)) :\r\n    vTroikaGlyphUV.y != clampedGlyphUV.y ? vec2(uvStep * -sign(0.5 - vTroikaGlyphUV.x), 0.0) :\r\n    vec2(0.0)\r\n  );\r\n  float neighbor1Distance = troikaGlyphUvToDistance(neighbor1UV);\r\n  float neighbor2Distance = troikaGlyphUvToDistance(neighbor2UV);\r\n  float distToUnclamped = length((vTroikaGlyphUV - clampedGlyphUV) * vTroikaGlyphDimensions);\r\n  float distToNeighbor = length((clampedGlyphUV - neighbor1UV) * vTroikaGlyphDimensions);\r\n  float gradientAngle1 = min(asin(abs(neighbor1Distance - distance) / distToNeighbor), PI / 2.0);\r\n  float gradientAngle2 = min(asin(abs(neighbor2Distance - distance) / distToNeighbor), PI / 2.0);\r\n  distance += (cos(gradientAngle1) + cos(gradientAngle2)) / 2.0 * distToUnclamped;\r\n  */}\r\n  \r\n  #if defined(IS_DEPTH_MATERIAL) || defined(IS_DISTANCE_MATERIAL)\r\n  float alpha = step(-distanceOffset, -distance);\r\n  #else\r\n  ${''/*\r\n    When the standard derivatives extension is available, we choose an antialiasing alpha threshold based\r\n    on the potential change in the SDF's alpha from this fragment to its neighbor. This strategy maximizes \r\n    readability and edge crispness at all sizes and screen resolutions.\r\n  */}\r\n  #if defined(GL_OES_standard_derivatives) || __VERSION__ >= 300\r\n  float aaDist = length(fwidth(vTroikaGlyphUV * vTroikaGlyphDimensions)) * 0.5;\r\n  #else\r\n  float aaDist = vTroikaGlyphDimensions.x / 64.0;\r\n  #endif\r\n  \r\n  float alpha = smoothstep(\r\n    distanceOffset + aaDist,\r\n    distanceOffset - aaDist,\r\n    distance\r\n  );\r\n  #endif\r\n  \r\n  return alpha;\r\n}\r\n`;\r\n\r\n// language=GLSL prefix=\"void main() {\" suffix=\"}\"\r\nconst FRAGMENT_TRANSFORM = `\r\nfloat alpha = uTroikaSDFDebug ?\r\n  troikaGlyphUvToSdfValue(vTroikaGlyphUV) :\r\n  troikaGetTextAlpha(uTroikaDistanceOffset);\r\n\r\n#if !defined(IS_DEPTH_MATERIAL) && !defined(IS_DISTANCE_MATERIAL)\r\ngl_FragColor.a *= alpha;\r\n#endif\r\n  \r\nif (alpha == 0.0) {\r\n  discard;\r\n}\r\n`;\r\n\r\n\r\n/**\r\n * Create a material for rendering text, derived from a baseMaterial\r\n */\r\nfunction createTextDerivedMaterial(baseMaterial) {\r\n  const textMaterial = createDerivedMaterial(baseMaterial, {\r\n    chained: true,\r\n    extensions: {\r\n      derivatives: true\r\n    },\r\n    uniforms: {\r\n      uTroikaSDFTexture: {value: null},\r\n      uTroikaSDFTextureSize: {value: new Vector2()},\r\n      uTroikaSDFGlyphSize: {value: 0},\r\n      uTroikaSDFExponent: {value: 0},\r\n      uTroikaTotalBounds: {value: new Vector4(0,0,0,0)},\r\n      uTroikaClipRect: {value: new Vector4(0,0,0,0)},\r\n      uTroikaDistanceOffset: {value: 0},\r\n      uTroikaOrient: {value: new Matrix3()},\r\n      uTroikaUseGlyphColors: {value: true},\r\n      uTroikaSDFDebug: {value: false}\r\n    },\r\n    vertexDefs: VERTEX_DEFS,\r\n    vertexTransform: VERTEX_TRANSFORM,\r\n    fragmentDefs: FRAGMENT_DEFS,\r\n    fragmentColorTransform: FRAGMENT_TRANSFORM,\r\n    customRewriter({vertexShader, fragmentShader}) {\r\n      let uDiffuseRE = /\\buniform\\s+vec3\\s+diffuse\\b/;\r\n      if (uDiffuseRE.test(fragmentShader)) {\r\n        // Replace all instances of `diffuse` with our varying\r\n        fragmentShader = fragmentShader\r\n          .replace(uDiffuseRE, 'varying vec3 vTroikaGlyphColor')\r\n          .replace(/\\bdiffuse\\b/g, 'vTroikaGlyphColor');\r\n        // Make sure the vertex shader declares the uniform so we can grab it as a fallback\r\n        if (!uDiffuseRE.test(vertexShader)) {\r\n          vertexShader = vertexShader.replace(\r\n            voidMainRegExp,\r\n            'uniform vec3 diffuse;\\n$&\\nvTroikaGlyphColor = uTroikaUseGlyphColors ? aTroikaGlyphColor / 255.0 : diffuse;\\n'\r\n          );\r\n        }\r\n      }\r\n      return { vertexShader, fragmentShader }\r\n    }\r\n  });\r\n\r\n  // Force transparency - TODO is this reasonable?\r\n  textMaterial.transparent = true;\r\n\r\n  Object.defineProperties(textMaterial, {\r\n    isTroikaTextMaterial: {value: true},\r\n\r\n    // WebGLShadowMap reverses the side of the shadow material by default, which fails\r\n    // for planes, so here we force the `shadowSide` to always match the main side.\r\n    shadowSide: {\r\n      get() {\r\n        return this.side\r\n      },\r\n      set() {\r\n        //no-op\r\n      }\r\n    }\r\n  });\r\n\r\n  return textMaterial\r\n}\n\nconst Text = /*#__PURE__*/(() => {\r\n\r\n  const defaultMaterial = new MeshBasicMaterial({\r\n    color: 0xffffff,\r\n    side: DoubleSide,\r\n    transparent: true\r\n  });\r\n\r\n  const tempMat4 = new Matrix4();\r\n  const tempVec3a = new Vector3();\r\n  const tempVec3b = new Vector3();\r\n  const tempArray = [];\r\n  const origin = new Vector3();\r\n  const defaultOrient = '+x+y';\r\n\r\n  function first(o) {\r\n    return Array.isArray(o) ? o[0] : o\r\n  }\r\n\r\n  const raycastMesh = new Mesh(\r\n    new PlaneBufferGeometry(1, 1).translate(0.5, 0.5, 0),\r\n    defaultMaterial\r\n  );\r\n\r\n  const syncStartEvent = {type: 'syncstart'};\r\n  const syncCompleteEvent = {type: 'synccomplete'};\r\n\r\n  const SYNCABLE_PROPS = [\r\n    'font',\r\n    'fontSize',\r\n    'letterSpacing',\r\n    'lineHeight',\r\n    'maxWidth',\r\n    'overflowWrap',\r\n    'text',\r\n    'textAlign',\r\n    'textIndent',\r\n    'whiteSpace',\r\n    'anchorX',\r\n    'anchorY',\r\n    'colorRanges',\r\n    'sdfGlyphSize'\r\n  ];\r\n\r\n  const COPYABLE_PROPS = SYNCABLE_PROPS.concat(\r\n    'material',\r\n    'color',\r\n    'depthOffset',\r\n    'clipRect',\r\n    'orientation',\r\n    'glyphGeometryDetail'\r\n  );\r\n\r\n\r\n\r\n  /**\r\n   * @class Text\r\n   *\r\n   * A ThreeJS Mesh that renders a string of text on a plane in 3D space using signed distance\r\n   * fields (SDF).\r\n   */\r\n  class Text extends Mesh {\r\n    constructor() {\r\n      const geometry = new GlyphsGeometry();\r\n      super(geometry, null);\r\n\r\n      // === Text layout properties: === //\r\n\r\n      /**\r\n       * @member {string} text\r\n       * The string of text to be rendered.\r\n       */\r\n      this.text = '';\r\n\r\n      /**\r\n       * @deprecated Use `anchorX` and `anchorY` instead\r\n       * @member {Array<number>} anchor\r\n       * Defines where in the text block should correspond to the mesh's local position, as a set\r\n       * of horizontal and vertical percentages from 0 to 1. A value of `[0, 0]` (the default)\r\n       * anchors at the top-left, `[1, 1]` at the bottom-right, and `[0.5, 0.5]` centers the\r\n       * block at the mesh's position.\r\n       */\r\n      //this.anchor = null\r\n\r\n      /**\r\n       * @member {number|string} anchorX\r\n       * Defines the horizontal position in the text block that should line up with the local origin.\r\n       * Can be specified as a numeric x position in local units, a string percentage of the total\r\n       * text block width e.g. `'25%'`, or one of the following keyword strings: 'left', 'center',\r\n       * or 'right'.\r\n       */\r\n      this.anchorX = 0;\r\n\r\n      /**\r\n       * @member {number|string} anchorX\r\n       * Defines the vertical position in the text block that should line up with the local origin.\r\n       * Can be specified as a numeric y position in local units (note: down is negative y), a string\r\n       * percentage of the total text block height e.g. `'25%'`, or one of the following keyword strings:\r\n       * 'top', 'top-baseline', 'middle', 'bottom-baseline', or 'bottom'.\r\n       */\r\n      this.anchorY = 0;\r\n\r\n      /**\r\n       * @member {string} font\r\n       * URL of a custom font to be used. Font files can be any of the formats supported by\r\n       * OpenType (see https://github.com/opentypejs/opentype.js).\r\n       * Defaults to the Roboto font loaded from Google Fonts.\r\n       */\r\n      this.font = null; //will use default from TextBuilder\r\n\r\n      /**\r\n       * @member {number} fontSize\r\n       * The size at which to render the font in local units; corresponds to the em-box height\r\n       * of the chosen `font`.\r\n       */\r\n      this.fontSize = 0.1;\r\n\r\n      /**\r\n       * @member {number} letterSpacing\r\n       * Sets a uniform adjustment to spacing between letters after kerning is applied. Positive\r\n       * numbers increase spacing and negative numbers decrease it.\r\n       */\r\n      this.letterSpacing = 0;\r\n\r\n      /**\r\n       * @member {number|string} lineHeight\r\n       * Sets the height of each line of text, as a multiple of the `fontSize`. Defaults to 'normal'\r\n       * which chooses a reasonable height based on the chosen font's ascender/descender metrics.\r\n       */\r\n      this.lineHeight = 'normal';\r\n\r\n      /**\r\n       * @member {number} maxWidth\r\n       * The maximum width of the text block, above which text may start wrapping according to the\r\n       * `whiteSpace` and `overflowWrap` properties.\r\n       */\r\n      this.maxWidth = Infinity;\r\n\r\n      /**\r\n       * @member {string} overflowWrap\r\n       * Defines how text wraps if the `whiteSpace` property is `normal`. Can be either `'normal'`\r\n       * to break at whitespace characters, or `'break-word'` to allow breaking within words.\r\n       * Defaults to `'normal'`.\r\n       */\r\n      this.overflowWrap = 'normal';\r\n\r\n      /**\r\n       * @member {string} textAlign\r\n       * The horizontal alignment of each line of text within the overall text bounding box.\r\n       */\r\n      this.textAlign = 'left';\r\n\r\n      /**\r\n       * @member {number} textIndent\r\n       * Indentation for the first character of a line; see CSS `text-indent`.\r\n       */\r\n      this.textIndent = 0;\r\n\r\n      /**\r\n       * @member {string} whiteSpace\r\n       * Defines whether text should wrap when a line reaches the `maxWidth`. Can\r\n       * be either `'normal'` (the default), to allow wrapping according to the `overflowWrap` property,\r\n       * or `'nowrap'` to prevent wrapping. Note that `'normal'` here honors newline characters to\r\n       * manually break lines, making it behave more like `'pre-wrap'` does in CSS.\r\n       */\r\n      this.whiteSpace = 'normal';\r\n\r\n\r\n      // === Presentation properties: === //\r\n\r\n      /**\r\n       * @member {THREE.Material} material\r\n       * Defines a _base_ material to be used when rendering the text. This material will be\r\n       * automatically replaced with a material derived from it, that adds shader code to\r\n       * decrease the alpha for each fragment (pixel) outside the text glyphs, with antialiasing.\r\n       * By default it will derive from a simple white MeshBasicMaterial, but you can use any\r\n       * of the other mesh materials to gain other features like lighting, texture maps, etc.\r\n       *\r\n       * Also see the `color` shortcut property.\r\n       */\r\n      this.material = null;\r\n\r\n      /**\r\n       * @member {string|number|THREE.Color} color\r\n       * This is a shortcut for setting the `color` of the text's material. You can use this\r\n       * if you don't want to specify a whole custom `material`. Also, if you do use a custom\r\n       * `material`, this color will only be used for this particuar Text instance, even if\r\n       * that same material instance is shared across multiple Text objects.\r\n       */\r\n      this.color = null;\r\n\r\n      /**\r\n       * @member {object|null} colorRanges\r\n       * WARNING: This API is experimental and may change.\r\n       * This allows more fine-grained control of colors for individual or ranges of characters,\r\n       * taking precedence over the material's `color`. Its format is an Object whose keys each\r\n       * define a starting character index for a range, and whose values are the color for each\r\n       * range. The color value can be a numeric hex color value, a `THREE.Color` object, or\r\n       * any of the strings accepted by `THREE.Color`.\r\n       */\r\n      this.colorRanges = null;\r\n\r\n      /**\r\n       * @member {number|string} outlineWidth\r\n       * WARNING: This API is experimental and may change.\r\n       * The width of an outline drawn around each text glyph using the `outlineColor`. Can be\r\n       * specified as either an absolute number in local units, or as a percentage string e.g.\r\n       * `\"12%\"` which is treated as a percentage of the `fontSize`. Defaults to `0`.\r\n       */\r\n      this.outlineWidth = 0;\r\n\r\n      /**\r\n       * @member {string|number|THREE.Color} outlineColor\r\n       * WARNING: This API is experimental and may change.\r\n       * The color of the text outline, if `outlineWidth` is greater than zero. Defaults to black.\r\n       */\r\n      this.outlineColor = 0;\r\n\r\n      /**\r\n       * @member {number} depthOffset\r\n       * This is a shortcut for setting the material's `polygonOffset` and related properties,\r\n       * which can be useful in preventing z-fighting when this text is laid on top of another\r\n       * plane in the scene. Positive numbers are further from the camera, negatives closer.\r\n       */\r\n      this.depthOffset = 0;\r\n\r\n      /**\r\n       * @member {Array<number>} clipRect\r\n       * If specified, defines a `[minX, minY, maxX, maxY]` of a rectangle outside of which all\r\n       * pixels will be discarded. This can be used for example to clip overflowing text when\r\n       * `whiteSpace='nowrap'`.\r\n       */\r\n      this.clipRect = null;\r\n\r\n      /**\r\n       * @member {string} orientation\r\n       * Defines the axis plane on which the text should be laid out when the mesh has no extra\r\n       * rotation transform. It is specified as a string with two axes: the horizontal axis with\r\n       * positive pointing right, and the vertical axis with positive pointing up. By default this\r\n       * is '+x+y', meaning the text sits on the xy plane with the text's top toward positive y\r\n       * and facing positive z. A value of '+x-z' would place it on the xz plane with the text's\r\n       * top toward negative z and facing positive y.\r\n       */\r\n      this.orientation = defaultOrient;\r\n\r\n      /**\r\n       * @member {number} glyphGeometryDetail\r\n       * Controls number of vertical/horizontal segments that make up each glyph's rectangular\r\n       * plane. Defaults to 1. This can be increased to provide more geometrical detail for custom\r\n       * vertex shader effects, for example.\r\n       */\r\n      this.glyphGeometryDetail = 1;\r\n\r\n      /**\r\n       * @member {number|null} sdfGlyphSize\r\n       * The size of each glyph's SDF (signed distance field) used for rendering. This must be a\r\n       * power-of-two number. Defaults to 64 which is generally a good balance of size and quality\r\n       * for most fonts. Larger sizes can improve the quality of glyph rendering by increasing\r\n       * the sharpness of corners and preventing loss of very thin lines, at the expense of\r\n       * increased memory footprint and longer SDF generation time.\r\n       */\r\n      this.sdfGlyphSize = null;\r\n\r\n      this.debugSDF = false;\r\n    }\r\n\r\n    /**\r\n     * Updates the text rendering according to the current text-related configuration properties.\r\n     * This is an async process, so you can pass in a callback function to be executed when it\r\n     * finishes.\r\n     * @param {function} [callback]\r\n     */\r\n    sync(callback) {\r\n      if (this._needsSync) {\r\n        this._needsSync = false;\r\n\r\n        // If there's another sync still in progress, queue\r\n        if (this._isSyncing) {\r\n          (this._queuedSyncs || (this._queuedSyncs = [])).push(callback);\r\n        } else {\r\n          this._isSyncing = true;\r\n          this.dispatchEvent(syncStartEvent);\r\n\r\n          getTextRenderInfo({\r\n            text: this.text,\r\n            font: this.font,\r\n            fontSize: this.fontSize || 0.1,\r\n            letterSpacing: this.letterSpacing || 0,\r\n            lineHeight: this.lineHeight || 'normal',\r\n            maxWidth: this.maxWidth,\r\n            textAlign: this.textAlign,\r\n            textIndent: this.textIndent,\r\n            whiteSpace: this.whiteSpace,\r\n            overflowWrap: this.overflowWrap,\r\n            anchorX: this.anchorX,\r\n            anchorY: this.anchorY,\r\n            colorRanges: this.colorRanges,\r\n            includeCaretPositions: true, //TODO parameterize\r\n            sdfGlyphSize: this.sdfGlyphSize\r\n          }, textRenderInfo => {\r\n            this._isSyncing = false;\r\n\r\n            // Save result for later use in onBeforeRender\r\n            this._textRenderInfo = textRenderInfo;\r\n\r\n            // Update the geometry attributes\r\n            this.geometry.updateGlyphs(\r\n              textRenderInfo.glyphBounds,\r\n              textRenderInfo.glyphAtlasIndices,\r\n              textRenderInfo.blockBounds,\r\n              textRenderInfo.chunkedBounds,\r\n              textRenderInfo.glyphColors\r\n            );\r\n\r\n            // If we had extra sync requests queued up, kick it off\r\n            const queued = this._queuedSyncs;\r\n            if (queued) {\r\n              this._queuedSyncs = null;\r\n              this._needsSync = true;\r\n              this.sync(() => {\r\n                queued.forEach(fn => fn && fn());\r\n              });\r\n            }\r\n\r\n            this.dispatchEvent(syncCompleteEvent);\r\n            if (callback) {\r\n              callback();\r\n            }\r\n          });\r\n        }\r\n      }\r\n    }\r\n\r\n    /**\r\n     * Initiate a sync if needed - note it won't complete until next frame at the\r\n     * earliest so if possible it's a good idea to call sync() manually as soon as\r\n     * all the properties have been set.\r\n     * @override\r\n     */\r\n    onBeforeRender(renderer, scene, camera, geometry, material, group) {\r\n      this.sync();\r\n\r\n      // This may not always be a text material, e.g. if there's a scene.overrideMaterial present\r\n      if (material.isTroikaTextMaterial) {\r\n        this._prepareForRender(material);\r\n      }\r\n    }\r\n\r\n    /**\r\n     * Shortcut to dispose the geometry specific to this instance.\r\n     * Note: we don't also dispose the derived material here because if anything else is\r\n     * sharing the same base material it will result in a pause next frame as the program\r\n     * is recompiled. Instead users can dispose the base material manually, like normal,\r\n     * and we'll also dispose the derived material at that time.\r\n     */\r\n    dispose() {\r\n      this.geometry.dispose();\r\n    }\r\n\r\n    /**\r\n     * @property {TroikaTextRenderInfo|null} textRenderInfo\r\n     * @readonly\r\n     * The current processed rendering data for this TextMesh, returned by the TextBuilder after\r\n     * a `sync()` call. This will be `null` initially, and may be stale for a short period until\r\n     * the asynchrous `sync()` process completes.\r\n     */\r\n    get textRenderInfo() {\r\n      return this._textRenderInfo || null\r\n    }\r\n\r\n    // Handler for automatically wrapping the base material with our upgrades. We do the wrapping\r\n    // lazily on _read_ rather than write to avoid unnecessary wrapping on transient values.\r\n    get material() {\r\n      let derivedMaterial = this._derivedMaterial;\r\n      const baseMaterial = this._baseMaterial || this._defaultMaterial || (this._defaultMaterial = defaultMaterial.clone());\r\n      if (!derivedMaterial || derivedMaterial.baseMaterial !== baseMaterial) {\r\n        derivedMaterial = this._derivedMaterial = createTextDerivedMaterial(baseMaterial);\r\n        // dispose the derived material when its base material is disposed:\r\n        baseMaterial.addEventListener('dispose', function onDispose() {\r\n          baseMaterial.removeEventListener('dispose', onDispose);\r\n          derivedMaterial.dispose();\r\n        });\r\n      }\r\n      // If text outline is present, render it as a preliminary draw using Three's multi-material\r\n      // feature (see GlyphsGeometry which sets up `groups` for this purpose) Doing it with multi\r\n      // materials ensures the layers are always rendered consecutively in a consistent order.\r\n      // Each layer will trigger onBeforeRender with the appropriate material.\r\n      if (this.outlineWidth) {\r\n        let outlineMaterial = derivedMaterial._outlineMtl;\r\n        if (!outlineMaterial) {\r\n          outlineMaterial = derivedMaterial._outlineMtl = Object.create(derivedMaterial, {\r\n            id: {value: derivedMaterial.id + 0.1}\r\n          });\r\n          outlineMaterial.isTextOutlineMaterial = true;\r\n          outlineMaterial.depthWrite = false;\r\n          outlineMaterial.map = null; //???\r\n          derivedMaterial.addEventListener('dispose', function onDispose() {\r\n            derivedMaterial.removeEventListener('dispose', onDispose);\r\n            outlineMaterial.dispose();\r\n          });\r\n        }\r\n        return [\r\n          outlineMaterial,\r\n          derivedMaterial\r\n        ]\r\n      } else {\r\n        return derivedMaterial\r\n      }\r\n    }\r\n    set material(baseMaterial) {\r\n      if (baseMaterial && baseMaterial.isTroikaTextMaterial) { //prevent double-derivation\r\n        this._derivedMaterial = baseMaterial;\r\n        this._baseMaterial = baseMaterial.baseMaterial;\r\n      } else {\r\n        this._baseMaterial = baseMaterial;\r\n      }\r\n    }\r\n\r\n    get glyphGeometryDetail() {\r\n      return this.geometry.detail\r\n    }\r\n    set glyphGeometryDetail(detail) {\r\n      this.geometry.detail = detail;\r\n    }\r\n\r\n    // Create and update material for shadows upon request:\r\n    get customDepthMaterial() {\r\n      return first(this.material).getDepthMaterial()\r\n    }\r\n    get customDistanceMaterial() {\r\n      return first(this.material).getDistanceMaterial()\r\n    }\r\n\r\n    _prepareForRender(material) {\r\n      const isOutline = material.isTextOutlineMaterial;\r\n      const uniforms = material.uniforms;\r\n      const textInfo = this.textRenderInfo;\r\n      if (textInfo) {\r\n        const {sdfTexture, blockBounds} = textInfo;\r\n        uniforms.uTroikaSDFTexture.value = sdfTexture;\r\n        uniforms.uTroikaSDFTextureSize.value.set(sdfTexture.image.width, sdfTexture.image.height);\r\n        uniforms.uTroikaSDFGlyphSize.value = textInfo.sdfGlyphSize;\r\n        uniforms.uTroikaSDFExponent.value = textInfo.sdfExponent;\r\n        uniforms.uTroikaTotalBounds.value.fromArray(blockBounds);\r\n        uniforms.uTroikaUseGlyphColors.value = !!textInfo.glyphColors;\r\n\r\n        let distanceOffset = 0;\r\n        if (isOutline) {\r\n          let {outlineWidth} = this;\r\n          if (typeof outlineWidth === 'string') {\r\n            let match = outlineWidth.match(/^([\\d.]+)%$/);\r\n            let pct = match ? parseFloat(match[1]) : NaN;\r\n            outlineWidth = (isNaN(pct) ? 0 : pct / 100) * this.fontSize;\r\n          }\r\n          distanceOffset = outlineWidth;\r\n        }\r\n        uniforms.uTroikaDistanceOffset.value = distanceOffset;\r\n\r\n        let clipRect = this.clipRect;\r\n        if (clipRect && Array.isArray(clipRect) && clipRect.length === 4) {\r\n          uniforms.uTroikaClipRect.value.fromArray(clipRect);\r\n        } else {\r\n          // no clipping - choose a finite rect that shouldn't ever be reached by overflowing glyphs or outlines\r\n          const pad = (this.fontSize || 0.1) * 100;\r\n          uniforms.uTroikaClipRect.value.set(\r\n            blockBounds[0] - pad,\r\n            blockBounds[1] - pad,\r\n            blockBounds[2] + pad,\r\n            blockBounds[3] + pad\r\n          );\r\n        }\r\n        this.geometry.applyClipRect(uniforms.uTroikaClipRect.value);\r\n      }\r\n      uniforms.uTroikaSDFDebug.value = !!this.debugSDF;\r\n      material.polygonOffset = !!this.depthOffset;\r\n      material.polygonOffsetFactor = material.polygonOffsetUnits = this.depthOffset || 0;\r\n\r\n      // Shortcut for setting material color via `color` prop on the mesh; this is\r\n      // applied only to the derived material to avoid mutating a shared base material.\r\n      const color = isOutline ? (this.outlineColor || 0) : this.color;\r\n      if (color == null) {\r\n        delete material.color; //inherit from base\r\n      } else {\r\n        const colorObj = material.hasOwnProperty('color') ? material.color : (material.color = new Color());\r\n        if (color !== colorObj._input || typeof color === 'object') {\r\n          colorObj.set(colorObj._input = color);\r\n        }\r\n      }\r\n\r\n      // base orientation\r\n      let orient = this.orientation || defaultOrient;\r\n      if (orient !== material._orientation) {\r\n        let rotMat = uniforms.uTroikaOrient.value;\r\n        orient = orient.replace(/[^-+xyz]/g, '');\r\n        let match = orient !== defaultOrient && orient.match(/^([-+])([xyz])([-+])([xyz])$/);\r\n        if (match) {\r\n          let [, hSign, hAxis, vSign, vAxis] = match;\r\n          tempVec3a.set(0, 0, 0)[hAxis] = hSign === '-' ? 1 : -1;\r\n          tempVec3b.set(0, 0, 0)[vAxis] = vSign === '-' ? -1 : 1;\r\n          tempMat4.lookAt(origin, tempVec3a.cross(tempVec3b), tempVec3b);\r\n          rotMat.setFromMatrix4(tempMat4);\r\n        } else {\r\n          rotMat.identity();\r\n        }\r\n        material._orientation = orient;\r\n      }\r\n    }\r\n\r\n    /**\r\n     * @override Custom raycasting to test against the whole text block's max rectangular bounds\r\n     * TODO is there any reason to make this more granular, like within individual line or glyph rects?\r\n     */\r\n    raycast(raycaster, intersects) {\r\n      const textInfo = this.textRenderInfo;\r\n      if (textInfo) {\r\n        const bounds = textInfo.blockBounds;\r\n        raycastMesh.matrixWorld.multiplyMatrices(\r\n          this.matrixWorld,\r\n          tempMat4.set(\r\n            bounds[2] - bounds[0], 0, 0, bounds[0],\r\n            0, bounds[3] - bounds[1], 0, bounds[1],\r\n            0, 0, 1, 0,\r\n            0, 0, 0, 1\r\n          )\r\n        );\r\n        tempArray.length = 0;\r\n        raycastMesh.raycast(raycaster, tempArray);\r\n        for (let i = 0; i < tempArray.length; i++) {\r\n          tempArray[i].object = this;\r\n          intersects.push(tempArray[i]);\r\n        }\r\n      }\r\n    }\r\n\r\n    copy(source) {\r\n      super.copy(source);\r\n      COPYABLE_PROPS.forEach(prop => {\r\n        this[prop] = source[prop];\r\n      });\r\n      return this\r\n    }\r\n\r\n    clone() {\r\n      return new this.constructor().copy(this)\r\n    }\r\n  }\r\n\r\n\r\n  // Create setters for properties that affect text layout:\r\n  SYNCABLE_PROPS.forEach(prop => {\r\n    const privateKey = '_private_' + prop;\r\n    Object.defineProperty(Text.prototype, prop, {\r\n      get() {\r\n        return this[privateKey]\r\n      },\r\n      set(value) {\r\n        if (value !== this[privateKey]) {\r\n          this[privateKey] = value;\r\n          this._needsSync = true;\r\n        }\r\n      }\r\n    });\r\n  });\r\n\r\n\r\n  // Deprecation handler for `anchor` array:\r\n  let deprMsgShown = false;\r\n  Object.defineProperty(Text.prototype, 'anchor', {\r\n    get() {\r\n      return this._deprecated_anchor\r\n    },\r\n    set(val) {\r\n      this._deprecated_anchor = val;\r\n      if (!deprMsgShown) {\r\n        console.warn('TextMesh: `anchor` has been deprecated; use `anchorX` and `anchorY` instead.');\r\n        deprMsgShown = true;\r\n      }\r\n      if (Array.isArray(val)) {\r\n        this.anchorX = `${(+val[0] || 0) * 100}%`;\r\n        this.anchorY = `${(+val[1] || 0) * 100}%`;\r\n      } else {\r\n        this.anchorX = this.anchorY = 0;\r\n      }\r\n    }\r\n  });\r\n\r\n  return Text\r\n})();\n\n//=== Utility functions for dealing with carets and selection ranges ===//\r\n\r\n/**\r\n * @typedef {object} TextCaret\r\n * @property {number} x - x position of the caret\r\n * @property {number} y - y position of the caret's bottom\r\n * @property {number} height - height of the caret\r\n * @property {number} charIndex - the index in the original input string of this caret's target\r\n *   character; the caret will be for the position _before_ that character.\r\n */\r\n\r\n/**\r\n * Given a local x/y coordinate in the text block plane, find the nearest caret position.\r\n * @param {TroikaTextRenderInfo} textRenderInfo - a result object from TextBuilder#getTextRenderInfo\r\n * @param {number} x\r\n * @param {number} y\r\n * @return {TextCaret | null}\r\n */\r\nfunction getCaretAtPoint(textRenderInfo, x, y) {\r\n  let closestCaret = null;\r\n  const {caretHeight} = textRenderInfo;\r\n  const caretsByRow = groupCaretsByRow(textRenderInfo);\r\n\r\n  // Find nearest row by y first\r\n  let closestRowY = Infinity;\r\n  caretsByRow.forEach((carets, rowY) => {\r\n    if (Math.abs(y - (rowY + caretHeight / 2)) < Math.abs(y - (closestRowY + caretHeight / 2))) {\r\n      closestRowY = rowY;\r\n    }\r\n  });\r\n\r\n  // Then find closest caret by x within that row\r\n  caretsByRow.get(closestRowY).forEach(caret => {\r\n    if (!closestCaret || Math.abs(x - caret.x) < Math.abs(x - closestCaret.x)) {\r\n      closestCaret = caret;\r\n    }\r\n  });\r\n  return closestCaret\r\n}\r\n\r\n\r\nconst _rectsCache = new WeakMap();\r\n\r\n/**\r\n * Given start and end character indexes, return a list of rectangles covering all the\r\n * characters within that selection.\r\n * @param {TroikaTextRenderInfo} textRenderInfo\r\n * @param {number} start - index of the first char in the selection\r\n * @param {number} end - index of the first char after the selection\r\n * @return {Array<{left, top, right, bottom}> | null}\r\n */\r\nfunction getSelectionRects(textRenderInfo, start, end) {\r\n  let rects;\r\n  if (textRenderInfo) {\r\n    // Check cache - textRenderInfo is frozen so it's safe to cache based on it\r\n    let prevResult = _rectsCache.get(textRenderInfo);\r\n    if (prevResult && prevResult.start === start && prevResult.end === end) {\r\n      return prevResult.rects\r\n    }\r\n\r\n    const {caretPositions, caretHeight, blockBounds} = textRenderInfo;\r\n\r\n    // Normalize\r\n    if (end < start) {\r\n      const s = start;\r\n      start = end;\r\n      end = s;\r\n    }\r\n    start = Math.max(start, 0);\r\n    end = Math.min(end, caretPositions.length + 1);\r\n\r\n    // Collect into one rect per row\r\n    let rows = new Map();\r\n    for (let i = start; i < end; i++) {\r\n      const x1 = caretPositions[i * 3];\r\n      const x2 = caretPositions[i * 3 + 1];\r\n      const y = caretPositions[i * 3 + 2];\r\n      let row = rows.get(y);\r\n      if (!row) {\r\n        row = {left: x1, right: x2, bottom: y, top: y + caretHeight};\r\n        rows.set(y, row);\r\n      } else {\r\n        row.left = Math.max(Math.min(row.left, x1), blockBounds[0]);\r\n        row.right = Math.min(Math.max(row.right, x2), blockBounds[2]);\r\n      }\r\n    }\r\n    rects = [];\r\n    rows.forEach(rect => {\r\n      rects.push(rect);\r\n    });\r\n\r\n    _rectsCache.set(textRenderInfo, {start, end, rects});\r\n  }\r\n  return rects\r\n}\r\n\r\nconst _caretsByRowCache = new WeakMap();\r\n\r\nfunction groupCaretsByRow(textRenderInfo) {\r\n  // textRenderInfo is frozen so it's safe to cache based on it\r\n  let caretsByRow = _caretsByRowCache.get(textRenderInfo);\r\n  if (!caretsByRow) {\r\n    const {caretPositions, caretHeight} = textRenderInfo;\r\n    caretsByRow = new Map();\r\n    for (let i = 0; i < caretPositions.length; i += 3) {\r\n      const rowY = caretPositions[i + 2];\r\n      let rowCarets = caretsByRow.get(rowY);\r\n      if (!rowCarets) {\r\n        caretsByRow.set(rowY, rowCarets = []);\r\n      }\r\n      rowCarets.push({\r\n        x: caretPositions[i],\r\n        y: rowY,\r\n        height: caretHeight,\r\n        charIndex: i / 3\r\n      });\r\n      // Add one more caret after the final char\r\n      if (i + 3 >= caretPositions.length) {\r\n        rowCarets.push({\r\n          x: caretPositions[i + 1],\r\n          y: rowY,\r\n          height: caretHeight,\r\n          charIndex: i / 3 + 1\r\n        });\r\n      }\r\n    }\r\n  }\r\n  _caretsByRowCache.set(textRenderInfo, caretsByRow);\r\n  return caretsByRow\r\n}\n\nexport { GlyphsGeometry, Text, configureTextBuilder, createTextDerivedMaterial, fontProcessorWorkerModule, getCaretAtPoint, getSelectionRects, preloadFont };\n"]},"metadata":{},"sourceType":"module"}