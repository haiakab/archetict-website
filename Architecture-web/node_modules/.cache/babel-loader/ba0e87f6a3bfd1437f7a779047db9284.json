{"ast":null,"code":"import { AmbientLight, AnimationClip, Bone, BufferGeometry, ClampToEdgeWrapping, Color, DirectionalLight, DoubleSide, Euler, FileLoader, Float32BufferAttribute, Group, Line, LineBasicMaterial, LineSegments, Loader, LoaderUtils, MathUtils, Matrix4, Mesh, MeshBasicMaterial, MeshLambertMaterial, MeshPhongMaterial, OrthographicCamera, PerspectiveCamera, PointLight, Quaternion, QuaternionKeyframeTrack, RepeatWrapping, Scene, Skeleton, SkinnedMesh, SpotLight, TextureLoader, Vector3, VectorKeyframeTrack } from '../../../build/three.module.js';\nimport { TGALoader } from '../loaders/TGALoader.js';\n\nvar ColladaLoader = function (manager) {\n  Loader.call(this, manager);\n};\n\nColladaLoader.prototype = Object.assign(Object.create(Loader.prototype), {\n  constructor: ColladaLoader,\n  load: function (url, onLoad, onProgress, onError) {\n    var scope = this;\n    var path = scope.path === '' ? LoaderUtils.extractUrlBase(url) : scope.path;\n    var loader = new FileLoader(scope.manager);\n    loader.setPath(scope.path);\n    loader.setRequestHeader(scope.requestHeader);\n    loader.setWithCredentials(scope.withCredentials);\n    loader.load(url, function (text) {\n      try {\n        onLoad(scope.parse(text, path));\n      } catch (e) {\n        if (onError) {\n          onError(e);\n        } else {\n          console.error(e);\n        }\n\n        scope.manager.itemError(url);\n      }\n    }, onProgress, onError);\n  },\n  options: {\n    set convertUpAxis(value) {\n      console.warn('THREE.ColladaLoader: options.convertUpAxis() has been removed. Up axis is converted automatically.');\n    }\n\n  },\n  parse: function (text, path) {\n    function getElementsByTagName(xml, name) {\n      // Non recursive xml.getElementsByTagName() ...\n      var array = [];\n      var childNodes = xml.childNodes;\n\n      for (var i = 0, l = childNodes.length; i < l; i++) {\n        var child = childNodes[i];\n\n        if (child.nodeName === name) {\n          array.push(child);\n        }\n      }\n\n      return array;\n    }\n\n    function parseStrings(text) {\n      if (text.length === 0) return [];\n      var parts = text.trim().split(/\\s+/);\n      var array = new Array(parts.length);\n\n      for (var i = 0, l = parts.length; i < l; i++) {\n        array[i] = parts[i];\n      }\n\n      return array;\n    }\n\n    function parseFloats(text) {\n      if (text.length === 0) return [];\n      var parts = text.trim().split(/\\s+/);\n      var array = new Array(parts.length);\n\n      for (var i = 0, l = parts.length; i < l; i++) {\n        array[i] = parseFloat(parts[i]);\n      }\n\n      return array;\n    }\n\n    function parseInts(text) {\n      if (text.length === 0) return [];\n      var parts = text.trim().split(/\\s+/);\n      var array = new Array(parts.length);\n\n      for (var i = 0, l = parts.length; i < l; i++) {\n        array[i] = parseInt(parts[i]);\n      }\n\n      return array;\n    }\n\n    function parseId(text) {\n      return text.substring(1);\n    }\n\n    function generateId() {\n      return 'three_default_' + count++;\n    }\n\n    function isEmpty(object) {\n      return Object.keys(object).length === 0;\n    } // asset\n\n\n    function parseAsset(xml) {\n      return {\n        unit: parseAssetUnit(getElementsByTagName(xml, 'unit')[0]),\n        upAxis: parseAssetUpAxis(getElementsByTagName(xml, 'up_axis')[0])\n      };\n    }\n\n    function parseAssetUnit(xml) {\n      if (xml !== undefined && xml.hasAttribute('meter') === true) {\n        return parseFloat(xml.getAttribute('meter'));\n      } else {\n        return 1; // default 1 meter\n      }\n    }\n\n    function parseAssetUpAxis(xml) {\n      return xml !== undefined ? xml.textContent : 'Y_UP';\n    } // library\n\n\n    function parseLibrary(xml, libraryName, nodeName, parser) {\n      var library = getElementsByTagName(xml, libraryName)[0];\n\n      if (library !== undefined) {\n        var elements = getElementsByTagName(library, nodeName);\n\n        for (var i = 0; i < elements.length; i++) {\n          parser(elements[i]);\n        }\n      }\n    }\n\n    function buildLibrary(data, builder) {\n      for (var name in data) {\n        var object = data[name];\n        object.build = builder(data[name]);\n      }\n    } // get\n\n\n    function getBuild(data, builder) {\n      if (data.build !== undefined) return data.build;\n      data.build = builder(data);\n      return data.build;\n    } // animation\n\n\n    function parseAnimation(xml) {\n      var data = {\n        sources: {},\n        samplers: {},\n        channels: {}\n      };\n      var hasChildren = false;\n\n      for (var i = 0, l = xml.childNodes.length; i < l; i++) {\n        var child = xml.childNodes[i];\n        if (child.nodeType !== 1) continue;\n        var id;\n\n        switch (child.nodeName) {\n          case 'source':\n            id = child.getAttribute('id');\n            data.sources[id] = parseSource(child);\n            break;\n\n          case 'sampler':\n            id = child.getAttribute('id');\n            data.samplers[id] = parseAnimationSampler(child);\n            break;\n\n          case 'channel':\n            id = child.getAttribute('target');\n            data.channels[id] = parseAnimationChannel(child);\n            break;\n\n          case 'animation':\n            // hierarchy of related animations\n            parseAnimation(child);\n            hasChildren = true;\n            break;\n\n          default:\n            console.log(child);\n        }\n      }\n\n      if (hasChildren === false) {\n        // since 'id' attributes can be optional, it's necessary to generate a UUID for unqiue assignment\n        library.animations[xml.getAttribute('id') || MathUtils.generateUUID()] = data;\n      }\n    }\n\n    function parseAnimationSampler(xml) {\n      var data = {\n        inputs: {}\n      };\n\n      for (var i = 0, l = xml.childNodes.length; i < l; i++) {\n        var child = xml.childNodes[i];\n        if (child.nodeType !== 1) continue;\n\n        switch (child.nodeName) {\n          case 'input':\n            var id = parseId(child.getAttribute('source'));\n            var semantic = child.getAttribute('semantic');\n            data.inputs[semantic] = id;\n            break;\n        }\n      }\n\n      return data;\n    }\n\n    function parseAnimationChannel(xml) {\n      var data = {};\n      var target = xml.getAttribute('target'); // parsing SID Addressing Syntax\n\n      var parts = target.split('/');\n      var id = parts.shift();\n      var sid = parts.shift(); // check selection syntax\n\n      var arraySyntax = sid.indexOf('(') !== -1;\n      var memberSyntax = sid.indexOf('.') !== -1;\n\n      if (memberSyntax) {\n        //  member selection access\n        parts = sid.split('.');\n        sid = parts.shift();\n        data.member = parts.shift();\n      } else if (arraySyntax) {\n        // array-access syntax. can be used to express fields in one-dimensional vectors or two-dimensional matrices.\n        var indices = sid.split('(');\n        sid = indices.shift();\n\n        for (var i = 0; i < indices.length; i++) {\n          indices[i] = parseInt(indices[i].replace(/\\)/, ''));\n        }\n\n        data.indices = indices;\n      }\n\n      data.id = id;\n      data.sid = sid;\n      data.arraySyntax = arraySyntax;\n      data.memberSyntax = memberSyntax;\n      data.sampler = parseId(xml.getAttribute('source'));\n      return data;\n    }\n\n    function buildAnimation(data) {\n      var tracks = [];\n      var channels = data.channels;\n      var samplers = data.samplers;\n      var sources = data.sources;\n\n      for (var target in channels) {\n        if (channels.hasOwnProperty(target)) {\n          var channel = channels[target];\n          var sampler = samplers[channel.sampler];\n          var inputId = sampler.inputs.INPUT;\n          var outputId = sampler.inputs.OUTPUT;\n          var inputSource = sources[inputId];\n          var outputSource = sources[outputId];\n          var animation = buildAnimationChannel(channel, inputSource, outputSource);\n          createKeyframeTracks(animation, tracks);\n        }\n      }\n\n      return tracks;\n    }\n\n    function getAnimation(id) {\n      return getBuild(library.animations[id], buildAnimation);\n    }\n\n    function buildAnimationChannel(channel, inputSource, outputSource) {\n      var node = library.nodes[channel.id];\n      var object3D = getNode(node.id);\n      var transform = node.transforms[channel.sid];\n      var defaultMatrix = node.matrix.clone().transpose();\n      var time, stride;\n      var i, il, j, jl;\n      var data = {}; // the collada spec allows the animation of data in various ways.\n      // depending on the transform type (matrix, translate, rotate, scale), we execute different logic\n\n      switch (transform) {\n        case 'matrix':\n          for (i = 0, il = inputSource.array.length; i < il; i++) {\n            time = inputSource.array[i];\n            stride = i * outputSource.stride;\n            if (data[time] === undefined) data[time] = {};\n\n            if (channel.arraySyntax === true) {\n              var value = outputSource.array[stride];\n              var index = channel.indices[0] + 4 * channel.indices[1];\n              data[time][index] = value;\n            } else {\n              for (j = 0, jl = outputSource.stride; j < jl; j++) {\n                data[time][j] = outputSource.array[stride + j];\n              }\n            }\n          }\n\n          break;\n\n        case 'translate':\n          console.warn('THREE.ColladaLoader: Animation transform type \"%s\" not yet implemented.', transform);\n          break;\n\n        case 'rotate':\n          console.warn('THREE.ColladaLoader: Animation transform type \"%s\" not yet implemented.', transform);\n          break;\n\n        case 'scale':\n          console.warn('THREE.ColladaLoader: Animation transform type \"%s\" not yet implemented.', transform);\n          break;\n      }\n\n      var keyframes = prepareAnimationData(data, defaultMatrix);\n      var animation = {\n        name: object3D.uuid,\n        keyframes: keyframes\n      };\n      return animation;\n    }\n\n    function prepareAnimationData(data, defaultMatrix) {\n      var keyframes = []; // transfer data into a sortable array\n\n      for (var time in data) {\n        keyframes.push({\n          time: parseFloat(time),\n          value: data[time]\n        });\n      } // ensure keyframes are sorted by time\n\n\n      keyframes.sort(ascending); // now we clean up all animation data, so we can use them for keyframe tracks\n\n      for (var i = 0; i < 16; i++) {\n        transformAnimationData(keyframes, i, defaultMatrix.elements[i]);\n      }\n\n      return keyframes; // array sort function\n\n      function ascending(a, b) {\n        return a.time - b.time;\n      }\n    }\n\n    var position = new Vector3();\n    var scale = new Vector3();\n    var quaternion = new Quaternion();\n\n    function createKeyframeTracks(animation, tracks) {\n      var keyframes = animation.keyframes;\n      var name = animation.name;\n      var times = [];\n      var positionData = [];\n      var quaternionData = [];\n      var scaleData = [];\n\n      for (var i = 0, l = keyframes.length; i < l; i++) {\n        var keyframe = keyframes[i];\n        var time = keyframe.time;\n        var value = keyframe.value;\n        matrix.fromArray(value).transpose();\n        matrix.decompose(position, quaternion, scale);\n        times.push(time);\n        positionData.push(position.x, position.y, position.z);\n        quaternionData.push(quaternion.x, quaternion.y, quaternion.z, quaternion.w);\n        scaleData.push(scale.x, scale.y, scale.z);\n      }\n\n      if (positionData.length > 0) tracks.push(new VectorKeyframeTrack(name + '.position', times, positionData));\n      if (quaternionData.length > 0) tracks.push(new QuaternionKeyframeTrack(name + '.quaternion', times, quaternionData));\n      if (scaleData.length > 0) tracks.push(new VectorKeyframeTrack(name + '.scale', times, scaleData));\n      return tracks;\n    }\n\n    function transformAnimationData(keyframes, property, defaultValue) {\n      var keyframe;\n      var empty = true;\n      var i, l; // check, if values of a property are missing in our keyframes\n\n      for (i = 0, l = keyframes.length; i < l; i++) {\n        keyframe = keyframes[i];\n\n        if (keyframe.value[property] === undefined) {\n          keyframe.value[property] = null; // mark as missing\n        } else {\n          empty = false;\n        }\n      }\n\n      if (empty === true) {\n        // no values at all, so we set a default value\n        for (i = 0, l = keyframes.length; i < l; i++) {\n          keyframe = keyframes[i];\n          keyframe.value[property] = defaultValue;\n        }\n      } else {\n        // filling gaps\n        createMissingKeyframes(keyframes, property);\n      }\n    }\n\n    function createMissingKeyframes(keyframes, property) {\n      var prev, next;\n\n      for (var i = 0, l = keyframes.length; i < l; i++) {\n        var keyframe = keyframes[i];\n\n        if (keyframe.value[property] === null) {\n          prev = getPrev(keyframes, i, property);\n          next = getNext(keyframes, i, property);\n\n          if (prev === null) {\n            keyframe.value[property] = next.value[property];\n            continue;\n          }\n\n          if (next === null) {\n            keyframe.value[property] = prev.value[property];\n            continue;\n          }\n\n          interpolate(keyframe, prev, next, property);\n        }\n      }\n    }\n\n    function getPrev(keyframes, i, property) {\n      while (i >= 0) {\n        var keyframe = keyframes[i];\n        if (keyframe.value[property] !== null) return keyframe;\n        i--;\n      }\n\n      return null;\n    }\n\n    function getNext(keyframes, i, property) {\n      while (i < keyframes.length) {\n        var keyframe = keyframes[i];\n        if (keyframe.value[property] !== null) return keyframe;\n        i++;\n      }\n\n      return null;\n    }\n\n    function interpolate(key, prev, next, property) {\n      if (next.time - prev.time === 0) {\n        key.value[property] = prev.value[property];\n        return;\n      }\n\n      key.value[property] = (key.time - prev.time) * (next.value[property] - prev.value[property]) / (next.time - prev.time) + prev.value[property];\n    } // animation clips\n\n\n    function parseAnimationClip(xml) {\n      var data = {\n        name: xml.getAttribute('id') || 'default',\n        start: parseFloat(xml.getAttribute('start') || 0),\n        end: parseFloat(xml.getAttribute('end') || 0),\n        animations: []\n      };\n\n      for (var i = 0, l = xml.childNodes.length; i < l; i++) {\n        var child = xml.childNodes[i];\n        if (child.nodeType !== 1) continue;\n\n        switch (child.nodeName) {\n          case 'instance_animation':\n            data.animations.push(parseId(child.getAttribute('url')));\n            break;\n        }\n      }\n\n      library.clips[xml.getAttribute('id')] = data;\n    }\n\n    function buildAnimationClip(data) {\n      var tracks = [];\n      var name = data.name;\n      var duration = data.end - data.start || -1;\n      var animations = data.animations;\n\n      for (var i = 0, il = animations.length; i < il; i++) {\n        var animationTracks = getAnimation(animations[i]);\n\n        for (var j = 0, jl = animationTracks.length; j < jl; j++) {\n          tracks.push(animationTracks[j]);\n        }\n      }\n\n      return new AnimationClip(name, duration, tracks);\n    }\n\n    function getAnimationClip(id) {\n      return getBuild(library.clips[id], buildAnimationClip);\n    } // controller\n\n\n    function parseController(xml) {\n      var data = {};\n\n      for (var i = 0, l = xml.childNodes.length; i < l; i++) {\n        var child = xml.childNodes[i];\n        if (child.nodeType !== 1) continue;\n\n        switch (child.nodeName) {\n          case 'skin':\n            // there is exactly one skin per controller\n            data.id = parseId(child.getAttribute('source'));\n            data.skin = parseSkin(child);\n            break;\n\n          case 'morph':\n            data.id = parseId(child.getAttribute('source'));\n            console.warn('THREE.ColladaLoader: Morph target animation not supported yet.');\n            break;\n        }\n      }\n\n      library.controllers[xml.getAttribute('id')] = data;\n    }\n\n    function parseSkin(xml) {\n      var data = {\n        sources: {}\n      };\n\n      for (var i = 0, l = xml.childNodes.length; i < l; i++) {\n        var child = xml.childNodes[i];\n        if (child.nodeType !== 1) continue;\n\n        switch (child.nodeName) {\n          case 'bind_shape_matrix':\n            data.bindShapeMatrix = parseFloats(child.textContent);\n            break;\n\n          case 'source':\n            var id = child.getAttribute('id');\n            data.sources[id] = parseSource(child);\n            break;\n\n          case 'joints':\n            data.joints = parseJoints(child);\n            break;\n\n          case 'vertex_weights':\n            data.vertexWeights = parseVertexWeights(child);\n            break;\n        }\n      }\n\n      return data;\n    }\n\n    function parseJoints(xml) {\n      var data = {\n        inputs: {}\n      };\n\n      for (var i = 0, l = xml.childNodes.length; i < l; i++) {\n        var child = xml.childNodes[i];\n        if (child.nodeType !== 1) continue;\n\n        switch (child.nodeName) {\n          case 'input':\n            var semantic = child.getAttribute('semantic');\n            var id = parseId(child.getAttribute('source'));\n            data.inputs[semantic] = id;\n            break;\n        }\n      }\n\n      return data;\n    }\n\n    function parseVertexWeights(xml) {\n      var data = {\n        inputs: {}\n      };\n\n      for (var i = 0, l = xml.childNodes.length; i < l; i++) {\n        var child = xml.childNodes[i];\n        if (child.nodeType !== 1) continue;\n\n        switch (child.nodeName) {\n          case 'input':\n            var semantic = child.getAttribute('semantic');\n            var id = parseId(child.getAttribute('source'));\n            var offset = parseInt(child.getAttribute('offset'));\n            data.inputs[semantic] = {\n              id: id,\n              offset: offset\n            };\n            break;\n\n          case 'vcount':\n            data.vcount = parseInts(child.textContent);\n            break;\n\n          case 'v':\n            data.v = parseInts(child.textContent);\n            break;\n        }\n      }\n\n      return data;\n    }\n\n    function buildController(data) {\n      var build = {\n        id: data.id\n      };\n      var geometry = library.geometries[build.id];\n\n      if (data.skin !== undefined) {\n        build.skin = buildSkin(data.skin); // we enhance the 'sources' property of the corresponding geometry with our skin data\n\n        geometry.sources.skinIndices = build.skin.indices;\n        geometry.sources.skinWeights = build.skin.weights;\n      }\n\n      return build;\n    }\n\n    function buildSkin(data) {\n      var BONE_LIMIT = 4;\n      var build = {\n        joints: [],\n        // this must be an array to preserve the joint order\n        indices: {\n          array: [],\n          stride: BONE_LIMIT\n        },\n        weights: {\n          array: [],\n          stride: BONE_LIMIT\n        }\n      };\n      var sources = data.sources;\n      var vertexWeights = data.vertexWeights;\n      var vcount = vertexWeights.vcount;\n      var v = vertexWeights.v;\n      var jointOffset = vertexWeights.inputs.JOINT.offset;\n      var weightOffset = vertexWeights.inputs.WEIGHT.offset;\n      var jointSource = data.sources[data.joints.inputs.JOINT];\n      var inverseSource = data.sources[data.joints.inputs.INV_BIND_MATRIX];\n      var weights = sources[vertexWeights.inputs.WEIGHT.id].array;\n      var stride = 0;\n      var i, j, l; // procces skin data for each vertex\n\n      for (i = 0, l = vcount.length; i < l; i++) {\n        var jointCount = vcount[i]; // this is the amount of joints that affect a single vertex\n\n        var vertexSkinData = [];\n\n        for (j = 0; j < jointCount; j++) {\n          var skinIndex = v[stride + jointOffset];\n          var weightId = v[stride + weightOffset];\n          var skinWeight = weights[weightId];\n          vertexSkinData.push({\n            index: skinIndex,\n            weight: skinWeight\n          });\n          stride += 2;\n        } // we sort the joints in descending order based on the weights.\n        // this ensures, we only procced the most important joints of the vertex\n\n\n        vertexSkinData.sort(descending); // now we provide for each vertex a set of four index and weight values.\n        // the order of the skin data matches the order of vertices\n\n        for (j = 0; j < BONE_LIMIT; j++) {\n          var d = vertexSkinData[j];\n\n          if (d !== undefined) {\n            build.indices.array.push(d.index);\n            build.weights.array.push(d.weight);\n          } else {\n            build.indices.array.push(0);\n            build.weights.array.push(0);\n          }\n        }\n      } // setup bind matrix\n\n\n      if (data.bindShapeMatrix) {\n        build.bindMatrix = new Matrix4().fromArray(data.bindShapeMatrix).transpose();\n      } else {\n        build.bindMatrix = new Matrix4().identity();\n      } // process bones and inverse bind matrix data\n\n\n      for (i = 0, l = jointSource.array.length; i < l; i++) {\n        var name = jointSource.array[i];\n        var boneInverse = new Matrix4().fromArray(inverseSource.array, i * inverseSource.stride).transpose();\n        build.joints.push({\n          name: name,\n          boneInverse: boneInverse\n        });\n      }\n\n      return build; // array sort function\n\n      function descending(a, b) {\n        return b.weight - a.weight;\n      }\n    }\n\n    function getController(id) {\n      return getBuild(library.controllers[id], buildController);\n    } // image\n\n\n    function parseImage(xml) {\n      var data = {\n        init_from: getElementsByTagName(xml, 'init_from')[0].textContent\n      };\n      library.images[xml.getAttribute('id')] = data;\n    }\n\n    function buildImage(data) {\n      if (data.build !== undefined) return data.build;\n      return data.init_from;\n    }\n\n    function getImage(id) {\n      var data = library.images[id];\n\n      if (data !== undefined) {\n        return getBuild(data, buildImage);\n      }\n\n      console.warn('THREE.ColladaLoader: Couldn\\'t find image with ID:', id);\n      return null;\n    } // effect\n\n\n    function parseEffect(xml) {\n      var data = {};\n\n      for (var i = 0, l = xml.childNodes.length; i < l; i++) {\n        var child = xml.childNodes[i];\n        if (child.nodeType !== 1) continue;\n\n        switch (child.nodeName) {\n          case 'profile_COMMON':\n            data.profile = parseEffectProfileCOMMON(child);\n            break;\n        }\n      }\n\n      library.effects[xml.getAttribute('id')] = data;\n    }\n\n    function parseEffectProfileCOMMON(xml) {\n      var data = {\n        surfaces: {},\n        samplers: {}\n      };\n\n      for (var i = 0, l = xml.childNodes.length; i < l; i++) {\n        var child = xml.childNodes[i];\n        if (child.nodeType !== 1) continue;\n\n        switch (child.nodeName) {\n          case 'newparam':\n            parseEffectNewparam(child, data);\n            break;\n\n          case 'technique':\n            data.technique = parseEffectTechnique(child);\n            break;\n\n          case 'extra':\n            data.extra = parseEffectExtra(child);\n            break;\n        }\n      }\n\n      return data;\n    }\n\n    function parseEffectNewparam(xml, data) {\n      var sid = xml.getAttribute('sid');\n\n      for (var i = 0, l = xml.childNodes.length; i < l; i++) {\n        var child = xml.childNodes[i];\n        if (child.nodeType !== 1) continue;\n\n        switch (child.nodeName) {\n          case 'surface':\n            data.surfaces[sid] = parseEffectSurface(child);\n            break;\n\n          case 'sampler2D':\n            data.samplers[sid] = parseEffectSampler(child);\n            break;\n        }\n      }\n    }\n\n    function parseEffectSurface(xml) {\n      var data = {};\n\n      for (var i = 0, l = xml.childNodes.length; i < l; i++) {\n        var child = xml.childNodes[i];\n        if (child.nodeType !== 1) continue;\n\n        switch (child.nodeName) {\n          case 'init_from':\n            data.init_from = child.textContent;\n            break;\n        }\n      }\n\n      return data;\n    }\n\n    function parseEffectSampler(xml) {\n      var data = {};\n\n      for (var i = 0, l = xml.childNodes.length; i < l; i++) {\n        var child = xml.childNodes[i];\n        if (child.nodeType !== 1) continue;\n\n        switch (child.nodeName) {\n          case 'source':\n            data.source = child.textContent;\n            break;\n        }\n      }\n\n      return data;\n    }\n\n    function parseEffectTechnique(xml) {\n      var data = {};\n\n      for (var i = 0, l = xml.childNodes.length; i < l; i++) {\n        var child = xml.childNodes[i];\n        if (child.nodeType !== 1) continue;\n\n        switch (child.nodeName) {\n          case 'constant':\n          case 'lambert':\n          case 'blinn':\n          case 'phong':\n            data.type = child.nodeName;\n            data.parameters = parseEffectParameters(child);\n            break;\n        }\n      }\n\n      return data;\n    }\n\n    function parseEffectParameters(xml) {\n      var data = {};\n\n      for (var i = 0, l = xml.childNodes.length; i < l; i++) {\n        var child = xml.childNodes[i];\n        if (child.nodeType !== 1) continue;\n\n        switch (child.nodeName) {\n          case 'emission':\n          case 'diffuse':\n          case 'specular':\n          case 'bump':\n          case 'ambient':\n          case 'shininess':\n          case 'transparency':\n            data[child.nodeName] = parseEffectParameter(child);\n            break;\n\n          case 'transparent':\n            data[child.nodeName] = {\n              opaque: child.getAttribute('opaque'),\n              data: parseEffectParameter(child)\n            };\n            break;\n        }\n      }\n\n      return data;\n    }\n\n    function parseEffectParameter(xml) {\n      var data = {};\n\n      for (var i = 0, l = xml.childNodes.length; i < l; i++) {\n        var child = xml.childNodes[i];\n        if (child.nodeType !== 1) continue;\n\n        switch (child.nodeName) {\n          case 'color':\n            data[child.nodeName] = parseFloats(child.textContent);\n            break;\n\n          case 'float':\n            data[child.nodeName] = parseFloat(child.textContent);\n            break;\n\n          case 'texture':\n            data[child.nodeName] = {\n              id: child.getAttribute('texture'),\n              extra: parseEffectParameterTexture(child)\n            };\n            break;\n        }\n      }\n\n      return data;\n    }\n\n    function parseEffectParameterTexture(xml) {\n      var data = {\n        technique: {}\n      };\n\n      for (var i = 0, l = xml.childNodes.length; i < l; i++) {\n        var child = xml.childNodes[i];\n        if (child.nodeType !== 1) continue;\n\n        switch (child.nodeName) {\n          case 'extra':\n            parseEffectParameterTextureExtra(child, data);\n            break;\n        }\n      }\n\n      return data;\n    }\n\n    function parseEffectParameterTextureExtra(xml, data) {\n      for (var i = 0, l = xml.childNodes.length; i < l; i++) {\n        var child = xml.childNodes[i];\n        if (child.nodeType !== 1) continue;\n\n        switch (child.nodeName) {\n          case 'technique':\n            parseEffectParameterTextureExtraTechnique(child, data);\n            break;\n        }\n      }\n    }\n\n    function parseEffectParameterTextureExtraTechnique(xml, data) {\n      for (var i = 0, l = xml.childNodes.length; i < l; i++) {\n        var child = xml.childNodes[i];\n        if (child.nodeType !== 1) continue;\n\n        switch (child.nodeName) {\n          case 'repeatU':\n          case 'repeatV':\n          case 'offsetU':\n          case 'offsetV':\n            data.technique[child.nodeName] = parseFloat(child.textContent);\n            break;\n\n          case 'wrapU':\n          case 'wrapV':\n            // some files have values for wrapU/wrapV which become NaN via parseInt\n            if (child.textContent.toUpperCase() === 'TRUE') {\n              data.technique[child.nodeName] = 1;\n            } else if (child.textContent.toUpperCase() === 'FALSE') {\n              data.technique[child.nodeName] = 0;\n            } else {\n              data.technique[child.nodeName] = parseInt(child.textContent);\n            }\n\n            break;\n        }\n      }\n    }\n\n    function parseEffectExtra(xml) {\n      var data = {};\n\n      for (var i = 0, l = xml.childNodes.length; i < l; i++) {\n        var child = xml.childNodes[i];\n        if (child.nodeType !== 1) continue;\n\n        switch (child.nodeName) {\n          case 'technique':\n            data.technique = parseEffectExtraTechnique(child);\n            break;\n        }\n      }\n\n      return data;\n    }\n\n    function parseEffectExtraTechnique(xml) {\n      var data = {};\n\n      for (var i = 0, l = xml.childNodes.length; i < l; i++) {\n        var child = xml.childNodes[i];\n        if (child.nodeType !== 1) continue;\n\n        switch (child.nodeName) {\n          case 'double_sided':\n            data[child.nodeName] = parseInt(child.textContent);\n            break;\n        }\n      }\n\n      return data;\n    }\n\n    function buildEffect(data) {\n      return data;\n    }\n\n    function getEffect(id) {\n      return getBuild(library.effects[id], buildEffect);\n    } // material\n\n\n    function parseMaterial(xml) {\n      var data = {\n        name: xml.getAttribute('name')\n      };\n\n      for (var i = 0, l = xml.childNodes.length; i < l; i++) {\n        var child = xml.childNodes[i];\n        if (child.nodeType !== 1) continue;\n\n        switch (child.nodeName) {\n          case 'instance_effect':\n            data.url = parseId(child.getAttribute('url'));\n            break;\n        }\n      }\n\n      library.materials[xml.getAttribute('id')] = data;\n    }\n\n    function getTextureLoader(image) {\n      var loader;\n      var extension = image.slice((image.lastIndexOf('.') - 1 >>> 0) + 2); // http://www.jstips.co/en/javascript/get-file-extension/\n\n      extension = extension.toLowerCase();\n\n      switch (extension) {\n        case 'tga':\n          loader = tgaLoader;\n          break;\n\n        default:\n          loader = textureLoader;\n      }\n\n      return loader;\n    }\n\n    function buildMaterial(data) {\n      var effect = getEffect(data.url);\n      var technique = effect.profile.technique;\n      var extra = effect.profile.extra;\n      var material;\n\n      switch (technique.type) {\n        case 'phong':\n        case 'blinn':\n          material = new MeshPhongMaterial();\n          break;\n\n        case 'lambert':\n          material = new MeshLambertMaterial();\n          break;\n\n        default:\n          material = new MeshBasicMaterial();\n          break;\n      }\n\n      material.name = data.name || '';\n\n      function getTexture(textureObject) {\n        var sampler = effect.profile.samplers[textureObject.id];\n        var image = null; // get image\n\n        if (sampler !== undefined) {\n          var surface = effect.profile.surfaces[sampler.source];\n          image = getImage(surface.init_from);\n        } else {\n          console.warn('THREE.ColladaLoader: Undefined sampler. Access image directly (see #12530).');\n          image = getImage(textureObject.id);\n        } // create texture if image is avaiable\n\n\n        if (image !== null) {\n          var loader = getTextureLoader(image);\n\n          if (loader !== undefined) {\n            var texture = loader.load(image);\n            var extra = textureObject.extra;\n\n            if (extra !== undefined && extra.technique !== undefined && isEmpty(extra.technique) === false) {\n              var technique = extra.technique;\n              texture.wrapS = technique.wrapU ? RepeatWrapping : ClampToEdgeWrapping;\n              texture.wrapT = technique.wrapV ? RepeatWrapping : ClampToEdgeWrapping;\n              texture.offset.set(technique.offsetU || 0, technique.offsetV || 0);\n              texture.repeat.set(technique.repeatU || 1, technique.repeatV || 1);\n            } else {\n              texture.wrapS = RepeatWrapping;\n              texture.wrapT = RepeatWrapping;\n            }\n\n            return texture;\n          } else {\n            console.warn('THREE.ColladaLoader: Loader for texture %s not found.', image);\n            return null;\n          }\n        } else {\n          console.warn('THREE.ColladaLoader: Couldn\\'t create texture with ID:', textureObject.id);\n          return null;\n        }\n      }\n\n      var parameters = technique.parameters;\n\n      for (var key in parameters) {\n        var parameter = parameters[key];\n\n        switch (key) {\n          case 'diffuse':\n            if (parameter.color) material.color.fromArray(parameter.color);\n            if (parameter.texture) material.map = getTexture(parameter.texture);\n            break;\n\n          case 'specular':\n            if (parameter.color && material.specular) material.specular.fromArray(parameter.color);\n            if (parameter.texture) material.specularMap = getTexture(parameter.texture);\n            break;\n\n          case 'bump':\n            if (parameter.texture) material.normalMap = getTexture(parameter.texture);\n            break;\n\n          case 'ambient':\n            if (parameter.texture) material.lightMap = getTexture(parameter.texture);\n            break;\n\n          case 'shininess':\n            if (parameter.float && material.shininess) material.shininess = parameter.float;\n            break;\n\n          case 'emission':\n            if (parameter.color && material.emissive) material.emissive.fromArray(parameter.color);\n            if (parameter.texture) material.emissiveMap = getTexture(parameter.texture);\n            break;\n        }\n      } //\n\n\n      var transparent = parameters['transparent'];\n      var transparency = parameters['transparency']; // <transparency> does not exist but <transparent>\n\n      if (transparency === undefined && transparent) {\n        transparency = {\n          float: 1\n        };\n      } // <transparent> does not exist but <transparency>\n\n\n      if (transparent === undefined && transparency) {\n        transparent = {\n          opaque: 'A_ONE',\n          data: {\n            color: [1, 1, 1, 1]\n          }\n        };\n      }\n\n      if (transparent && transparency) {\n        // handle case if a texture exists but no color\n        if (transparent.data.texture) {\n          // we do not set an alpha map (see #13792)\n          material.transparent = true;\n        } else {\n          var color = transparent.data.color;\n\n          switch (transparent.opaque) {\n            case 'A_ONE':\n              material.opacity = color[3] * transparency.float;\n              break;\n\n            case 'RGB_ZERO':\n              material.opacity = 1 - color[0] * transparency.float;\n              break;\n\n            case 'A_ZERO':\n              material.opacity = 1 - color[3] * transparency.float;\n              break;\n\n            case 'RGB_ONE':\n              material.opacity = color[0] * transparency.float;\n              break;\n\n            default:\n              console.warn('THREE.ColladaLoader: Invalid opaque type \"%s\" of transparent tag.', transparent.opaque);\n          }\n\n          if (material.opacity < 1) material.transparent = true;\n        }\n      } //\n\n\n      if (extra !== undefined && extra.technique !== undefined && extra.technique.double_sided === 1) {\n        material.side = DoubleSide;\n      }\n\n      return material;\n    }\n\n    function getMaterial(id) {\n      return getBuild(library.materials[id], buildMaterial);\n    } // camera\n\n\n    function parseCamera(xml) {\n      var data = {\n        name: xml.getAttribute('name')\n      };\n\n      for (var i = 0, l = xml.childNodes.length; i < l; i++) {\n        var child = xml.childNodes[i];\n        if (child.nodeType !== 1) continue;\n\n        switch (child.nodeName) {\n          case 'optics':\n            data.optics = parseCameraOptics(child);\n            break;\n        }\n      }\n\n      library.cameras[xml.getAttribute('id')] = data;\n    }\n\n    function parseCameraOptics(xml) {\n      for (var i = 0; i < xml.childNodes.length; i++) {\n        var child = xml.childNodes[i];\n\n        switch (child.nodeName) {\n          case 'technique_common':\n            return parseCameraTechnique(child);\n        }\n      }\n\n      return {};\n    }\n\n    function parseCameraTechnique(xml) {\n      var data = {};\n\n      for (var i = 0; i < xml.childNodes.length; i++) {\n        var child = xml.childNodes[i];\n\n        switch (child.nodeName) {\n          case 'perspective':\n          case 'orthographic':\n            data.technique = child.nodeName;\n            data.parameters = parseCameraParameters(child);\n            break;\n        }\n      }\n\n      return data;\n    }\n\n    function parseCameraParameters(xml) {\n      var data = {};\n\n      for (var i = 0; i < xml.childNodes.length; i++) {\n        var child = xml.childNodes[i];\n\n        switch (child.nodeName) {\n          case 'xfov':\n          case 'yfov':\n          case 'xmag':\n          case 'ymag':\n          case 'znear':\n          case 'zfar':\n          case 'aspect_ratio':\n            data[child.nodeName] = parseFloat(child.textContent);\n            break;\n        }\n      }\n\n      return data;\n    }\n\n    function buildCamera(data) {\n      var camera;\n\n      switch (data.optics.technique) {\n        case 'perspective':\n          camera = new PerspectiveCamera(data.optics.parameters.yfov, data.optics.parameters.aspect_ratio, data.optics.parameters.znear, data.optics.parameters.zfar);\n          break;\n\n        case 'orthographic':\n          var ymag = data.optics.parameters.ymag;\n          var xmag = data.optics.parameters.xmag;\n          var aspectRatio = data.optics.parameters.aspect_ratio;\n          xmag = xmag === undefined ? ymag * aspectRatio : xmag;\n          ymag = ymag === undefined ? xmag / aspectRatio : ymag;\n          xmag *= 0.5;\n          ymag *= 0.5;\n          camera = new OrthographicCamera(-xmag, xmag, ymag, -ymag, // left, right, top, bottom\n          data.optics.parameters.znear, data.optics.parameters.zfar);\n          break;\n\n        default:\n          camera = new PerspectiveCamera();\n          break;\n      }\n\n      camera.name = data.name || '';\n      return camera;\n    }\n\n    function getCamera(id) {\n      var data = library.cameras[id];\n\n      if (data !== undefined) {\n        return getBuild(data, buildCamera);\n      }\n\n      console.warn('THREE.ColladaLoader: Couldn\\'t find camera with ID:', id);\n      return null;\n    } // light\n\n\n    function parseLight(xml) {\n      var data = {};\n\n      for (var i = 0, l = xml.childNodes.length; i < l; i++) {\n        var child = xml.childNodes[i];\n        if (child.nodeType !== 1) continue;\n\n        switch (child.nodeName) {\n          case 'technique_common':\n            data = parseLightTechnique(child);\n            break;\n        }\n      }\n\n      library.lights[xml.getAttribute('id')] = data;\n    }\n\n    function parseLightTechnique(xml) {\n      var data = {};\n\n      for (var i = 0, l = xml.childNodes.length; i < l; i++) {\n        var child = xml.childNodes[i];\n        if (child.nodeType !== 1) continue;\n\n        switch (child.nodeName) {\n          case 'directional':\n          case 'point':\n          case 'spot':\n          case 'ambient':\n            data.technique = child.nodeName;\n            data.parameters = parseLightParameters(child);\n        }\n      }\n\n      return data;\n    }\n\n    function parseLightParameters(xml) {\n      var data = {};\n\n      for (var i = 0, l = xml.childNodes.length; i < l; i++) {\n        var child = xml.childNodes[i];\n        if (child.nodeType !== 1) continue;\n\n        switch (child.nodeName) {\n          case 'color':\n            var array = parseFloats(child.textContent);\n            data.color = new Color().fromArray(array);\n            break;\n\n          case 'falloff_angle':\n            data.falloffAngle = parseFloat(child.textContent);\n            break;\n\n          case 'quadratic_attenuation':\n            var f = parseFloat(child.textContent);\n            data.distance = f ? Math.sqrt(1 / f) : 0;\n            break;\n        }\n      }\n\n      return data;\n    }\n\n    function buildLight(data) {\n      var light;\n\n      switch (data.technique) {\n        case 'directional':\n          light = new DirectionalLight();\n          break;\n\n        case 'point':\n          light = new PointLight();\n          break;\n\n        case 'spot':\n          light = new SpotLight();\n          break;\n\n        case 'ambient':\n          light = new AmbientLight();\n          break;\n      }\n\n      if (data.parameters.color) light.color.copy(data.parameters.color);\n      if (data.parameters.distance) light.distance = data.parameters.distance;\n      return light;\n    }\n\n    function getLight(id) {\n      var data = library.lights[id];\n\n      if (data !== undefined) {\n        return getBuild(data, buildLight);\n      }\n\n      console.warn('THREE.ColladaLoader: Couldn\\'t find light with ID:', id);\n      return null;\n    } // geometry\n\n\n    function parseGeometry(xml) {\n      var data = {\n        name: xml.getAttribute('name'),\n        sources: {},\n        vertices: {},\n        primitives: []\n      };\n      var mesh = getElementsByTagName(xml, 'mesh')[0]; // the following tags inside geometry are not supported yet (see https://github.com/mrdoob/three.js/pull/12606): convex_mesh, spline, brep\n\n      if (mesh === undefined) return;\n\n      for (var i = 0; i < mesh.childNodes.length; i++) {\n        var child = mesh.childNodes[i];\n        if (child.nodeType !== 1) continue;\n        var id = child.getAttribute('id');\n\n        switch (child.nodeName) {\n          case 'source':\n            data.sources[id] = parseSource(child);\n            break;\n\n          case 'vertices':\n            // data.sources[ id ] = data.sources[ parseId( getElementsByTagName( child, 'input' )[ 0 ].getAttribute( 'source' ) ) ];\n            data.vertices = parseGeometryVertices(child);\n            break;\n\n          case 'polygons':\n            console.warn('THREE.ColladaLoader: Unsupported primitive type: ', child.nodeName);\n            break;\n\n          case 'lines':\n          case 'linestrips':\n          case 'polylist':\n          case 'triangles':\n            data.primitives.push(parseGeometryPrimitive(child));\n            break;\n\n          default:\n            console.log(child);\n        }\n      }\n\n      library.geometries[xml.getAttribute('id')] = data;\n    }\n\n    function parseSource(xml) {\n      var data = {\n        array: [],\n        stride: 3\n      };\n\n      for (var i = 0; i < xml.childNodes.length; i++) {\n        var child = xml.childNodes[i];\n        if (child.nodeType !== 1) continue;\n\n        switch (child.nodeName) {\n          case 'float_array':\n            data.array = parseFloats(child.textContent);\n            break;\n\n          case 'Name_array':\n            data.array = parseStrings(child.textContent);\n            break;\n\n          case 'technique_common':\n            var accessor = getElementsByTagName(child, 'accessor')[0];\n\n            if (accessor !== undefined) {\n              data.stride = parseInt(accessor.getAttribute('stride'));\n            }\n\n            break;\n        }\n      }\n\n      return data;\n    }\n\n    function parseGeometryVertices(xml) {\n      var data = {};\n\n      for (var i = 0; i < xml.childNodes.length; i++) {\n        var child = xml.childNodes[i];\n        if (child.nodeType !== 1) continue;\n        data[child.getAttribute('semantic')] = parseId(child.getAttribute('source'));\n      }\n\n      return data;\n    }\n\n    function parseGeometryPrimitive(xml) {\n      var primitive = {\n        type: xml.nodeName,\n        material: xml.getAttribute('material'),\n        count: parseInt(xml.getAttribute('count')),\n        inputs: {},\n        stride: 0,\n        hasUV: false\n      };\n\n      for (var i = 0, l = xml.childNodes.length; i < l; i++) {\n        var child = xml.childNodes[i];\n        if (child.nodeType !== 1) continue;\n\n        switch (child.nodeName) {\n          case 'input':\n            var id = parseId(child.getAttribute('source'));\n            var semantic = child.getAttribute('semantic');\n            var offset = parseInt(child.getAttribute('offset'));\n            var set = parseInt(child.getAttribute('set'));\n            var inputname = set > 0 ? semantic + set : semantic;\n            primitive.inputs[inputname] = {\n              id: id,\n              offset: offset\n            };\n            primitive.stride = Math.max(primitive.stride, offset + 1);\n            if (semantic === 'TEXCOORD') primitive.hasUV = true;\n            break;\n\n          case 'vcount':\n            primitive.vcount = parseInts(child.textContent);\n            break;\n\n          case 'p':\n            primitive.p = parseInts(child.textContent);\n            break;\n        }\n      }\n\n      return primitive;\n    }\n\n    function groupPrimitives(primitives) {\n      var build = {};\n\n      for (var i = 0; i < primitives.length; i++) {\n        var primitive = primitives[i];\n        if (build[primitive.type] === undefined) build[primitive.type] = [];\n        build[primitive.type].push(primitive);\n      }\n\n      return build;\n    }\n\n    function checkUVCoordinates(primitives) {\n      var count = 0;\n\n      for (var i = 0, l = primitives.length; i < l; i++) {\n        var primitive = primitives[i];\n\n        if (primitive.hasUV === true) {\n          count++;\n        }\n      }\n\n      if (count > 0 && count < primitives.length) {\n        primitives.uvsNeedsFix = true;\n      }\n    }\n\n    function buildGeometry(data) {\n      var build = {};\n      var sources = data.sources;\n      var vertices = data.vertices;\n      var primitives = data.primitives;\n      if (primitives.length === 0) return {}; // our goal is to create one buffer geometry for a single type of primitives\n      // first, we group all primitives by their type\n\n      var groupedPrimitives = groupPrimitives(primitives);\n\n      for (var type in groupedPrimitives) {\n        var primitiveType = groupedPrimitives[type]; // second, ensure consistent uv coordinates for each type of primitives (polylist,triangles or lines)\n\n        checkUVCoordinates(primitiveType); // third, create a buffer geometry for each type of primitives\n\n        build[type] = buildGeometryType(primitiveType, sources, vertices);\n      }\n\n      return build;\n    }\n\n    function buildGeometryType(primitives, sources, vertices) {\n      var build = {};\n      var position = {\n        array: [],\n        stride: 0\n      };\n      var normal = {\n        array: [],\n        stride: 0\n      };\n      var uv = {\n        array: [],\n        stride: 0\n      };\n      var uv2 = {\n        array: [],\n        stride: 0\n      };\n      var color = {\n        array: [],\n        stride: 0\n      };\n      var skinIndex = {\n        array: [],\n        stride: 4\n      };\n      var skinWeight = {\n        array: [],\n        stride: 4\n      };\n      var geometry = new BufferGeometry();\n      var materialKeys = [];\n      var start = 0;\n\n      for (var p = 0; p < primitives.length; p++) {\n        var primitive = primitives[p];\n        var inputs = primitive.inputs; // groups\n\n        var count = 0;\n\n        switch (primitive.type) {\n          case 'lines':\n          case 'linestrips':\n            count = primitive.count * 2;\n            break;\n\n          case 'triangles':\n            count = primitive.count * 3;\n            break;\n\n          case 'polylist':\n            for (var g = 0; g < primitive.count; g++) {\n              var vc = primitive.vcount[g];\n\n              switch (vc) {\n                case 3:\n                  count += 3; // single triangle\n\n                  break;\n\n                case 4:\n                  count += 6; // quad, subdivided into two triangles\n\n                  break;\n\n                default:\n                  count += (vc - 2) * 3; // polylist with more than four vertices\n\n                  break;\n              }\n            }\n\n            break;\n\n          default:\n            console.warn('THREE.ColladaLoader: Unknow primitive type:', primitive.type);\n        }\n\n        geometry.addGroup(start, count, p);\n        start += count; // material\n\n        if (primitive.material) {\n          materialKeys.push(primitive.material);\n        } // geometry data\n\n\n        for (var name in inputs) {\n          var input = inputs[name];\n\n          switch (name) {\n            case 'VERTEX':\n              for (var key in vertices) {\n                var id = vertices[key];\n\n                switch (key) {\n                  case 'POSITION':\n                    var prevLength = position.array.length;\n                    buildGeometryData(primitive, sources[id], input.offset, position.array);\n                    position.stride = sources[id].stride;\n\n                    if (sources.skinWeights && sources.skinIndices) {\n                      buildGeometryData(primitive, sources.skinIndices, input.offset, skinIndex.array);\n                      buildGeometryData(primitive, sources.skinWeights, input.offset, skinWeight.array);\n                    } // see #3803\n\n\n                    if (primitive.hasUV === false && primitives.uvsNeedsFix === true) {\n                      var count = (position.array.length - prevLength) / position.stride;\n\n                      for (var i = 0; i < count; i++) {\n                        // fill missing uv coordinates\n                        uv.array.push(0, 0);\n                      }\n                    }\n\n                    break;\n\n                  case 'NORMAL':\n                    buildGeometryData(primitive, sources[id], input.offset, normal.array);\n                    normal.stride = sources[id].stride;\n                    break;\n\n                  case 'COLOR':\n                    buildGeometryData(primitive, sources[id], input.offset, color.array);\n                    color.stride = sources[id].stride;\n                    break;\n\n                  case 'TEXCOORD':\n                    buildGeometryData(primitive, sources[id], input.offset, uv.array);\n                    uv.stride = sources[id].stride;\n                    break;\n\n                  case 'TEXCOORD1':\n                    buildGeometryData(primitive, sources[id], input.offset, uv2.array);\n                    uv.stride = sources[id].stride;\n                    break;\n\n                  default:\n                    console.warn('THREE.ColladaLoader: Semantic \"%s\" not handled in geometry build process.', key);\n                }\n              }\n\n              break;\n\n            case 'NORMAL':\n              buildGeometryData(primitive, sources[input.id], input.offset, normal.array);\n              normal.stride = sources[input.id].stride;\n              break;\n\n            case 'COLOR':\n              buildGeometryData(primitive, sources[input.id], input.offset, color.array);\n              color.stride = sources[input.id].stride;\n              break;\n\n            case 'TEXCOORD':\n              buildGeometryData(primitive, sources[input.id], input.offset, uv.array);\n              uv.stride = sources[input.id].stride;\n              break;\n\n            case 'TEXCOORD1':\n              buildGeometryData(primitive, sources[input.id], input.offset, uv2.array);\n              uv2.stride = sources[input.id].stride;\n              break;\n          }\n        }\n      } // build geometry\n\n\n      if (position.array.length > 0) geometry.setAttribute('position', new Float32BufferAttribute(position.array, position.stride));\n      if (normal.array.length > 0) geometry.setAttribute('normal', new Float32BufferAttribute(normal.array, normal.stride));\n      if (color.array.length > 0) geometry.setAttribute('color', new Float32BufferAttribute(color.array, color.stride));\n      if (uv.array.length > 0) geometry.setAttribute('uv', new Float32BufferAttribute(uv.array, uv.stride));\n      if (uv2.array.length > 0) geometry.setAttribute('uv2', new Float32BufferAttribute(uv2.array, uv2.stride));\n      if (skinIndex.array.length > 0) geometry.setAttribute('skinIndex', new Float32BufferAttribute(skinIndex.array, skinIndex.stride));\n      if (skinWeight.array.length > 0) geometry.setAttribute('skinWeight', new Float32BufferAttribute(skinWeight.array, skinWeight.stride));\n      build.data = geometry;\n      build.type = primitives[0].type;\n      build.materialKeys = materialKeys;\n      return build;\n    }\n\n    function buildGeometryData(primitive, source, offset, array) {\n      var indices = primitive.p;\n      var stride = primitive.stride;\n      var vcount = primitive.vcount;\n\n      function pushVector(i) {\n        var index = indices[i + offset] * sourceStride;\n        var length = index + sourceStride;\n\n        for (; index < length; index++) {\n          array.push(sourceArray[index]);\n        }\n      }\n\n      var sourceArray = source.array;\n      var sourceStride = source.stride;\n\n      if (primitive.vcount !== undefined) {\n        var index = 0;\n\n        for (var i = 0, l = vcount.length; i < l; i++) {\n          var count = vcount[i];\n\n          if (count === 4) {\n            var a = index + stride * 0;\n            var b = index + stride * 1;\n            var c = index + stride * 2;\n            var d = index + stride * 3;\n            pushVector(a);\n            pushVector(b);\n            pushVector(d);\n            pushVector(b);\n            pushVector(c);\n            pushVector(d);\n          } else if (count === 3) {\n            var a = index + stride * 0;\n            var b = index + stride * 1;\n            var c = index + stride * 2;\n            pushVector(a);\n            pushVector(b);\n            pushVector(c);\n          } else if (count > 4) {\n            for (var k = 1, kl = count - 2; k <= kl; k++) {\n              var a = index + stride * 0;\n              var b = index + stride * k;\n              var c = index + stride * (k + 1);\n              pushVector(a);\n              pushVector(b);\n              pushVector(c);\n            }\n          }\n\n          index += stride * count;\n        }\n      } else {\n        for (var i = 0, l = indices.length; i < l; i += stride) {\n          pushVector(i);\n        }\n      }\n    }\n\n    function getGeometry(id) {\n      return getBuild(library.geometries[id], buildGeometry);\n    } // kinematics\n\n\n    function parseKinematicsModel(xml) {\n      var data = {\n        name: xml.getAttribute('name') || '',\n        joints: {},\n        links: []\n      };\n\n      for (var i = 0; i < xml.childNodes.length; i++) {\n        var child = xml.childNodes[i];\n        if (child.nodeType !== 1) continue;\n\n        switch (child.nodeName) {\n          case 'technique_common':\n            parseKinematicsTechniqueCommon(child, data);\n            break;\n        }\n      }\n\n      library.kinematicsModels[xml.getAttribute('id')] = data;\n    }\n\n    function buildKinematicsModel(data) {\n      if (data.build !== undefined) return data.build;\n      return data;\n    }\n\n    function getKinematicsModel(id) {\n      return getBuild(library.kinematicsModels[id], buildKinematicsModel);\n    }\n\n    function parseKinematicsTechniqueCommon(xml, data) {\n      for (var i = 0; i < xml.childNodes.length; i++) {\n        var child = xml.childNodes[i];\n        if (child.nodeType !== 1) continue;\n\n        switch (child.nodeName) {\n          case 'joint':\n            data.joints[child.getAttribute('sid')] = parseKinematicsJoint(child);\n            break;\n\n          case 'link':\n            data.links.push(parseKinematicsLink(child));\n            break;\n        }\n      }\n    }\n\n    function parseKinematicsJoint(xml) {\n      var data;\n\n      for (var i = 0; i < xml.childNodes.length; i++) {\n        var child = xml.childNodes[i];\n        if (child.nodeType !== 1) continue;\n\n        switch (child.nodeName) {\n          case 'prismatic':\n          case 'revolute':\n            data = parseKinematicsJointParameter(child);\n            break;\n        }\n      }\n\n      return data;\n    }\n\n    function parseKinematicsJointParameter(xml, data) {\n      var data = {\n        sid: xml.getAttribute('sid'),\n        name: xml.getAttribute('name') || '',\n        axis: new Vector3(),\n        limits: {\n          min: 0,\n          max: 0\n        },\n        type: xml.nodeName,\n        static: false,\n        zeroPosition: 0,\n        middlePosition: 0\n      };\n\n      for (var i = 0; i < xml.childNodes.length; i++) {\n        var child = xml.childNodes[i];\n        if (child.nodeType !== 1) continue;\n\n        switch (child.nodeName) {\n          case 'axis':\n            var array = parseFloats(child.textContent);\n            data.axis.fromArray(array);\n            break;\n\n          case 'limits':\n            var max = child.getElementsByTagName('max')[0];\n            var min = child.getElementsByTagName('min')[0];\n            data.limits.max = parseFloat(max.textContent);\n            data.limits.min = parseFloat(min.textContent);\n            break;\n        }\n      } // if min is equal to or greater than max, consider the joint static\n\n\n      if (data.limits.min >= data.limits.max) {\n        data.static = true;\n      } // calculate middle position\n\n\n      data.middlePosition = (data.limits.min + data.limits.max) / 2.0;\n      return data;\n    }\n\n    function parseKinematicsLink(xml) {\n      var data = {\n        sid: xml.getAttribute('sid'),\n        name: xml.getAttribute('name') || '',\n        attachments: [],\n        transforms: []\n      };\n\n      for (var i = 0; i < xml.childNodes.length; i++) {\n        var child = xml.childNodes[i];\n        if (child.nodeType !== 1) continue;\n\n        switch (child.nodeName) {\n          case 'attachment_full':\n            data.attachments.push(parseKinematicsAttachment(child));\n            break;\n\n          case 'matrix':\n          case 'translate':\n          case 'rotate':\n            data.transforms.push(parseKinematicsTransform(child));\n            break;\n        }\n      }\n\n      return data;\n    }\n\n    function parseKinematicsAttachment(xml) {\n      var data = {\n        joint: xml.getAttribute('joint').split('/').pop(),\n        transforms: [],\n        links: []\n      };\n\n      for (var i = 0; i < xml.childNodes.length; i++) {\n        var child = xml.childNodes[i];\n        if (child.nodeType !== 1) continue;\n\n        switch (child.nodeName) {\n          case 'link':\n            data.links.push(parseKinematicsLink(child));\n            break;\n\n          case 'matrix':\n          case 'translate':\n          case 'rotate':\n            data.transforms.push(parseKinematicsTransform(child));\n            break;\n        }\n      }\n\n      return data;\n    }\n\n    function parseKinematicsTransform(xml) {\n      var data = {\n        type: xml.nodeName\n      };\n      var array = parseFloats(xml.textContent);\n\n      switch (data.type) {\n        case 'matrix':\n          data.obj = new Matrix4();\n          data.obj.fromArray(array).transpose();\n          break;\n\n        case 'translate':\n          data.obj = new Vector3();\n          data.obj.fromArray(array);\n          break;\n\n        case 'rotate':\n          data.obj = new Vector3();\n          data.obj.fromArray(array);\n          data.angle = MathUtils.degToRad(array[3]);\n          break;\n      }\n\n      return data;\n    } // physics\n\n\n    function parsePhysicsModel(xml) {\n      var data = {\n        name: xml.getAttribute('name') || '',\n        rigidBodies: {}\n      };\n\n      for (var i = 0; i < xml.childNodes.length; i++) {\n        var child = xml.childNodes[i];\n        if (child.nodeType !== 1) continue;\n\n        switch (child.nodeName) {\n          case 'rigid_body':\n            data.rigidBodies[child.getAttribute('name')] = {};\n            parsePhysicsRigidBody(child, data.rigidBodies[child.getAttribute('name')]);\n            break;\n        }\n      }\n\n      library.physicsModels[xml.getAttribute('id')] = data;\n    }\n\n    function parsePhysicsRigidBody(xml, data) {\n      for (var i = 0; i < xml.childNodes.length; i++) {\n        var child = xml.childNodes[i];\n        if (child.nodeType !== 1) continue;\n\n        switch (child.nodeName) {\n          case 'technique_common':\n            parsePhysicsTechniqueCommon(child, data);\n            break;\n        }\n      }\n    }\n\n    function parsePhysicsTechniqueCommon(xml, data) {\n      for (var i = 0; i < xml.childNodes.length; i++) {\n        var child = xml.childNodes[i];\n        if (child.nodeType !== 1) continue;\n\n        switch (child.nodeName) {\n          case 'inertia':\n            data.inertia = parseFloats(child.textContent);\n            break;\n\n          case 'mass':\n            data.mass = parseFloats(child.textContent)[0];\n            break;\n        }\n      }\n    } // scene\n\n\n    function parseKinematicsScene(xml) {\n      var data = {\n        bindJointAxis: []\n      };\n\n      for (var i = 0; i < xml.childNodes.length; i++) {\n        var child = xml.childNodes[i];\n        if (child.nodeType !== 1) continue;\n\n        switch (child.nodeName) {\n          case 'bind_joint_axis':\n            data.bindJointAxis.push(parseKinematicsBindJointAxis(child));\n            break;\n        }\n      }\n\n      library.kinematicsScenes[parseId(xml.getAttribute('url'))] = data;\n    }\n\n    function parseKinematicsBindJointAxis(xml) {\n      var data = {\n        target: xml.getAttribute('target').split('/').pop()\n      };\n\n      for (var i = 0; i < xml.childNodes.length; i++) {\n        var child = xml.childNodes[i];\n        if (child.nodeType !== 1) continue;\n\n        switch (child.nodeName) {\n          case 'axis':\n            var param = child.getElementsByTagName('param')[0];\n            data.axis = param.textContent;\n            var tmpJointIndex = data.axis.split('inst_').pop().split('axis')[0];\n            data.jointIndex = tmpJointIndex.substr(0, tmpJointIndex.length - 1);\n            break;\n        }\n      }\n\n      return data;\n    }\n\n    function buildKinematicsScene(data) {\n      if (data.build !== undefined) return data.build;\n      return data;\n    }\n\n    function getKinematicsScene(id) {\n      return getBuild(library.kinematicsScenes[id], buildKinematicsScene);\n    }\n\n    function setupKinematics() {\n      var kinematicsModelId = Object.keys(library.kinematicsModels)[0];\n      var kinematicsSceneId = Object.keys(library.kinematicsScenes)[0];\n      var visualSceneId = Object.keys(library.visualScenes)[0];\n      if (kinematicsModelId === undefined || kinematicsSceneId === undefined) return;\n      var kinematicsModel = getKinematicsModel(kinematicsModelId);\n      var kinematicsScene = getKinematicsScene(kinematicsSceneId);\n      var visualScene = getVisualScene(visualSceneId);\n      var bindJointAxis = kinematicsScene.bindJointAxis;\n      var jointMap = {};\n\n      for (var i = 0, l = bindJointAxis.length; i < l; i++) {\n        var axis = bindJointAxis[i]; // the result of the following query is an element of type 'translate', 'rotate','scale' or 'matrix'\n\n        var targetElement = collada.querySelector('[sid=\"' + axis.target + '\"]');\n\n        if (targetElement) {\n          // get the parent of the transform element\n          var parentVisualElement = targetElement.parentElement; // connect the joint of the kinematics model with the element in the visual scene\n\n          connect(axis.jointIndex, parentVisualElement);\n        }\n      }\n\n      function connect(jointIndex, visualElement) {\n        var visualElementName = visualElement.getAttribute('name');\n        var joint = kinematicsModel.joints[jointIndex];\n        visualScene.traverse(function (object) {\n          if (object.name === visualElementName) {\n            jointMap[jointIndex] = {\n              object: object,\n              transforms: buildTransformList(visualElement),\n              joint: joint,\n              position: joint.zeroPosition\n            };\n          }\n        });\n      }\n\n      var m0 = new Matrix4();\n      kinematics = {\n        joints: kinematicsModel && kinematicsModel.joints,\n        getJointValue: function (jointIndex) {\n          var jointData = jointMap[jointIndex];\n\n          if (jointData) {\n            return jointData.position;\n          } else {\n            console.warn('THREE.ColladaLoader: Joint ' + jointIndex + ' doesn\\'t exist.');\n          }\n        },\n        setJointValue: function (jointIndex, value) {\n          var jointData = jointMap[jointIndex];\n\n          if (jointData) {\n            var joint = jointData.joint;\n\n            if (value > joint.limits.max || value < joint.limits.min) {\n              console.warn('THREE.ColladaLoader: Joint ' + jointIndex + ' value ' + value + ' outside of limits (min: ' + joint.limits.min + ', max: ' + joint.limits.max + ').');\n            } else if (joint.static) {\n              console.warn('THREE.ColladaLoader: Joint ' + jointIndex + ' is static.');\n            } else {\n              var object = jointData.object;\n              var axis = joint.axis;\n              var transforms = jointData.transforms;\n              matrix.identity(); // each update, we have to apply all transforms in the correct order\n\n              for (var i = 0; i < transforms.length; i++) {\n                var transform = transforms[i]; // if there is a connection of the transform node with a joint, apply the joint value\n\n                if (transform.sid && transform.sid.indexOf(jointIndex) !== -1) {\n                  switch (joint.type) {\n                    case 'revolute':\n                      matrix.multiply(m0.makeRotationAxis(axis, MathUtils.degToRad(value)));\n                      break;\n\n                    case 'prismatic':\n                      matrix.multiply(m0.makeTranslation(axis.x * value, axis.y * value, axis.z * value));\n                      break;\n\n                    default:\n                      console.warn('THREE.ColladaLoader: Unknown joint type: ' + joint.type);\n                      break;\n                  }\n                } else {\n                  switch (transform.type) {\n                    case 'matrix':\n                      matrix.multiply(transform.obj);\n                      break;\n\n                    case 'translate':\n                      matrix.multiply(m0.makeTranslation(transform.obj.x, transform.obj.y, transform.obj.z));\n                      break;\n\n                    case 'scale':\n                      matrix.scale(transform.obj);\n                      break;\n\n                    case 'rotate':\n                      matrix.multiply(m0.makeRotationAxis(transform.obj, transform.angle));\n                      break;\n                  }\n                }\n              }\n\n              object.matrix.copy(matrix);\n              object.matrix.decompose(object.position, object.quaternion, object.scale);\n              jointMap[jointIndex].position = value;\n            }\n          } else {\n            console.log('THREE.ColladaLoader: ' + jointIndex + ' does not exist.');\n          }\n        }\n      };\n    }\n\n    function buildTransformList(node) {\n      var transforms = [];\n      var xml = collada.querySelector('[id=\"' + node.id + '\"]');\n\n      for (var i = 0; i < xml.childNodes.length; i++) {\n        var child = xml.childNodes[i];\n        if (child.nodeType !== 1) continue;\n\n        switch (child.nodeName) {\n          case 'matrix':\n            var array = parseFloats(child.textContent);\n            var matrix = new Matrix4().fromArray(array).transpose();\n            transforms.push({\n              sid: child.getAttribute('sid'),\n              type: child.nodeName,\n              obj: matrix\n            });\n            break;\n\n          case 'translate':\n          case 'scale':\n            var array = parseFloats(child.textContent);\n            var vector = new Vector3().fromArray(array);\n            transforms.push({\n              sid: child.getAttribute('sid'),\n              type: child.nodeName,\n              obj: vector\n            });\n            break;\n\n          case 'rotate':\n            var array = parseFloats(child.textContent);\n            var vector = new Vector3().fromArray(array);\n            var angle = MathUtils.degToRad(array[3]);\n            transforms.push({\n              sid: child.getAttribute('sid'),\n              type: child.nodeName,\n              obj: vector,\n              angle: angle\n            });\n            break;\n        }\n      }\n\n      return transforms;\n    } // nodes\n\n\n    function prepareNodes(xml) {\n      var elements = xml.getElementsByTagName('node'); // ensure all node elements have id attributes\n\n      for (var i = 0; i < elements.length; i++) {\n        var element = elements[i];\n\n        if (element.hasAttribute('id') === false) {\n          element.setAttribute('id', generateId());\n        }\n      }\n    }\n\n    var matrix = new Matrix4();\n    var vector = new Vector3();\n\n    function parseNode(xml) {\n      var data = {\n        name: xml.getAttribute('name') || '',\n        type: xml.getAttribute('type'),\n        id: xml.getAttribute('id'),\n        sid: xml.getAttribute('sid'),\n        matrix: new Matrix4(),\n        nodes: [],\n        instanceCameras: [],\n        instanceControllers: [],\n        instanceLights: [],\n        instanceGeometries: [],\n        instanceNodes: [],\n        transforms: {}\n      };\n\n      for (var i = 0; i < xml.childNodes.length; i++) {\n        var child = xml.childNodes[i];\n        if (child.nodeType !== 1) continue;\n\n        switch (child.nodeName) {\n          case 'node':\n            data.nodes.push(child.getAttribute('id'));\n            parseNode(child);\n            break;\n\n          case 'instance_camera':\n            data.instanceCameras.push(parseId(child.getAttribute('url')));\n            break;\n\n          case 'instance_controller':\n            data.instanceControllers.push(parseNodeInstance(child));\n            break;\n\n          case 'instance_light':\n            data.instanceLights.push(parseId(child.getAttribute('url')));\n            break;\n\n          case 'instance_geometry':\n            data.instanceGeometries.push(parseNodeInstance(child));\n            break;\n\n          case 'instance_node':\n            data.instanceNodes.push(parseId(child.getAttribute('url')));\n            break;\n\n          case 'matrix':\n            var array = parseFloats(child.textContent);\n            data.matrix.multiply(matrix.fromArray(array).transpose());\n            data.transforms[child.getAttribute('sid')] = child.nodeName;\n            break;\n\n          case 'translate':\n            var array = parseFloats(child.textContent);\n            vector.fromArray(array);\n            data.matrix.multiply(matrix.makeTranslation(vector.x, vector.y, vector.z));\n            data.transforms[child.getAttribute('sid')] = child.nodeName;\n            break;\n\n          case 'rotate':\n            var array = parseFloats(child.textContent);\n            var angle = MathUtils.degToRad(array[3]);\n            data.matrix.multiply(matrix.makeRotationAxis(vector.fromArray(array), angle));\n            data.transforms[child.getAttribute('sid')] = child.nodeName;\n            break;\n\n          case 'scale':\n            var array = parseFloats(child.textContent);\n            data.matrix.scale(vector.fromArray(array));\n            data.transforms[child.getAttribute('sid')] = child.nodeName;\n            break;\n\n          case 'extra':\n            break;\n\n          default:\n            console.log(child);\n        }\n      }\n\n      if (hasNode(data.id)) {\n        console.warn('THREE.ColladaLoader: There is already a node with ID %s. Exclude current node from further processing.', data.id);\n      } else {\n        library.nodes[data.id] = data;\n      }\n\n      return data;\n    }\n\n    function parseNodeInstance(xml) {\n      var data = {\n        id: parseId(xml.getAttribute('url')),\n        materials: {},\n        skeletons: []\n      };\n\n      for (var i = 0; i < xml.childNodes.length; i++) {\n        var child = xml.childNodes[i];\n\n        switch (child.nodeName) {\n          case 'bind_material':\n            var instances = child.getElementsByTagName('instance_material');\n\n            for (var j = 0; j < instances.length; j++) {\n              var instance = instances[j];\n              var symbol = instance.getAttribute('symbol');\n              var target = instance.getAttribute('target');\n              data.materials[symbol] = parseId(target);\n            }\n\n            break;\n\n          case 'skeleton':\n            data.skeletons.push(parseId(child.textContent));\n            break;\n\n          default:\n            break;\n        }\n      }\n\n      return data;\n    }\n\n    function buildSkeleton(skeletons, joints) {\n      var boneData = [];\n      var sortedBoneData = [];\n      var i, j, data; // a skeleton can have multiple root bones. collada expresses this\n      // situtation with multiple \"skeleton\" tags per controller instance\n\n      for (i = 0; i < skeletons.length; i++) {\n        var skeleton = skeletons[i];\n        var root;\n\n        if (hasNode(skeleton)) {\n          root = getNode(skeleton);\n          buildBoneHierarchy(root, joints, boneData);\n        } else if (hasVisualScene(skeleton)) {\n          // handle case where the skeleton refers to the visual scene (#13335)\n          var visualScene = library.visualScenes[skeleton];\n          var children = visualScene.children;\n\n          for (var j = 0; j < children.length; j++) {\n            var child = children[j];\n\n            if (child.type === 'JOINT') {\n              var root = getNode(child.id);\n              buildBoneHierarchy(root, joints, boneData);\n            }\n          }\n        } else {\n          console.error('THREE.ColladaLoader: Unable to find root bone of skeleton with ID:', skeleton);\n        }\n      } // sort bone data (the order is defined in the corresponding controller)\n\n\n      for (i = 0; i < joints.length; i++) {\n        for (j = 0; j < boneData.length; j++) {\n          data = boneData[j];\n\n          if (data.bone.name === joints[i].name) {\n            sortedBoneData[i] = data;\n            data.processed = true;\n            break;\n          }\n        }\n      } // add unprocessed bone data at the end of the list\n\n\n      for (i = 0; i < boneData.length; i++) {\n        data = boneData[i];\n\n        if (data.processed === false) {\n          sortedBoneData.push(data);\n          data.processed = true;\n        }\n      } // setup arrays for skeleton creation\n\n\n      var bones = [];\n      var boneInverses = [];\n\n      for (i = 0; i < sortedBoneData.length; i++) {\n        data = sortedBoneData[i];\n        bones.push(data.bone);\n        boneInverses.push(data.boneInverse);\n      }\n\n      return new Skeleton(bones, boneInverses);\n    }\n\n    function buildBoneHierarchy(root, joints, boneData) {\n      // setup bone data from visual scene\n      root.traverse(function (object) {\n        if (object.isBone === true) {\n          var boneInverse; // retrieve the boneInverse from the controller data\n\n          for (var i = 0; i < joints.length; i++) {\n            var joint = joints[i];\n\n            if (joint.name === object.name) {\n              boneInverse = joint.boneInverse;\n              break;\n            }\n          }\n\n          if (boneInverse === undefined) {\n            // Unfortunately, there can be joints in the visual scene that are not part of the\n            // corresponding controller. In this case, we have to create a dummy boneInverse matrix\n            // for the respective bone. This bone won't affect any vertices, because there are no skin indices\n            // and weights defined for it. But we still have to add the bone to the sorted bone list in order to\n            // ensure a correct animation of the model.\n            boneInverse = new Matrix4();\n          }\n\n          boneData.push({\n            bone: object,\n            boneInverse: boneInverse,\n            processed: false\n          });\n        }\n      });\n    }\n\n    function buildNode(data) {\n      var objects = [];\n      var matrix = data.matrix;\n      var nodes = data.nodes;\n      var type = data.type;\n      var instanceCameras = data.instanceCameras;\n      var instanceControllers = data.instanceControllers;\n      var instanceLights = data.instanceLights;\n      var instanceGeometries = data.instanceGeometries;\n      var instanceNodes = data.instanceNodes; // nodes\n\n      for (var i = 0, l = nodes.length; i < l; i++) {\n        objects.push(getNode(nodes[i]));\n      } // instance cameras\n\n\n      for (var i = 0, l = instanceCameras.length; i < l; i++) {\n        var instanceCamera = getCamera(instanceCameras[i]);\n\n        if (instanceCamera !== null) {\n          objects.push(instanceCamera.clone());\n        }\n      } // instance controllers\n\n\n      for (var i = 0, l = instanceControllers.length; i < l; i++) {\n        var instance = instanceControllers[i];\n        var controller = getController(instance.id);\n        var geometries = getGeometry(controller.id);\n        var newObjects = buildObjects(geometries, instance.materials);\n        var skeletons = instance.skeletons;\n        var joints = controller.skin.joints;\n        var skeleton = buildSkeleton(skeletons, joints);\n\n        for (var j = 0, jl = newObjects.length; j < jl; j++) {\n          var object = newObjects[j];\n\n          if (object.isSkinnedMesh) {\n            object.bind(skeleton, controller.skin.bindMatrix);\n            object.normalizeSkinWeights();\n          }\n\n          objects.push(object);\n        }\n      } // instance lights\n\n\n      for (var i = 0, l = instanceLights.length; i < l; i++) {\n        var instanceLight = getLight(instanceLights[i]);\n\n        if (instanceLight !== null) {\n          objects.push(instanceLight.clone());\n        }\n      } // instance geometries\n\n\n      for (var i = 0, l = instanceGeometries.length; i < l; i++) {\n        var instance = instanceGeometries[i]; // a single geometry instance in collada can lead to multiple object3Ds.\n        // this is the case when primitives are combined like triangles and lines\n\n        var geometries = getGeometry(instance.id);\n        var newObjects = buildObjects(geometries, instance.materials);\n\n        for (var j = 0, jl = newObjects.length; j < jl; j++) {\n          objects.push(newObjects[j]);\n        }\n      } // instance nodes\n\n\n      for (var i = 0, l = instanceNodes.length; i < l; i++) {\n        objects.push(getNode(instanceNodes[i]).clone());\n      }\n\n      var object;\n\n      if (nodes.length === 0 && objects.length === 1) {\n        object = objects[0];\n      } else {\n        object = type === 'JOINT' ? new Bone() : new Group();\n\n        for (var i = 0; i < objects.length; i++) {\n          object.add(objects[i]);\n        }\n      }\n\n      object.name = type === 'JOINT' ? data.sid : data.name;\n      object.matrix.copy(matrix);\n      object.matrix.decompose(object.position, object.quaternion, object.scale);\n      return object;\n    }\n\n    var fallbackMaterial = new MeshBasicMaterial({\n      color: 0xff00ff\n    });\n\n    function resolveMaterialBinding(keys, instanceMaterials) {\n      var materials = [];\n\n      for (var i = 0, l = keys.length; i < l; i++) {\n        var id = instanceMaterials[keys[i]];\n\n        if (id === undefined) {\n          console.warn('THREE.ColladaLoader: Material with key %s not found. Apply fallback material.', keys[i]);\n          materials.push(fallbackMaterial);\n        } else {\n          materials.push(getMaterial(id));\n        }\n      }\n\n      return materials;\n    }\n\n    function buildObjects(geometries, instanceMaterials) {\n      var objects = [];\n\n      for (var type in geometries) {\n        var geometry = geometries[type];\n        var materials = resolveMaterialBinding(geometry.materialKeys, instanceMaterials); // handle case if no materials are defined\n\n        if (materials.length === 0) {\n          if (type === 'lines' || type === 'linestrips') {\n            materials.push(new LineBasicMaterial());\n          } else {\n            materials.push(new MeshPhongMaterial());\n          }\n        } // regard skinning\n\n\n        var skinning = geometry.data.attributes.skinIndex !== undefined;\n\n        if (skinning) {\n          for (var i = 0, l = materials.length; i < l; i++) {\n            materials[i].skinning = true;\n          }\n        } // choose between a single or multi materials (material array)\n\n\n        var material = materials.length === 1 ? materials[0] : materials; // now create a specific 3D object\n\n        var object;\n\n        switch (type) {\n          case 'lines':\n            object = new LineSegments(geometry.data, material);\n            break;\n\n          case 'linestrips':\n            object = new Line(geometry.data, material);\n            break;\n\n          case 'triangles':\n          case 'polylist':\n            if (skinning) {\n              object = new SkinnedMesh(geometry.data, material);\n            } else {\n              object = new Mesh(geometry.data, material);\n            }\n\n            break;\n        }\n\n        objects.push(object);\n      }\n\n      return objects;\n    }\n\n    function hasNode(id) {\n      return library.nodes[id] !== undefined;\n    }\n\n    function getNode(id) {\n      return getBuild(library.nodes[id], buildNode);\n    } // visual scenes\n\n\n    function parseVisualScene(xml) {\n      var data = {\n        name: xml.getAttribute('name'),\n        children: []\n      };\n      prepareNodes(xml);\n      var elements = getElementsByTagName(xml, 'node');\n\n      for (var i = 0; i < elements.length; i++) {\n        data.children.push(parseNode(elements[i]));\n      }\n\n      library.visualScenes[xml.getAttribute('id')] = data;\n    }\n\n    function buildVisualScene(data) {\n      var group = new Group();\n      group.name = data.name;\n      var children = data.children;\n\n      for (var i = 0; i < children.length; i++) {\n        var child = children[i];\n        group.add(getNode(child.id));\n      }\n\n      return group;\n    }\n\n    function hasVisualScene(id) {\n      return library.visualScenes[id] !== undefined;\n    }\n\n    function getVisualScene(id) {\n      return getBuild(library.visualScenes[id], buildVisualScene);\n    } // scenes\n\n\n    function parseScene(xml) {\n      var instance = getElementsByTagName(xml, 'instance_visual_scene')[0];\n      return getVisualScene(parseId(instance.getAttribute('url')));\n    }\n\n    function setupAnimations() {\n      var clips = library.clips;\n\n      if (isEmpty(clips) === true) {\n        if (isEmpty(library.animations) === false) {\n          // if there are animations but no clips, we create a default clip for playback\n          var tracks = [];\n\n          for (var id in library.animations) {\n            var animationTracks = getAnimation(id);\n\n            for (var i = 0, l = animationTracks.length; i < l; i++) {\n              tracks.push(animationTracks[i]);\n            }\n          }\n\n          animations.push(new AnimationClip('default', -1, tracks));\n        }\n      } else {\n        for (var id in clips) {\n          animations.push(getAnimationClip(id));\n        }\n      }\n    } // convert the parser error element into text with each child elements text\n    // separated by new lines.\n\n\n    function parserErrorToText(parserError) {\n      var result = '';\n      var stack = [parserError];\n\n      while (stack.length) {\n        var node = stack.shift();\n\n        if (node.nodeType === Node.TEXT_NODE) {\n          result += node.textContent;\n        } else {\n          result += '\\n';\n          stack.push.apply(stack, node.childNodes);\n        }\n      }\n\n      return result.trim();\n    }\n\n    if (text.length === 0) {\n      return {\n        scene: new Scene()\n      };\n    }\n\n    var xml = new DOMParser().parseFromString(text, 'application/xml');\n    var collada = getElementsByTagName(xml, 'COLLADA')[0];\n    var parserError = xml.getElementsByTagName('parsererror')[0];\n\n    if (parserError !== undefined) {\n      // Chrome will return parser error with a div in it\n      var errorElement = getElementsByTagName(parserError, 'div')[0];\n      var errorText;\n\n      if (errorElement) {\n        errorText = errorElement.textContent;\n      } else {\n        errorText = parserErrorToText(parserError);\n      }\n\n      console.error('THREE.ColladaLoader: Failed to parse collada file.\\n', errorText);\n      return null;\n    } // metadata\n\n\n    var version = collada.getAttribute('version');\n    console.log('THREE.ColladaLoader: File version', version);\n    var asset = parseAsset(getElementsByTagName(collada, 'asset')[0]);\n    var textureLoader = new TextureLoader(this.manager);\n    textureLoader.setPath(this.resourcePath || path).setCrossOrigin(this.crossOrigin);\n    var tgaLoader;\n\n    if (TGALoader) {\n      tgaLoader = new TGALoader(this.manager);\n      tgaLoader.setPath(this.resourcePath || path);\n    } //\n\n\n    var animations = [];\n    var kinematics = {};\n    var count = 0; //\n\n    var library = {\n      animations: {},\n      clips: {},\n      controllers: {},\n      images: {},\n      effects: {},\n      materials: {},\n      cameras: {},\n      lights: {},\n      geometries: {},\n      nodes: {},\n      visualScenes: {},\n      kinematicsModels: {},\n      physicsModels: {},\n      kinematicsScenes: {}\n    };\n    parseLibrary(collada, 'library_animations', 'animation', parseAnimation);\n    parseLibrary(collada, 'library_animation_clips', 'animation_clip', parseAnimationClip);\n    parseLibrary(collada, 'library_controllers', 'controller', parseController);\n    parseLibrary(collada, 'library_images', 'image', parseImage);\n    parseLibrary(collada, 'library_effects', 'effect', parseEffect);\n    parseLibrary(collada, 'library_materials', 'material', parseMaterial);\n    parseLibrary(collada, 'library_cameras', 'camera', parseCamera);\n    parseLibrary(collada, 'library_lights', 'light', parseLight);\n    parseLibrary(collada, 'library_geometries', 'geometry', parseGeometry);\n    parseLibrary(collada, 'library_nodes', 'node', parseNode);\n    parseLibrary(collada, 'library_visual_scenes', 'visual_scene', parseVisualScene);\n    parseLibrary(collada, 'library_kinematics_models', 'kinematics_model', parseKinematicsModel);\n    parseLibrary(collada, 'library_physics_models', 'physics_model', parsePhysicsModel);\n    parseLibrary(collada, 'scene', 'instance_kinematics_scene', parseKinematicsScene);\n    buildLibrary(library.animations, buildAnimation);\n    buildLibrary(library.clips, buildAnimationClip);\n    buildLibrary(library.controllers, buildController);\n    buildLibrary(library.images, buildImage);\n    buildLibrary(library.effects, buildEffect);\n    buildLibrary(library.materials, buildMaterial);\n    buildLibrary(library.cameras, buildCamera);\n    buildLibrary(library.lights, buildLight);\n    buildLibrary(library.geometries, buildGeometry);\n    buildLibrary(library.visualScenes, buildVisualScene);\n    setupAnimations();\n    setupKinematics();\n    var scene = parseScene(getElementsByTagName(collada, 'scene')[0]);\n    scene.animations = animations;\n\n    if (asset.upAxis === 'Z_UP') {\n      scene.quaternion.setFromEuler(new Euler(-Math.PI / 2, 0, 0));\n    }\n\n    scene.scale.multiplyScalar(asset.unit);\n    return {\n      get animations() {\n        console.warn('THREE.ColladaLoader: Please access animations over scene.animations now.');\n        return animations;\n      },\n\n      kinematics: kinematics,\n      library: library,\n      scene: scene\n    };\n  }\n});\nexport { ColladaLoader };","map":{"version":3,"sources":["/Users/haiakablan/Documents/לוטוס/קורס/Architecture-web/node_modules/three/examples/jsm/loaders/ColladaLoader.js"],"names":["AmbientLight","AnimationClip","Bone","BufferGeometry","ClampToEdgeWrapping","Color","DirectionalLight","DoubleSide","Euler","FileLoader","Float32BufferAttribute","Group","Line","LineBasicMaterial","LineSegments","Loader","LoaderUtils","MathUtils","Matrix4","Mesh","MeshBasicMaterial","MeshLambertMaterial","MeshPhongMaterial","OrthographicCamera","PerspectiveCamera","PointLight","Quaternion","QuaternionKeyframeTrack","RepeatWrapping","Scene","Skeleton","SkinnedMesh","SpotLight","TextureLoader","Vector3","VectorKeyframeTrack","TGALoader","ColladaLoader","manager","call","prototype","Object","assign","create","constructor","load","url","onLoad","onProgress","onError","scope","path","extractUrlBase","loader","setPath","setRequestHeader","requestHeader","setWithCredentials","withCredentials","text","parse","e","console","error","itemError","options","convertUpAxis","value","warn","getElementsByTagName","xml","name","array","childNodes","i","l","length","child","nodeName","push","parseStrings","parts","trim","split","Array","parseFloats","parseFloat","parseInts","parseInt","parseId","substring","generateId","count","isEmpty","object","keys","parseAsset","unit","parseAssetUnit","upAxis","parseAssetUpAxis","undefined","hasAttribute","getAttribute","textContent","parseLibrary","libraryName","parser","library","elements","buildLibrary","data","builder","build","getBuild","parseAnimation","sources","samplers","channels","hasChildren","nodeType","id","parseSource","parseAnimationSampler","parseAnimationChannel","log","animations","generateUUID","inputs","semantic","target","shift","sid","arraySyntax","indexOf","memberSyntax","member","indices","replace","sampler","buildAnimation","tracks","hasOwnProperty","channel","inputId","INPUT","outputId","OUTPUT","inputSource","outputSource","animation","buildAnimationChannel","createKeyframeTracks","getAnimation","node","nodes","object3D","getNode","transform","transforms","defaultMatrix","matrix","clone","transpose","time","stride","il","j","jl","index","keyframes","prepareAnimationData","uuid","sort","ascending","transformAnimationData","a","b","position","scale","quaternion","times","positionData","quaternionData","scaleData","keyframe","fromArray","decompose","x","y","z","w","property","defaultValue","empty","createMissingKeyframes","prev","next","getPrev","getNext","interpolate","key","parseAnimationClip","start","end","clips","buildAnimationClip","duration","animationTracks","getAnimationClip","parseController","skin","parseSkin","controllers","bindShapeMatrix","joints","parseJoints","vertexWeights","parseVertexWeights","offset","vcount","v","buildController","geometry","geometries","buildSkin","skinIndices","skinWeights","weights","BONE_LIMIT","jointOffset","JOINT","weightOffset","WEIGHT","jointSource","inverseSource","INV_BIND_MATRIX","jointCount","vertexSkinData","skinIndex","weightId","skinWeight","weight","descending","d","bindMatrix","identity","boneInverse","getController","parseImage","init_from","images","buildImage","getImage","parseEffect","profile","parseEffectProfileCOMMON","effects","surfaces","parseEffectNewparam","technique","parseEffectTechnique","extra","parseEffectExtra","parseEffectSurface","parseEffectSampler","source","type","parameters","parseEffectParameters","parseEffectParameter","opaque","parseEffectParameterTexture","parseEffectParameterTextureExtra","parseEffectParameterTextureExtraTechnique","toUpperCase","parseEffectExtraTechnique","buildEffect","getEffect","parseMaterial","materials","getTextureLoader","image","extension","slice","lastIndexOf","toLowerCase","tgaLoader","textureLoader","buildMaterial","effect","material","getTexture","textureObject","surface","texture","wrapS","wrapU","wrapT","wrapV","set","offsetU","offsetV","repeat","repeatU","repeatV","parameter","color","map","specular","specularMap","normalMap","lightMap","float","shininess","emissive","emissiveMap","transparent","transparency","opacity","double_sided","side","getMaterial","parseCamera","optics","parseCameraOptics","cameras","parseCameraTechnique","parseCameraParameters","buildCamera","camera","yfov","aspect_ratio","znear","zfar","ymag","xmag","aspectRatio","getCamera","parseLight","parseLightTechnique","lights","parseLightParameters","falloffAngle","f","distance","Math","sqrt","buildLight","light","copy","getLight","parseGeometry","vertices","primitives","mesh","parseGeometryVertices","parseGeometryPrimitive","accessor","primitive","hasUV","inputname","max","p","groupPrimitives","checkUVCoordinates","uvsNeedsFix","buildGeometry","groupedPrimitives","primitiveType","buildGeometryType","normal","uv","uv2","materialKeys","g","vc","addGroup","input","prevLength","buildGeometryData","setAttribute","pushVector","sourceStride","sourceArray","c","k","kl","getGeometry","parseKinematicsModel","links","parseKinematicsTechniqueCommon","kinematicsModels","buildKinematicsModel","getKinematicsModel","parseKinematicsJoint","parseKinematicsLink","parseKinematicsJointParameter","axis","limits","min","static","zeroPosition","middlePosition","attachments","parseKinematicsAttachment","parseKinematicsTransform","joint","pop","obj","angle","degToRad","parsePhysicsModel","rigidBodies","parsePhysicsRigidBody","physicsModels","parsePhysicsTechniqueCommon","inertia","mass","parseKinematicsScene","bindJointAxis","parseKinematicsBindJointAxis","kinematicsScenes","param","tmpJointIndex","jointIndex","substr","buildKinematicsScene","getKinematicsScene","setupKinematics","kinematicsModelId","kinematicsSceneId","visualSceneId","visualScenes","kinematicsModel","kinematicsScene","visualScene","getVisualScene","jointMap","targetElement","collada","querySelector","parentVisualElement","parentElement","connect","visualElement","visualElementName","traverse","buildTransformList","m0","kinematics","getJointValue","jointData","setJointValue","multiply","makeRotationAxis","makeTranslation","vector","prepareNodes","element","parseNode","instanceCameras","instanceControllers","instanceLights","instanceGeometries","instanceNodes","parseNodeInstance","hasNode","skeletons","instances","instance","symbol","buildSkeleton","boneData","sortedBoneData","skeleton","root","buildBoneHierarchy","hasVisualScene","children","bone","processed","bones","boneInverses","isBone","buildNode","objects","instanceCamera","controller","newObjects","buildObjects","isSkinnedMesh","bind","normalizeSkinWeights","instanceLight","add","fallbackMaterial","resolveMaterialBinding","instanceMaterials","skinning","attributes","parseVisualScene","buildVisualScene","group","parseScene","setupAnimations","parserErrorToText","parserError","result","stack","Node","TEXT_NODE","apply","scene","DOMParser","parseFromString","errorElement","errorText","version","asset","resourcePath","setCrossOrigin","crossOrigin","setFromEuler","PI","multiplyScalar"],"mappings":"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","sourcesContent":["import {\n\tAmbientLight,\n\tAnimationClip,\n\tBone,\n\tBufferGeometry,\n\tClampToEdgeWrapping,\n\tColor,\n\tDirectionalLight,\n\tDoubleSide,\n\tEuler,\n\tFileLoader,\n\tFloat32BufferAttribute,\n\tGroup,\n\tLine,\n\tLineBasicMaterial,\n\tLineSegments,\n\tLoader,\n\tLoaderUtils,\n\tMathUtils,\n\tMatrix4,\n\tMesh,\n\tMeshBasicMaterial,\n\tMeshLambertMaterial,\n\tMeshPhongMaterial,\n\tOrthographicCamera,\n\tPerspectiveCamera,\n\tPointLight,\n\tQuaternion,\n\tQuaternionKeyframeTrack,\n\tRepeatWrapping,\n\tScene,\n\tSkeleton,\n\tSkinnedMesh,\n\tSpotLight,\n\tTextureLoader,\n\tVector3,\n\tVectorKeyframeTrack\n} from '../../../build/three.module.js';\nimport { TGALoader } from '../loaders/TGALoader.js';\n\nvar ColladaLoader = function ( manager ) {\n\n\tLoader.call( this, manager );\n\n};\n\nColladaLoader.prototype = Object.assign( Object.create( Loader.prototype ), {\n\n\tconstructor: ColladaLoader,\n\n\tload: function ( url, onLoad, onProgress, onError ) {\n\n\t\tvar scope = this;\n\n\t\tvar path = ( scope.path === '' ) ? LoaderUtils.extractUrlBase( url ) : scope.path;\n\n\t\tvar loader = new FileLoader( scope.manager );\n\t\tloader.setPath( scope.path );\n\t\tloader.setRequestHeader( scope.requestHeader );\n\t\tloader.setWithCredentials( scope.withCredentials );\n\t\tloader.load( url, function ( text ) {\n\n\t\t\ttry {\n\n\t\t\t\tonLoad( scope.parse( text, path ) );\n\n\t\t\t} catch ( e ) {\n\n\t\t\t\tif ( onError ) {\n\n\t\t\t\t\tonError( e );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tconsole.error( e );\n\n\t\t\t\t}\n\n\t\t\t\tscope.manager.itemError( url );\n\n\t\t\t}\n\n\t\t}, onProgress, onError );\n\n\t},\n\n\toptions: {\n\n\t\tset convertUpAxis( value ) {\n\n\t\t\tconsole.warn( 'THREE.ColladaLoader: options.convertUpAxis() has been removed. Up axis is converted automatically.' );\n\n\t\t}\n\n\t},\n\n\tparse: function ( text, path ) {\n\n\t\tfunction getElementsByTagName( xml, name ) {\n\n\t\t\t// Non recursive xml.getElementsByTagName() ...\n\n\t\t\tvar array = [];\n\t\t\tvar childNodes = xml.childNodes;\n\n\t\t\tfor ( var i = 0, l = childNodes.length; i < l; i ++ ) {\n\n\t\t\t\tvar child = childNodes[ i ];\n\n\t\t\t\tif ( child.nodeName === name ) {\n\n\t\t\t\t\tarray.push( child );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn array;\n\n\t\t}\n\n\t\tfunction parseStrings( text ) {\n\n\t\t\tif ( text.length === 0 ) return [];\n\n\t\t\tvar parts = text.trim().split( /\\s+/ );\n\t\t\tvar array = new Array( parts.length );\n\n\t\t\tfor ( var i = 0, l = parts.length; i < l; i ++ ) {\n\n\t\t\t\tarray[ i ] = parts[ i ];\n\n\t\t\t}\n\n\t\t\treturn array;\n\n\t\t}\n\n\t\tfunction parseFloats( text ) {\n\n\t\t\tif ( text.length === 0 ) return [];\n\n\t\t\tvar parts = text.trim().split( /\\s+/ );\n\t\t\tvar array = new Array( parts.length );\n\n\t\t\tfor ( var i = 0, l = parts.length; i < l; i ++ ) {\n\n\t\t\t\tarray[ i ] = parseFloat( parts[ i ] );\n\n\t\t\t}\n\n\t\t\treturn array;\n\n\t\t}\n\n\t\tfunction parseInts( text ) {\n\n\t\t\tif ( text.length === 0 ) return [];\n\n\t\t\tvar parts = text.trim().split( /\\s+/ );\n\t\t\tvar array = new Array( parts.length );\n\n\t\t\tfor ( var i = 0, l = parts.length; i < l; i ++ ) {\n\n\t\t\t\tarray[ i ] = parseInt( parts[ i ] );\n\n\t\t\t}\n\n\t\t\treturn array;\n\n\t\t}\n\n\t\tfunction parseId( text ) {\n\n\t\t\treturn text.substring( 1 );\n\n\t\t}\n\n\t\tfunction generateId() {\n\n\t\t\treturn 'three_default_' + ( count ++ );\n\n\t\t}\n\n\t\tfunction isEmpty( object ) {\n\n\t\t\treturn Object.keys( object ).length === 0;\n\n\t\t}\n\n\t\t// asset\n\n\t\tfunction parseAsset( xml ) {\n\n\t\t\treturn {\n\t\t\t\tunit: parseAssetUnit( getElementsByTagName( xml, 'unit' )[ 0 ] ),\n\t\t\t\tupAxis: parseAssetUpAxis( getElementsByTagName( xml, 'up_axis' )[ 0 ] )\n\t\t\t};\n\n\t\t}\n\n\t\tfunction parseAssetUnit( xml ) {\n\n\t\t\tif ( ( xml !== undefined ) && ( xml.hasAttribute( 'meter' ) === true ) ) {\n\n\t\t\t\treturn parseFloat( xml.getAttribute( 'meter' ) );\n\n\t\t\t} else {\n\n\t\t\t\treturn 1; // default 1 meter\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction parseAssetUpAxis( xml ) {\n\n\t\t\treturn xml !== undefined ? xml.textContent : 'Y_UP';\n\n\t\t}\n\n\t\t// library\n\n\t\tfunction parseLibrary( xml, libraryName, nodeName, parser ) {\n\n\t\t\tvar library = getElementsByTagName( xml, libraryName )[ 0 ];\n\n\t\t\tif ( library !== undefined ) {\n\n\t\t\t\tvar elements = getElementsByTagName( library, nodeName );\n\n\t\t\t\tfor ( var i = 0; i < elements.length; i ++ ) {\n\n\t\t\t\t\tparser( elements[ i ] );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction buildLibrary( data, builder ) {\n\n\t\t\tfor ( var name in data ) {\n\n\t\t\t\tvar object = data[ name ];\n\t\t\t\tobject.build = builder( data[ name ] );\n\n\t\t\t}\n\n\t\t}\n\n\t\t// get\n\n\t\tfunction getBuild( data, builder ) {\n\n\t\t\tif ( data.build !== undefined ) return data.build;\n\n\t\t\tdata.build = builder( data );\n\n\t\t\treturn data.build;\n\n\t\t}\n\n\t\t// animation\n\n\t\tfunction parseAnimation( xml ) {\n\n\t\t\tvar data = {\n\t\t\t\tsources: {},\n\t\t\t\tsamplers: {},\n\t\t\t\tchannels: {}\n\t\t\t};\n\n\t\t\tvar hasChildren = false;\n\n\t\t\tfor ( var i = 0, l = xml.childNodes.length; i < l; i ++ ) {\n\n\t\t\t\tvar child = xml.childNodes[ i ];\n\n\t\t\t\tif ( child.nodeType !== 1 ) continue;\n\n\t\t\t\tvar id;\n\n\t\t\t\tswitch ( child.nodeName ) {\n\n\t\t\t\t\tcase 'source':\n\t\t\t\t\t\tid = child.getAttribute( 'id' );\n\t\t\t\t\t\tdata.sources[ id ] = parseSource( child );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'sampler':\n\t\t\t\t\t\tid = child.getAttribute( 'id' );\n\t\t\t\t\t\tdata.samplers[ id ] = parseAnimationSampler( child );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'channel':\n\t\t\t\t\t\tid = child.getAttribute( 'target' );\n\t\t\t\t\t\tdata.channels[ id ] = parseAnimationChannel( child );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'animation':\n\t\t\t\t\t\t// hierarchy of related animations\n\t\t\t\t\t\tparseAnimation( child );\n\t\t\t\t\t\thasChildren = true;\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tconsole.log( child );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( hasChildren === false ) {\n\n\t\t\t\t// since 'id' attributes can be optional, it's necessary to generate a UUID for unqiue assignment\n\n\t\t\t\tlibrary.animations[ xml.getAttribute( 'id' ) || MathUtils.generateUUID() ] = data;\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction parseAnimationSampler( xml ) {\n\n\t\t\tvar data = {\n\t\t\t\tinputs: {},\n\t\t\t};\n\n\t\t\tfor ( var i = 0, l = xml.childNodes.length; i < l; i ++ ) {\n\n\t\t\t\tvar child = xml.childNodes[ i ];\n\n\t\t\t\tif ( child.nodeType !== 1 ) continue;\n\n\t\t\t\tswitch ( child.nodeName ) {\n\n\t\t\t\t\tcase 'input':\n\t\t\t\t\t\tvar id = parseId( child.getAttribute( 'source' ) );\n\t\t\t\t\t\tvar semantic = child.getAttribute( 'semantic' );\n\t\t\t\t\t\tdata.inputs[ semantic ] = id;\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn data;\n\n\t\t}\n\n\t\tfunction parseAnimationChannel( xml ) {\n\n\t\t\tvar data = {};\n\n\t\t\tvar target = xml.getAttribute( 'target' );\n\n\t\t\t// parsing SID Addressing Syntax\n\n\t\t\tvar parts = target.split( '/' );\n\n\t\t\tvar id = parts.shift();\n\t\t\tvar sid = parts.shift();\n\n\t\t\t// check selection syntax\n\n\t\t\tvar arraySyntax = ( sid.indexOf( '(' ) !== - 1 );\n\t\t\tvar memberSyntax = ( sid.indexOf( '.' ) !== - 1 );\n\n\t\t\tif ( memberSyntax ) {\n\n\t\t\t\t//  member selection access\n\n\t\t\t\tparts = sid.split( '.' );\n\t\t\t\tsid = parts.shift();\n\t\t\t\tdata.member = parts.shift();\n\n\t\t\t} else if ( arraySyntax ) {\n\n\t\t\t\t// array-access syntax. can be used to express fields in one-dimensional vectors or two-dimensional matrices.\n\n\t\t\t\tvar indices = sid.split( '(' );\n\t\t\t\tsid = indices.shift();\n\n\t\t\t\tfor ( var i = 0; i < indices.length; i ++ ) {\n\n\t\t\t\t\tindices[ i ] = parseInt( indices[ i ].replace( /\\)/, '' ) );\n\n\t\t\t\t}\n\n\t\t\t\tdata.indices = indices;\n\n\t\t\t}\n\n\t\t\tdata.id = id;\n\t\t\tdata.sid = sid;\n\n\t\t\tdata.arraySyntax = arraySyntax;\n\t\t\tdata.memberSyntax = memberSyntax;\n\n\t\t\tdata.sampler = parseId( xml.getAttribute( 'source' ) );\n\n\t\t\treturn data;\n\n\t\t}\n\n\t\tfunction buildAnimation( data ) {\n\n\t\t\tvar tracks = [];\n\n\t\t\tvar channels = data.channels;\n\t\t\tvar samplers = data.samplers;\n\t\t\tvar sources = data.sources;\n\n\t\t\tfor ( var target in channels ) {\n\n\t\t\t\tif ( channels.hasOwnProperty( target ) ) {\n\n\t\t\t\t\tvar channel = channels[ target ];\n\t\t\t\t\tvar sampler = samplers[ channel.sampler ];\n\n\t\t\t\t\tvar inputId = sampler.inputs.INPUT;\n\t\t\t\t\tvar outputId = sampler.inputs.OUTPUT;\n\n\t\t\t\t\tvar inputSource = sources[ inputId ];\n\t\t\t\t\tvar outputSource = sources[ outputId ];\n\n\t\t\t\t\tvar animation = buildAnimationChannel( channel, inputSource, outputSource );\n\n\t\t\t\t\tcreateKeyframeTracks( animation, tracks );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn tracks;\n\n\t\t}\n\n\t\tfunction getAnimation( id ) {\n\n\t\t\treturn getBuild( library.animations[ id ], buildAnimation );\n\n\t\t}\n\n\t\tfunction buildAnimationChannel( channel, inputSource, outputSource ) {\n\n\t\t\tvar node = library.nodes[ channel.id ];\n\t\t\tvar object3D = getNode( node.id );\n\n\t\t\tvar transform = node.transforms[ channel.sid ];\n\t\t\tvar defaultMatrix = node.matrix.clone().transpose();\n\n\t\t\tvar time, stride;\n\t\t\tvar i, il, j, jl;\n\n\t\t\tvar data = {};\n\n\t\t\t// the collada spec allows the animation of data in various ways.\n\t\t\t// depending on the transform type (matrix, translate, rotate, scale), we execute different logic\n\n\t\t\tswitch ( transform ) {\n\n\t\t\t\tcase 'matrix':\n\n\t\t\t\t\tfor ( i = 0, il = inputSource.array.length; i < il; i ++ ) {\n\n\t\t\t\t\t\ttime = inputSource.array[ i ];\n\t\t\t\t\t\tstride = i * outputSource.stride;\n\n\t\t\t\t\t\tif ( data[ time ] === undefined ) data[ time ] = {};\n\n\t\t\t\t\t\tif ( channel.arraySyntax === true ) {\n\n\t\t\t\t\t\t\tvar value = outputSource.array[ stride ];\n\t\t\t\t\t\t\tvar index = channel.indices[ 0 ] + 4 * channel.indices[ 1 ];\n\n\t\t\t\t\t\t\tdata[ time ][ index ] = value;\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tfor ( j = 0, jl = outputSource.stride; j < jl; j ++ ) {\n\n\t\t\t\t\t\t\t\tdata[ time ][ j ] = outputSource.array[ stride + j ];\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'translate':\n\t\t\t\t\tconsole.warn( 'THREE.ColladaLoader: Animation transform type \"%s\" not yet implemented.', transform );\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'rotate':\n\t\t\t\t\tconsole.warn( 'THREE.ColladaLoader: Animation transform type \"%s\" not yet implemented.', transform );\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'scale':\n\t\t\t\t\tconsole.warn( 'THREE.ColladaLoader: Animation transform type \"%s\" not yet implemented.', transform );\n\t\t\t\t\tbreak;\n\n\t\t\t}\n\n\t\t\tvar keyframes = prepareAnimationData( data, defaultMatrix );\n\n\t\t\tvar animation = {\n\t\t\t\tname: object3D.uuid,\n\t\t\t\tkeyframes: keyframes\n\t\t\t};\n\n\t\t\treturn animation;\n\n\t\t}\n\n\t\tfunction prepareAnimationData( data, defaultMatrix ) {\n\n\t\t\tvar keyframes = [];\n\n\t\t\t// transfer data into a sortable array\n\n\t\t\tfor ( var time in data ) {\n\n\t\t\t\tkeyframes.push( { time: parseFloat( time ), value: data[ time ] } );\n\n\t\t\t}\n\n\t\t\t// ensure keyframes are sorted by time\n\n\t\t\tkeyframes.sort( ascending );\n\n\t\t\t// now we clean up all animation data, so we can use them for keyframe tracks\n\n\t\t\tfor ( var i = 0; i < 16; i ++ ) {\n\n\t\t\t\ttransformAnimationData( keyframes, i, defaultMatrix.elements[ i ] );\n\n\t\t\t}\n\n\t\t\treturn keyframes;\n\n\t\t\t// array sort function\n\n\t\t\tfunction ascending( a, b ) {\n\n\t\t\t\treturn a.time - b.time;\n\n\t\t\t}\n\n\t\t}\n\n\t\tvar position = new Vector3();\n\t\tvar scale = new Vector3();\n\t\tvar quaternion = new Quaternion();\n\n\t\tfunction createKeyframeTracks( animation, tracks ) {\n\n\t\t\tvar keyframes = animation.keyframes;\n\t\t\tvar name = animation.name;\n\n\t\t\tvar times = [];\n\t\t\tvar positionData = [];\n\t\t\tvar quaternionData = [];\n\t\t\tvar scaleData = [];\n\n\t\t\tfor ( var i = 0, l = keyframes.length; i < l; i ++ ) {\n\n\t\t\t\tvar keyframe = keyframes[ i ];\n\n\t\t\t\tvar time = keyframe.time;\n\t\t\t\tvar value = keyframe.value;\n\n\t\t\t\tmatrix.fromArray( value ).transpose();\n\t\t\t\tmatrix.decompose( position, quaternion, scale );\n\n\t\t\t\ttimes.push( time );\n\t\t\t\tpositionData.push( position.x, position.y, position.z );\n\t\t\t\tquaternionData.push( quaternion.x, quaternion.y, quaternion.z, quaternion.w );\n\t\t\t\tscaleData.push( scale.x, scale.y, scale.z );\n\n\t\t\t}\n\n\t\t\tif ( positionData.length > 0 ) tracks.push( new VectorKeyframeTrack( name + '.position', times, positionData ) );\n\t\t\tif ( quaternionData.length > 0 ) tracks.push( new QuaternionKeyframeTrack( name + '.quaternion', times, quaternionData ) );\n\t\t\tif ( scaleData.length > 0 ) tracks.push( new VectorKeyframeTrack( name + '.scale', times, scaleData ) );\n\n\t\t\treturn tracks;\n\n\t\t}\n\n\t\tfunction transformAnimationData( keyframes, property, defaultValue ) {\n\n\t\t\tvar keyframe;\n\n\t\t\tvar empty = true;\n\t\t\tvar i, l;\n\n\t\t\t// check, if values of a property are missing in our keyframes\n\n\t\t\tfor ( i = 0, l = keyframes.length; i < l; i ++ ) {\n\n\t\t\t\tkeyframe = keyframes[ i ];\n\n\t\t\t\tif ( keyframe.value[ property ] === undefined ) {\n\n\t\t\t\t\tkeyframe.value[ property ] = null; // mark as missing\n\n\t\t\t\t} else {\n\n\t\t\t\t\tempty = false;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( empty === true ) {\n\n\t\t\t\t// no values at all, so we set a default value\n\n\t\t\t\tfor ( i = 0, l = keyframes.length; i < l; i ++ ) {\n\n\t\t\t\t\tkeyframe = keyframes[ i ];\n\n\t\t\t\t\tkeyframe.value[ property ] = defaultValue;\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\t// filling gaps\n\n\t\t\t\tcreateMissingKeyframes( keyframes, property );\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction createMissingKeyframes( keyframes, property ) {\n\n\t\t\tvar prev, next;\n\n\t\t\tfor ( var i = 0, l = keyframes.length; i < l; i ++ ) {\n\n\t\t\t\tvar keyframe = keyframes[ i ];\n\n\t\t\t\tif ( keyframe.value[ property ] === null ) {\n\n\t\t\t\t\tprev = getPrev( keyframes, i, property );\n\t\t\t\t\tnext = getNext( keyframes, i, property );\n\n\t\t\t\t\tif ( prev === null ) {\n\n\t\t\t\t\t\tkeyframe.value[ property ] = next.value[ property ];\n\t\t\t\t\t\tcontinue;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( next === null ) {\n\n\t\t\t\t\t\tkeyframe.value[ property ] = prev.value[ property ];\n\t\t\t\t\t\tcontinue;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tinterpolate( keyframe, prev, next, property );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction getPrev( keyframes, i, property ) {\n\n\t\t\twhile ( i >= 0 ) {\n\n\t\t\t\tvar keyframe = keyframes[ i ];\n\n\t\t\t\tif ( keyframe.value[ property ] !== null ) return keyframe;\n\n\t\t\t\ti --;\n\n\t\t\t}\n\n\t\t\treturn null;\n\n\t\t}\n\n\t\tfunction getNext( keyframes, i, property ) {\n\n\t\t\twhile ( i < keyframes.length ) {\n\n\t\t\t\tvar keyframe = keyframes[ i ];\n\n\t\t\t\tif ( keyframe.value[ property ] !== null ) return keyframe;\n\n\t\t\t\ti ++;\n\n\t\t\t}\n\n\t\t\treturn null;\n\n\t\t}\n\n\t\tfunction interpolate( key, prev, next, property ) {\n\n\t\t\tif ( ( next.time - prev.time ) === 0 ) {\n\n\t\t\t\tkey.value[ property ] = prev.value[ property ];\n\t\t\t\treturn;\n\n\t\t\t}\n\n\t\t\tkey.value[ property ] = ( ( key.time - prev.time ) * ( next.value[ property ] - prev.value[ property ] ) / ( next.time - prev.time ) ) + prev.value[ property ];\n\n\t\t}\n\n\t\t// animation clips\n\n\t\tfunction parseAnimationClip( xml ) {\n\n\t\t\tvar data = {\n\t\t\t\tname: xml.getAttribute( 'id' ) || 'default',\n\t\t\t\tstart: parseFloat( xml.getAttribute( 'start' ) || 0 ),\n\t\t\t\tend: parseFloat( xml.getAttribute( 'end' ) || 0 ),\n\t\t\t\tanimations: []\n\t\t\t};\n\n\t\t\tfor ( var i = 0, l = xml.childNodes.length; i < l; i ++ ) {\n\n\t\t\t\tvar child = xml.childNodes[ i ];\n\n\t\t\t\tif ( child.nodeType !== 1 ) continue;\n\n\t\t\t\tswitch ( child.nodeName ) {\n\n\t\t\t\t\tcase 'instance_animation':\n\t\t\t\t\t\tdata.animations.push( parseId( child.getAttribute( 'url' ) ) );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tlibrary.clips[ xml.getAttribute( 'id' ) ] = data;\n\n\t\t}\n\n\t\tfunction buildAnimationClip( data ) {\n\n\t\t\tvar tracks = [];\n\n\t\t\tvar name = data.name;\n\t\t\tvar duration = ( data.end - data.start ) || - 1;\n\t\t\tvar animations = data.animations;\n\n\t\t\tfor ( var i = 0, il = animations.length; i < il; i ++ ) {\n\n\t\t\t\tvar animationTracks = getAnimation( animations[ i ] );\n\n\t\t\t\tfor ( var j = 0, jl = animationTracks.length; j < jl; j ++ ) {\n\n\t\t\t\t\ttracks.push( animationTracks[ j ] );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn new AnimationClip( name, duration, tracks );\n\n\t\t}\n\n\t\tfunction getAnimationClip( id ) {\n\n\t\t\treturn getBuild( library.clips[ id ], buildAnimationClip );\n\n\t\t}\n\n\t\t// controller\n\n\t\tfunction parseController( xml ) {\n\n\t\t\tvar data = {};\n\n\t\t\tfor ( var i = 0, l = xml.childNodes.length; i < l; i ++ ) {\n\n\t\t\t\tvar child = xml.childNodes[ i ];\n\n\t\t\t\tif ( child.nodeType !== 1 ) continue;\n\n\t\t\t\tswitch ( child.nodeName ) {\n\n\t\t\t\t\tcase 'skin':\n\t\t\t\t\t\t// there is exactly one skin per controller\n\t\t\t\t\t\tdata.id = parseId( child.getAttribute( 'source' ) );\n\t\t\t\t\t\tdata.skin = parseSkin( child );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'morph':\n\t\t\t\t\t\tdata.id = parseId( child.getAttribute( 'source' ) );\n\t\t\t\t\t\tconsole.warn( 'THREE.ColladaLoader: Morph target animation not supported yet.' );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tlibrary.controllers[ xml.getAttribute( 'id' ) ] = data;\n\n\t\t}\n\n\t\tfunction parseSkin( xml ) {\n\n\t\t\tvar data = {\n\t\t\t\tsources: {}\n\t\t\t};\n\n\t\t\tfor ( var i = 0, l = xml.childNodes.length; i < l; i ++ ) {\n\n\t\t\t\tvar child = xml.childNodes[ i ];\n\n\t\t\t\tif ( child.nodeType !== 1 ) continue;\n\n\t\t\t\tswitch ( child.nodeName ) {\n\n\t\t\t\t\tcase 'bind_shape_matrix':\n\t\t\t\t\t\tdata.bindShapeMatrix = parseFloats( child.textContent );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'source':\n\t\t\t\t\t\tvar id = child.getAttribute( 'id' );\n\t\t\t\t\t\tdata.sources[ id ] = parseSource( child );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'joints':\n\t\t\t\t\t\tdata.joints = parseJoints( child );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'vertex_weights':\n\t\t\t\t\t\tdata.vertexWeights = parseVertexWeights( child );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn data;\n\n\t\t}\n\n\t\tfunction parseJoints( xml ) {\n\n\t\t\tvar data = {\n\t\t\t\tinputs: {}\n\t\t\t};\n\n\t\t\tfor ( var i = 0, l = xml.childNodes.length; i < l; i ++ ) {\n\n\t\t\t\tvar child = xml.childNodes[ i ];\n\n\t\t\t\tif ( child.nodeType !== 1 ) continue;\n\n\t\t\t\tswitch ( child.nodeName ) {\n\n\t\t\t\t\tcase 'input':\n\t\t\t\t\t\tvar semantic = child.getAttribute( 'semantic' );\n\t\t\t\t\t\tvar id = parseId( child.getAttribute( 'source' ) );\n\t\t\t\t\t\tdata.inputs[ semantic ] = id;\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn data;\n\n\t\t}\n\n\t\tfunction parseVertexWeights( xml ) {\n\n\t\t\tvar data = {\n\t\t\t\tinputs: {}\n\t\t\t};\n\n\t\t\tfor ( var i = 0, l = xml.childNodes.length; i < l; i ++ ) {\n\n\t\t\t\tvar child = xml.childNodes[ i ];\n\n\t\t\t\tif ( child.nodeType !== 1 ) continue;\n\n\t\t\t\tswitch ( child.nodeName ) {\n\n\t\t\t\t\tcase 'input':\n\t\t\t\t\t\tvar semantic = child.getAttribute( 'semantic' );\n\t\t\t\t\t\tvar id = parseId( child.getAttribute( 'source' ) );\n\t\t\t\t\t\tvar offset = parseInt( child.getAttribute( 'offset' ) );\n\t\t\t\t\t\tdata.inputs[ semantic ] = { id: id, offset: offset };\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'vcount':\n\t\t\t\t\t\tdata.vcount = parseInts( child.textContent );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'v':\n\t\t\t\t\t\tdata.v = parseInts( child.textContent );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn data;\n\n\t\t}\n\n\t\tfunction buildController( data ) {\n\n\t\t\tvar build = {\n\t\t\t\tid: data.id\n\t\t\t};\n\n\t\t\tvar geometry = library.geometries[ build.id ];\n\n\t\t\tif ( data.skin !== undefined ) {\n\n\t\t\t\tbuild.skin = buildSkin( data.skin );\n\n\t\t\t\t// we enhance the 'sources' property of the corresponding geometry with our skin data\n\n\t\t\t\tgeometry.sources.skinIndices = build.skin.indices;\n\t\t\t\tgeometry.sources.skinWeights = build.skin.weights;\n\n\t\t\t}\n\n\t\t\treturn build;\n\n\t\t}\n\n\t\tfunction buildSkin( data ) {\n\n\t\t\tvar BONE_LIMIT = 4;\n\n\t\t\tvar build = {\n\t\t\t\tjoints: [], // this must be an array to preserve the joint order\n\t\t\t\tindices: {\n\t\t\t\t\tarray: [],\n\t\t\t\t\tstride: BONE_LIMIT\n\t\t\t\t},\n\t\t\t\tweights: {\n\t\t\t\t\tarray: [],\n\t\t\t\t\tstride: BONE_LIMIT\n\t\t\t\t}\n\t\t\t};\n\n\t\t\tvar sources = data.sources;\n\t\t\tvar vertexWeights = data.vertexWeights;\n\n\t\t\tvar vcount = vertexWeights.vcount;\n\t\t\tvar v = vertexWeights.v;\n\t\t\tvar jointOffset = vertexWeights.inputs.JOINT.offset;\n\t\t\tvar weightOffset = vertexWeights.inputs.WEIGHT.offset;\n\n\t\t\tvar jointSource = data.sources[ data.joints.inputs.JOINT ];\n\t\t\tvar inverseSource = data.sources[ data.joints.inputs.INV_BIND_MATRIX ];\n\n\t\t\tvar weights = sources[ vertexWeights.inputs.WEIGHT.id ].array;\n\t\t\tvar stride = 0;\n\n\t\t\tvar i, j, l;\n\n\t\t\t// procces skin data for each vertex\n\n\t\t\tfor ( i = 0, l = vcount.length; i < l; i ++ ) {\n\n\t\t\t\tvar jointCount = vcount[ i ]; // this is the amount of joints that affect a single vertex\n\t\t\t\tvar vertexSkinData = [];\n\n\t\t\t\tfor ( j = 0; j < jointCount; j ++ ) {\n\n\t\t\t\t\tvar skinIndex = v[ stride + jointOffset ];\n\t\t\t\t\tvar weightId = v[ stride + weightOffset ];\n\t\t\t\t\tvar skinWeight = weights[ weightId ];\n\n\t\t\t\t\tvertexSkinData.push( { index: skinIndex, weight: skinWeight } );\n\n\t\t\t\t\tstride += 2;\n\n\t\t\t\t}\n\n\t\t\t\t// we sort the joints in descending order based on the weights.\n\t\t\t\t// this ensures, we only procced the most important joints of the vertex\n\n\t\t\t\tvertexSkinData.sort( descending );\n\n\t\t\t\t// now we provide for each vertex a set of four index and weight values.\n\t\t\t\t// the order of the skin data matches the order of vertices\n\n\t\t\t\tfor ( j = 0; j < BONE_LIMIT; j ++ ) {\n\n\t\t\t\t\tvar d = vertexSkinData[ j ];\n\n\t\t\t\t\tif ( d !== undefined ) {\n\n\t\t\t\t\t\tbuild.indices.array.push( d.index );\n\t\t\t\t\t\tbuild.weights.array.push( d.weight );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tbuild.indices.array.push( 0 );\n\t\t\t\t\t\tbuild.weights.array.push( 0 );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// setup bind matrix\n\n\t\t\tif ( data.bindShapeMatrix ) {\n\n\t\t\t\tbuild.bindMatrix = new Matrix4().fromArray( data.bindShapeMatrix ).transpose();\n\n\t\t\t} else {\n\n\t\t\t\tbuild.bindMatrix = new Matrix4().identity();\n\n\t\t\t}\n\n\t\t\t// process bones and inverse bind matrix data\n\n\t\t\tfor ( i = 0, l = jointSource.array.length; i < l; i ++ ) {\n\n\t\t\t\tvar name = jointSource.array[ i ];\n\t\t\t\tvar boneInverse = new Matrix4().fromArray( inverseSource.array, i * inverseSource.stride ).transpose();\n\n\t\t\t\tbuild.joints.push( { name: name, boneInverse: boneInverse } );\n\n\t\t\t}\n\n\t\t\treturn build;\n\n\t\t\t// array sort function\n\n\t\t\tfunction descending( a, b ) {\n\n\t\t\t\treturn b.weight - a.weight;\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction getController( id ) {\n\n\t\t\treturn getBuild( library.controllers[ id ], buildController );\n\n\t\t}\n\n\t\t// image\n\n\t\tfunction parseImage( xml ) {\n\n\t\t\tvar data = {\n\t\t\t\tinit_from: getElementsByTagName( xml, 'init_from' )[ 0 ].textContent\n\t\t\t};\n\n\t\t\tlibrary.images[ xml.getAttribute( 'id' ) ] = data;\n\n\t\t}\n\n\t\tfunction buildImage( data ) {\n\n\t\t\tif ( data.build !== undefined ) return data.build;\n\n\t\t\treturn data.init_from;\n\n\t\t}\n\n\t\tfunction getImage( id ) {\n\n\t\t\tvar data = library.images[ id ];\n\n\t\t\tif ( data !== undefined ) {\n\n\t\t\t\treturn getBuild( data, buildImage );\n\n\t\t\t}\n\n\t\t\tconsole.warn( 'THREE.ColladaLoader: Couldn\\'t find image with ID:', id );\n\n\t\t\treturn null;\n\n\t\t}\n\n\t\t// effect\n\n\t\tfunction parseEffect( xml ) {\n\n\t\t\tvar data = {};\n\n\t\t\tfor ( var i = 0, l = xml.childNodes.length; i < l; i ++ ) {\n\n\t\t\t\tvar child = xml.childNodes[ i ];\n\n\t\t\t\tif ( child.nodeType !== 1 ) continue;\n\n\t\t\t\tswitch ( child.nodeName ) {\n\n\t\t\t\t\tcase 'profile_COMMON':\n\t\t\t\t\t\tdata.profile = parseEffectProfileCOMMON( child );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tlibrary.effects[ xml.getAttribute( 'id' ) ] = data;\n\n\t\t}\n\n\t\tfunction parseEffectProfileCOMMON( xml ) {\n\n\t\t\tvar data = {\n\t\t\t\tsurfaces: {},\n\t\t\t\tsamplers: {}\n\t\t\t};\n\n\t\t\tfor ( var i = 0, l = xml.childNodes.length; i < l; i ++ ) {\n\n\t\t\t\tvar child = xml.childNodes[ i ];\n\n\t\t\t\tif ( child.nodeType !== 1 ) continue;\n\n\t\t\t\tswitch ( child.nodeName ) {\n\n\t\t\t\t\tcase 'newparam':\n\t\t\t\t\t\tparseEffectNewparam( child, data );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'technique':\n\t\t\t\t\t\tdata.technique = parseEffectTechnique( child );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'extra':\n\t\t\t\t\t\tdata.extra = parseEffectExtra( child );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn data;\n\n\t\t}\n\n\t\tfunction parseEffectNewparam( xml, data ) {\n\n\t\t\tvar sid = xml.getAttribute( 'sid' );\n\n\t\t\tfor ( var i = 0, l = xml.childNodes.length; i < l; i ++ ) {\n\n\t\t\t\tvar child = xml.childNodes[ i ];\n\n\t\t\t\tif ( child.nodeType !== 1 ) continue;\n\n\t\t\t\tswitch ( child.nodeName ) {\n\n\t\t\t\t\tcase 'surface':\n\t\t\t\t\t\tdata.surfaces[ sid ] = parseEffectSurface( child );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'sampler2D':\n\t\t\t\t\t\tdata.samplers[ sid ] = parseEffectSampler( child );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction parseEffectSurface( xml ) {\n\n\t\t\tvar data = {};\n\n\t\t\tfor ( var i = 0, l = xml.childNodes.length; i < l; i ++ ) {\n\n\t\t\t\tvar child = xml.childNodes[ i ];\n\n\t\t\t\tif ( child.nodeType !== 1 ) continue;\n\n\t\t\t\tswitch ( child.nodeName ) {\n\n\t\t\t\t\tcase 'init_from':\n\t\t\t\t\t\tdata.init_from = child.textContent;\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn data;\n\n\t\t}\n\n\t\tfunction parseEffectSampler( xml ) {\n\n\t\t\tvar data = {};\n\n\t\t\tfor ( var i = 0, l = xml.childNodes.length; i < l; i ++ ) {\n\n\t\t\t\tvar child = xml.childNodes[ i ];\n\n\t\t\t\tif ( child.nodeType !== 1 ) continue;\n\n\t\t\t\tswitch ( child.nodeName ) {\n\n\t\t\t\t\tcase 'source':\n\t\t\t\t\t\tdata.source = child.textContent;\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn data;\n\n\t\t}\n\n\t\tfunction parseEffectTechnique( xml ) {\n\n\t\t\tvar data = {};\n\n\t\t\tfor ( var i = 0, l = xml.childNodes.length; i < l; i ++ ) {\n\n\t\t\t\tvar child = xml.childNodes[ i ];\n\n\t\t\t\tif ( child.nodeType !== 1 ) continue;\n\n\t\t\t\tswitch ( child.nodeName ) {\n\n\t\t\t\t\tcase 'constant':\n\t\t\t\t\tcase 'lambert':\n\t\t\t\t\tcase 'blinn':\n\t\t\t\t\tcase 'phong':\n\t\t\t\t\t\tdata.type = child.nodeName;\n\t\t\t\t\t\tdata.parameters = parseEffectParameters( child );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn data;\n\n\t\t}\n\n\t\tfunction parseEffectParameters( xml ) {\n\n\t\t\tvar data = {};\n\n\t\t\tfor ( var i = 0, l = xml.childNodes.length; i < l; i ++ ) {\n\n\t\t\t\tvar child = xml.childNodes[ i ];\n\n\t\t\t\tif ( child.nodeType !== 1 ) continue;\n\n\t\t\t\tswitch ( child.nodeName ) {\n\n\t\t\t\t\tcase 'emission':\n\t\t\t\t\tcase 'diffuse':\n\t\t\t\t\tcase 'specular':\n\t\t\t\t\tcase 'bump':\n\t\t\t\t\tcase 'ambient':\n\t\t\t\t\tcase 'shininess':\n\t\t\t\t\tcase 'transparency':\n\t\t\t\t\t\tdata[ child.nodeName ] = parseEffectParameter( child );\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'transparent':\n\t\t\t\t\t\tdata[ child.nodeName ] = {\n\t\t\t\t\t\t\topaque: child.getAttribute( 'opaque' ),\n\t\t\t\t\t\t\tdata: parseEffectParameter( child )\n\t\t\t\t\t\t};\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn data;\n\n\t\t}\n\n\t\tfunction parseEffectParameter( xml ) {\n\n\t\t\tvar data = {};\n\n\t\t\tfor ( var i = 0, l = xml.childNodes.length; i < l; i ++ ) {\n\n\t\t\t\tvar child = xml.childNodes[ i ];\n\n\t\t\t\tif ( child.nodeType !== 1 ) continue;\n\n\t\t\t\tswitch ( child.nodeName ) {\n\n\t\t\t\t\tcase 'color':\n\t\t\t\t\t\tdata[ child.nodeName ] = parseFloats( child.textContent );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'float':\n\t\t\t\t\t\tdata[ child.nodeName ] = parseFloat( child.textContent );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'texture':\n\t\t\t\t\t\tdata[ child.nodeName ] = { id: child.getAttribute( 'texture' ), extra: parseEffectParameterTexture( child ) };\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn data;\n\n\t\t}\n\n\t\tfunction parseEffectParameterTexture( xml ) {\n\n\t\t\tvar data = {\n\t\t\t\ttechnique: {}\n\t\t\t};\n\n\t\t\tfor ( var i = 0, l = xml.childNodes.length; i < l; i ++ ) {\n\n\t\t\t\tvar child = xml.childNodes[ i ];\n\n\t\t\t\tif ( child.nodeType !== 1 ) continue;\n\n\t\t\t\tswitch ( child.nodeName ) {\n\n\t\t\t\t\tcase 'extra':\n\t\t\t\t\t\tparseEffectParameterTextureExtra( child, data );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn data;\n\n\t\t}\n\n\t\tfunction parseEffectParameterTextureExtra( xml, data ) {\n\n\t\t\tfor ( var i = 0, l = xml.childNodes.length; i < l; i ++ ) {\n\n\t\t\t\tvar child = xml.childNodes[ i ];\n\n\t\t\t\tif ( child.nodeType !== 1 ) continue;\n\n\t\t\t\tswitch ( child.nodeName ) {\n\n\t\t\t\t\tcase 'technique':\n\t\t\t\t\t\tparseEffectParameterTextureExtraTechnique( child, data );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction parseEffectParameterTextureExtraTechnique( xml, data ) {\n\n\t\t\tfor ( var i = 0, l = xml.childNodes.length; i < l; i ++ ) {\n\n\t\t\t\tvar child = xml.childNodes[ i ];\n\n\t\t\t\tif ( child.nodeType !== 1 ) continue;\n\n\t\t\t\tswitch ( child.nodeName ) {\n\n\t\t\t\t\tcase 'repeatU':\n\t\t\t\t\tcase 'repeatV':\n\t\t\t\t\tcase 'offsetU':\n\t\t\t\t\tcase 'offsetV':\n\t\t\t\t\t\tdata.technique[ child.nodeName ] = parseFloat( child.textContent );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'wrapU':\n\t\t\t\t\tcase 'wrapV':\n\n\t\t\t\t\t\t// some files have values for wrapU/wrapV which become NaN via parseInt\n\n\t\t\t\t\t\tif ( child.textContent.toUpperCase() === 'TRUE' ) {\n\n\t\t\t\t\t\t\tdata.technique[ child.nodeName ] = 1;\n\n\t\t\t\t\t\t} else if ( child.textContent.toUpperCase() === 'FALSE' ) {\n\n\t\t\t\t\t\t\tdata.technique[ child.nodeName ] = 0;\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tdata.technique[ child.nodeName ] = parseInt( child.textContent );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction parseEffectExtra( xml ) {\n\n\t\t\tvar data = {};\n\n\t\t\tfor ( var i = 0, l = xml.childNodes.length; i < l; i ++ ) {\n\n\t\t\t\tvar child = xml.childNodes[ i ];\n\n\t\t\t\tif ( child.nodeType !== 1 ) continue;\n\n\t\t\t\tswitch ( child.nodeName ) {\n\n\t\t\t\t\tcase 'technique':\n\t\t\t\t\t\tdata.technique = parseEffectExtraTechnique( child );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn data;\n\n\t\t}\n\n\t\tfunction parseEffectExtraTechnique( xml ) {\n\n\t\t\tvar data = {};\n\n\t\t\tfor ( var i = 0, l = xml.childNodes.length; i < l; i ++ ) {\n\n\t\t\t\tvar child = xml.childNodes[ i ];\n\n\t\t\t\tif ( child.nodeType !== 1 ) continue;\n\n\t\t\t\tswitch ( child.nodeName ) {\n\n\t\t\t\t\tcase 'double_sided':\n\t\t\t\t\t\tdata[ child.nodeName ] = parseInt( child.textContent );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn data;\n\n\t\t}\n\n\t\tfunction buildEffect( data ) {\n\n\t\t\treturn data;\n\n\t\t}\n\n\t\tfunction getEffect( id ) {\n\n\t\t\treturn getBuild( library.effects[ id ], buildEffect );\n\n\t\t}\n\n\t\t// material\n\n\t\tfunction parseMaterial( xml ) {\n\n\t\t\tvar data = {\n\t\t\t\tname: xml.getAttribute( 'name' )\n\t\t\t};\n\n\t\t\tfor ( var i = 0, l = xml.childNodes.length; i < l; i ++ ) {\n\n\t\t\t\tvar child = xml.childNodes[ i ];\n\n\t\t\t\tif ( child.nodeType !== 1 ) continue;\n\n\t\t\t\tswitch ( child.nodeName ) {\n\n\t\t\t\t\tcase 'instance_effect':\n\t\t\t\t\t\tdata.url = parseId( child.getAttribute( 'url' ) );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tlibrary.materials[ xml.getAttribute( 'id' ) ] = data;\n\n\t\t}\n\n\t\tfunction getTextureLoader( image ) {\n\n\t\t\tvar loader;\n\n\t\t\tvar extension = image.slice( ( image.lastIndexOf( '.' ) - 1 >>> 0 ) + 2 ); // http://www.jstips.co/en/javascript/get-file-extension/\n\t\t\textension = extension.toLowerCase();\n\n\t\t\tswitch ( extension ) {\n\n\t\t\t\tcase 'tga':\n\t\t\t\t\tloader = tgaLoader;\n\t\t\t\t\tbreak;\n\n\t\t\t\tdefault:\n\t\t\t\t\tloader = textureLoader;\n\n\t\t\t}\n\n\t\t\treturn loader;\n\n\t\t}\n\n\t\tfunction buildMaterial( data ) {\n\n\t\t\tvar effect = getEffect( data.url );\n\t\t\tvar technique = effect.profile.technique;\n\t\t\tvar extra = effect.profile.extra;\n\n\t\t\tvar material;\n\n\t\t\tswitch ( technique.type ) {\n\n\t\t\t\tcase 'phong':\n\t\t\t\tcase 'blinn':\n\t\t\t\t\tmaterial = new MeshPhongMaterial();\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'lambert':\n\t\t\t\t\tmaterial = new MeshLambertMaterial();\n\t\t\t\t\tbreak;\n\n\t\t\t\tdefault:\n\t\t\t\t\tmaterial = new MeshBasicMaterial();\n\t\t\t\t\tbreak;\n\n\t\t\t}\n\n\t\t\tmaterial.name = data.name || '';\n\n\t\t\tfunction getTexture( textureObject ) {\n\n\t\t\t\tvar sampler = effect.profile.samplers[ textureObject.id ];\n\t\t\t\tvar image = null;\n\n\t\t\t\t// get image\n\n\t\t\t\tif ( sampler !== undefined ) {\n\n\t\t\t\t\tvar surface = effect.profile.surfaces[ sampler.source ];\n\t\t\t\t\timage = getImage( surface.init_from );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tconsole.warn( 'THREE.ColladaLoader: Undefined sampler. Access image directly (see #12530).' );\n\t\t\t\t\timage = getImage( textureObject.id );\n\n\t\t\t\t}\n\n\t\t\t\t// create texture if image is avaiable\n\n\t\t\t\tif ( image !== null ) {\n\n\t\t\t\t\tvar loader = getTextureLoader( image );\n\n\t\t\t\t\tif ( loader !== undefined ) {\n\n\t\t\t\t\t\tvar texture = loader.load( image );\n\n\t\t\t\t\t\tvar extra = textureObject.extra;\n\n\t\t\t\t\t\tif ( extra !== undefined && extra.technique !== undefined && isEmpty( extra.technique ) === false ) {\n\n\t\t\t\t\t\t\tvar technique = extra.technique;\n\n\t\t\t\t\t\t\ttexture.wrapS = technique.wrapU ? RepeatWrapping : ClampToEdgeWrapping;\n\t\t\t\t\t\t\ttexture.wrapT = technique.wrapV ? RepeatWrapping : ClampToEdgeWrapping;\n\n\t\t\t\t\t\t\ttexture.offset.set( technique.offsetU || 0, technique.offsetV || 0 );\n\t\t\t\t\t\t\ttexture.repeat.set( technique.repeatU || 1, technique.repeatV || 1 );\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\ttexture.wrapS = RepeatWrapping;\n\t\t\t\t\t\t\ttexture.wrapT = RepeatWrapping;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn texture;\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tconsole.warn( 'THREE.ColladaLoader: Loader for texture %s not found.', image );\n\n\t\t\t\t\t\treturn null;\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\tconsole.warn( 'THREE.ColladaLoader: Couldn\\'t create texture with ID:', textureObject.id );\n\n\t\t\t\t\treturn null;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tvar parameters = technique.parameters;\n\n\t\t\tfor ( var key in parameters ) {\n\n\t\t\t\tvar parameter = parameters[ key ];\n\n\t\t\t\tswitch ( key ) {\n\n\t\t\t\t\tcase 'diffuse':\n\t\t\t\t\t\tif ( parameter.color ) material.color.fromArray( parameter.color );\n\t\t\t\t\t\tif ( parameter.texture ) material.map = getTexture( parameter.texture );\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'specular':\n\t\t\t\t\t\tif ( parameter.color && material.specular ) material.specular.fromArray( parameter.color );\n\t\t\t\t\t\tif ( parameter.texture ) material.specularMap = getTexture( parameter.texture );\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'bump':\n\t\t\t\t\t\tif ( parameter.texture ) material.normalMap = getTexture( parameter.texture );\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'ambient':\n\t\t\t\t\t\tif ( parameter.texture ) material.lightMap = getTexture( parameter.texture );\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'shininess':\n\t\t\t\t\t\tif ( parameter.float && material.shininess ) material.shininess = parameter.float;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'emission':\n\t\t\t\t\t\tif ( parameter.color && material.emissive ) material.emissive.fromArray( parameter.color );\n\t\t\t\t\t\tif ( parameter.texture ) material.emissiveMap = getTexture( parameter.texture );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t//\n\n\t\t\tvar transparent = parameters[ 'transparent' ];\n\t\t\tvar transparency = parameters[ 'transparency' ];\n\n\t\t\t// <transparency> does not exist but <transparent>\n\n\t\t\tif ( transparency === undefined && transparent ) {\n\n\t\t\t\ttransparency = {\n\t\t\t\t\tfloat: 1\n\t\t\t\t};\n\n\t\t\t}\n\n\t\t\t// <transparent> does not exist but <transparency>\n\n\t\t\tif ( transparent === undefined && transparency ) {\n\n\t\t\t\ttransparent = {\n\t\t\t\t\topaque: 'A_ONE',\n\t\t\t\t\tdata: {\n\t\t\t\t\t\tcolor: [ 1, 1, 1, 1 ]\n\t\t\t\t\t} };\n\n\t\t\t}\n\n\t\t\tif ( transparent && transparency ) {\n\n\t\t\t\t// handle case if a texture exists but no color\n\n\t\t\t\tif ( transparent.data.texture ) {\n\n\t\t\t\t\t// we do not set an alpha map (see #13792)\n\n\t\t\t\t\tmaterial.transparent = true;\n\n\t\t\t\t} else {\n\n\t\t\t\t\tvar color = transparent.data.color;\n\n\t\t\t\t\tswitch ( transparent.opaque ) {\n\n\t\t\t\t\t\tcase 'A_ONE':\n\t\t\t\t\t\t\tmaterial.opacity = color[ 3 ] * transparency.float;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'RGB_ZERO':\n\t\t\t\t\t\t\tmaterial.opacity = 1 - ( color[ 0 ] * transparency.float );\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'A_ZERO':\n\t\t\t\t\t\t\tmaterial.opacity = 1 - ( color[ 3 ] * transparency.float );\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'RGB_ONE':\n\t\t\t\t\t\t\tmaterial.opacity = color[ 0 ] * transparency.float;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\tconsole.warn( 'THREE.ColladaLoader: Invalid opaque type \"%s\" of transparent tag.', transparent.opaque );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( material.opacity < 1 ) material.transparent = true;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t//\n\n\t\t\tif ( extra !== undefined && extra.technique !== undefined && extra.technique.double_sided === 1 ) {\n\n\t\t\t\tmaterial.side = DoubleSide;\n\n\t\t\t}\n\n\t\t\treturn material;\n\n\t\t}\n\n\t\tfunction getMaterial( id ) {\n\n\t\t\treturn getBuild( library.materials[ id ], buildMaterial );\n\n\t\t}\n\n\t\t// camera\n\n\t\tfunction parseCamera( xml ) {\n\n\t\t\tvar data = {\n\t\t\t\tname: xml.getAttribute( 'name' )\n\t\t\t};\n\n\t\t\tfor ( var i = 0, l = xml.childNodes.length; i < l; i ++ ) {\n\n\t\t\t\tvar child = xml.childNodes[ i ];\n\n\t\t\t\tif ( child.nodeType !== 1 ) continue;\n\n\t\t\t\tswitch ( child.nodeName ) {\n\n\t\t\t\t\tcase 'optics':\n\t\t\t\t\t\tdata.optics = parseCameraOptics( child );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tlibrary.cameras[ xml.getAttribute( 'id' ) ] = data;\n\n\t\t}\n\n\t\tfunction parseCameraOptics( xml ) {\n\n\t\t\tfor ( var i = 0; i < xml.childNodes.length; i ++ ) {\n\n\t\t\t\tvar child = xml.childNodes[ i ];\n\n\t\t\t\tswitch ( child.nodeName ) {\n\n\t\t\t\t\tcase 'technique_common':\n\t\t\t\t\t\treturn parseCameraTechnique( child );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn {};\n\n\t\t}\n\n\t\tfunction parseCameraTechnique( xml ) {\n\n\t\t\tvar data = {};\n\n\t\t\tfor ( var i = 0; i < xml.childNodes.length; i ++ ) {\n\n\t\t\t\tvar child = xml.childNodes[ i ];\n\n\t\t\t\tswitch ( child.nodeName ) {\n\n\t\t\t\t\tcase 'perspective':\n\t\t\t\t\tcase 'orthographic':\n\n\t\t\t\t\t\tdata.technique = child.nodeName;\n\t\t\t\t\t\tdata.parameters = parseCameraParameters( child );\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn data;\n\n\t\t}\n\n\t\tfunction parseCameraParameters( xml ) {\n\n\t\t\tvar data = {};\n\n\t\t\tfor ( var i = 0; i < xml.childNodes.length; i ++ ) {\n\n\t\t\t\tvar child = xml.childNodes[ i ];\n\n\t\t\t\tswitch ( child.nodeName ) {\n\n\t\t\t\t\tcase 'xfov':\n\t\t\t\t\tcase 'yfov':\n\t\t\t\t\tcase 'xmag':\n\t\t\t\t\tcase 'ymag':\n\t\t\t\t\tcase 'znear':\n\t\t\t\t\tcase 'zfar':\n\t\t\t\t\tcase 'aspect_ratio':\n\t\t\t\t\t\tdata[ child.nodeName ] = parseFloat( child.textContent );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn data;\n\n\t\t}\n\n\t\tfunction buildCamera( data ) {\n\n\t\t\tvar camera;\n\n\t\t\tswitch ( data.optics.technique ) {\n\n\t\t\t\tcase 'perspective':\n\t\t\t\t\tcamera = new PerspectiveCamera(\n\t\t\t\t\t\tdata.optics.parameters.yfov,\n\t\t\t\t\t\tdata.optics.parameters.aspect_ratio,\n\t\t\t\t\t\tdata.optics.parameters.znear,\n\t\t\t\t\t\tdata.optics.parameters.zfar\n\t\t\t\t\t);\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'orthographic':\n\t\t\t\t\tvar ymag = data.optics.parameters.ymag;\n\t\t\t\t\tvar xmag = data.optics.parameters.xmag;\n\t\t\t\t\tvar aspectRatio = data.optics.parameters.aspect_ratio;\n\n\t\t\t\t\txmag = ( xmag === undefined ) ? ( ymag * aspectRatio ) : xmag;\n\t\t\t\t\tymag = ( ymag === undefined ) ? ( xmag / aspectRatio ) : ymag;\n\n\t\t\t\t\txmag *= 0.5;\n\t\t\t\t\tymag *= 0.5;\n\n\t\t\t\t\tcamera = new OrthographicCamera(\n\t\t\t\t\t\t- xmag, xmag, ymag, - ymag, // left, right, top, bottom\n\t\t\t\t\t\tdata.optics.parameters.znear,\n\t\t\t\t\t\tdata.optics.parameters.zfar\n\t\t\t\t\t);\n\t\t\t\t\tbreak;\n\n\t\t\t\tdefault:\n\t\t\t\t\tcamera = new PerspectiveCamera();\n\t\t\t\t\tbreak;\n\n\t\t\t}\n\n\t\t\tcamera.name = data.name || '';\n\n\t\t\treturn camera;\n\n\t\t}\n\n\t\tfunction getCamera( id ) {\n\n\t\t\tvar data = library.cameras[ id ];\n\n\t\t\tif ( data !== undefined ) {\n\n\t\t\t\treturn getBuild( data, buildCamera );\n\n\t\t\t}\n\n\t\t\tconsole.warn( 'THREE.ColladaLoader: Couldn\\'t find camera with ID:', id );\n\n\t\t\treturn null;\n\n\t\t}\n\n\t\t// light\n\n\t\tfunction parseLight( xml ) {\n\n\t\t\tvar data = {};\n\n\t\t\tfor ( var i = 0, l = xml.childNodes.length; i < l; i ++ ) {\n\n\t\t\t\tvar child = xml.childNodes[ i ];\n\n\t\t\t\tif ( child.nodeType !== 1 ) continue;\n\n\t\t\t\tswitch ( child.nodeName ) {\n\n\t\t\t\t\tcase 'technique_common':\n\t\t\t\t\t\tdata = parseLightTechnique( child );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tlibrary.lights[ xml.getAttribute( 'id' ) ] = data;\n\n\t\t}\n\n\t\tfunction parseLightTechnique( xml ) {\n\n\t\t\tvar data = {};\n\n\t\t\tfor ( var i = 0, l = xml.childNodes.length; i < l; i ++ ) {\n\n\t\t\t\tvar child = xml.childNodes[ i ];\n\n\t\t\t\tif ( child.nodeType !== 1 ) continue;\n\n\t\t\t\tswitch ( child.nodeName ) {\n\n\t\t\t\t\tcase 'directional':\n\t\t\t\t\tcase 'point':\n\t\t\t\t\tcase 'spot':\n\t\t\t\t\tcase 'ambient':\n\n\t\t\t\t\t\tdata.technique = child.nodeName;\n\t\t\t\t\t\tdata.parameters = parseLightParameters( child );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn data;\n\n\t\t}\n\n\t\tfunction parseLightParameters( xml ) {\n\n\t\t\tvar data = {};\n\n\t\t\tfor ( var i = 0, l = xml.childNodes.length; i < l; i ++ ) {\n\n\t\t\t\tvar child = xml.childNodes[ i ];\n\n\t\t\t\tif ( child.nodeType !== 1 ) continue;\n\n\t\t\t\tswitch ( child.nodeName ) {\n\n\t\t\t\t\tcase 'color':\n\t\t\t\t\t\tvar array = parseFloats( child.textContent );\n\t\t\t\t\t\tdata.color = new Color().fromArray( array );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'falloff_angle':\n\t\t\t\t\t\tdata.falloffAngle = parseFloat( child.textContent );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'quadratic_attenuation':\n\t\t\t\t\t\tvar f = parseFloat( child.textContent );\n\t\t\t\t\t\tdata.distance = f ? Math.sqrt( 1 / f ) : 0;\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn data;\n\n\t\t}\n\n\t\tfunction buildLight( data ) {\n\n\t\t\tvar light;\n\n\t\t\tswitch ( data.technique ) {\n\n\t\t\t\tcase 'directional':\n\t\t\t\t\tlight = new DirectionalLight();\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'point':\n\t\t\t\t\tlight = new PointLight();\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'spot':\n\t\t\t\t\tlight = new SpotLight();\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'ambient':\n\t\t\t\t\tlight = new AmbientLight();\n\t\t\t\t\tbreak;\n\n\t\t\t}\n\n\t\t\tif ( data.parameters.color ) light.color.copy( data.parameters.color );\n\t\t\tif ( data.parameters.distance ) light.distance = data.parameters.distance;\n\n\t\t\treturn light;\n\n\t\t}\n\n\t\tfunction getLight( id ) {\n\n\t\t\tvar data = library.lights[ id ];\n\n\t\t\tif ( data !== undefined ) {\n\n\t\t\t\treturn getBuild( data, buildLight );\n\n\t\t\t}\n\n\t\t\tconsole.warn( 'THREE.ColladaLoader: Couldn\\'t find light with ID:', id );\n\n\t\t\treturn null;\n\n\t\t}\n\n\t\t// geometry\n\n\t\tfunction parseGeometry( xml ) {\n\n\t\t\tvar data = {\n\t\t\t\tname: xml.getAttribute( 'name' ),\n\t\t\t\tsources: {},\n\t\t\t\tvertices: {},\n\t\t\t\tprimitives: []\n\t\t\t};\n\n\t\t\tvar mesh = getElementsByTagName( xml, 'mesh' )[ 0 ];\n\n\t\t\t// the following tags inside geometry are not supported yet (see https://github.com/mrdoob/three.js/pull/12606): convex_mesh, spline, brep\n\t\t\tif ( mesh === undefined ) return;\n\n\t\t\tfor ( var i = 0; i < mesh.childNodes.length; i ++ ) {\n\n\t\t\t\tvar child = mesh.childNodes[ i ];\n\n\t\t\t\tif ( child.nodeType !== 1 ) continue;\n\n\t\t\t\tvar id = child.getAttribute( 'id' );\n\n\t\t\t\tswitch ( child.nodeName ) {\n\n\t\t\t\t\tcase 'source':\n\t\t\t\t\t\tdata.sources[ id ] = parseSource( child );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'vertices':\n\t\t\t\t\t\t// data.sources[ id ] = data.sources[ parseId( getElementsByTagName( child, 'input' )[ 0 ].getAttribute( 'source' ) ) ];\n\t\t\t\t\t\tdata.vertices = parseGeometryVertices( child );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'polygons':\n\t\t\t\t\t\tconsole.warn( 'THREE.ColladaLoader: Unsupported primitive type: ', child.nodeName );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'lines':\n\t\t\t\t\tcase 'linestrips':\n\t\t\t\t\tcase 'polylist':\n\t\t\t\t\tcase 'triangles':\n\t\t\t\t\t\tdata.primitives.push( parseGeometryPrimitive( child ) );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tconsole.log( child );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tlibrary.geometries[ xml.getAttribute( 'id' ) ] = data;\n\n\t\t}\n\n\t\tfunction parseSource( xml ) {\n\n\t\t\tvar data = {\n\t\t\t\tarray: [],\n\t\t\t\tstride: 3\n\t\t\t};\n\n\t\t\tfor ( var i = 0; i < xml.childNodes.length; i ++ ) {\n\n\t\t\t\tvar child = xml.childNodes[ i ];\n\n\t\t\t\tif ( child.nodeType !== 1 ) continue;\n\n\t\t\t\tswitch ( child.nodeName ) {\n\n\t\t\t\t\tcase 'float_array':\n\t\t\t\t\t\tdata.array = parseFloats( child.textContent );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'Name_array':\n\t\t\t\t\t\tdata.array = parseStrings( child.textContent );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'technique_common':\n\t\t\t\t\t\tvar accessor = getElementsByTagName( child, 'accessor' )[ 0 ];\n\n\t\t\t\t\t\tif ( accessor !== undefined ) {\n\n\t\t\t\t\t\t\tdata.stride = parseInt( accessor.getAttribute( 'stride' ) );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn data;\n\n\t\t}\n\n\t\tfunction parseGeometryVertices( xml ) {\n\n\t\t\tvar data = {};\n\n\t\t\tfor ( var i = 0; i < xml.childNodes.length; i ++ ) {\n\n\t\t\t\tvar child = xml.childNodes[ i ];\n\n\t\t\t\tif ( child.nodeType !== 1 ) continue;\n\n\t\t\t\tdata[ child.getAttribute( 'semantic' ) ] = parseId( child.getAttribute( 'source' ) );\n\n\t\t\t}\n\n\t\t\treturn data;\n\n\t\t}\n\n\t\tfunction parseGeometryPrimitive( xml ) {\n\n\t\t\tvar primitive = {\n\t\t\t\ttype: xml.nodeName,\n\t\t\t\tmaterial: xml.getAttribute( 'material' ),\n\t\t\t\tcount: parseInt( xml.getAttribute( 'count' ) ),\n\t\t\t\tinputs: {},\n\t\t\t\tstride: 0,\n\t\t\t\thasUV: false\n\t\t\t};\n\n\t\t\tfor ( var i = 0, l = xml.childNodes.length; i < l; i ++ ) {\n\n\t\t\t\tvar child = xml.childNodes[ i ];\n\n\t\t\t\tif ( child.nodeType !== 1 ) continue;\n\n\t\t\t\tswitch ( child.nodeName ) {\n\n\t\t\t\t\tcase 'input':\n\t\t\t\t\t\tvar id = parseId( child.getAttribute( 'source' ) );\n\t\t\t\t\t\tvar semantic = child.getAttribute( 'semantic' );\n\t\t\t\t\t\tvar offset = parseInt( child.getAttribute( 'offset' ) );\n\t\t\t\t\t\tvar set = parseInt( child.getAttribute( 'set' ) );\n\t\t\t\t\t\tvar inputname = ( set > 0 ? semantic + set : semantic );\n\t\t\t\t\t\tprimitive.inputs[ inputname ] = { id: id, offset: offset };\n\t\t\t\t\t\tprimitive.stride = Math.max( primitive.stride, offset + 1 );\n\t\t\t\t\t\tif ( semantic === 'TEXCOORD' ) primitive.hasUV = true;\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'vcount':\n\t\t\t\t\t\tprimitive.vcount = parseInts( child.textContent );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'p':\n\t\t\t\t\t\tprimitive.p = parseInts( child.textContent );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn primitive;\n\n\t\t}\n\n\t\tfunction groupPrimitives( primitives ) {\n\n\t\t\tvar build = {};\n\n\t\t\tfor ( var i = 0; i < primitives.length; i ++ ) {\n\n\t\t\t\tvar primitive = primitives[ i ];\n\n\t\t\t\tif ( build[ primitive.type ] === undefined ) build[ primitive.type ] = [];\n\n\t\t\t\tbuild[ primitive.type ].push( primitive );\n\n\t\t\t}\n\n\t\t\treturn build;\n\n\t\t}\n\n\t\tfunction checkUVCoordinates( primitives ) {\n\n\t\t\tvar count = 0;\n\n\t\t\tfor ( var i = 0, l = primitives.length; i < l; i ++ ) {\n\n\t\t\t\tvar primitive = primitives[ i ];\n\n\t\t\t\tif ( primitive.hasUV === true ) {\n\n\t\t\t\t\tcount ++;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( count > 0 && count < primitives.length ) {\n\n\t\t\t\tprimitives.uvsNeedsFix = true;\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction buildGeometry( data ) {\n\n\t\t\tvar build = {};\n\n\t\t\tvar sources = data.sources;\n\t\t\tvar vertices = data.vertices;\n\t\t\tvar primitives = data.primitives;\n\n\t\t\tif ( primitives.length === 0 ) return {};\n\n\t\t\t// our goal is to create one buffer geometry for a single type of primitives\n\t\t\t// first, we group all primitives by their type\n\n\t\t\tvar groupedPrimitives = groupPrimitives( primitives );\n\n\t\t\tfor ( var type in groupedPrimitives ) {\n\n\t\t\t\tvar primitiveType = groupedPrimitives[ type ];\n\n\t\t\t\t// second, ensure consistent uv coordinates for each type of primitives (polylist,triangles or lines)\n\n\t\t\t\tcheckUVCoordinates( primitiveType );\n\n\t\t\t\t// third, create a buffer geometry for each type of primitives\n\n\t\t\t\tbuild[ type ] = buildGeometryType( primitiveType, sources, vertices );\n\n\t\t\t}\n\n\t\t\treturn build;\n\n\t\t}\n\n\t\tfunction buildGeometryType( primitives, sources, vertices ) {\n\n\t\t\tvar build = {};\n\n\t\t\tvar position = { array: [], stride: 0 };\n\t\t\tvar normal = { array: [], stride: 0 };\n\t\t\tvar uv = { array: [], stride: 0 };\n\t\t\tvar uv2 = { array: [], stride: 0 };\n\t\t\tvar color = { array: [], stride: 0 };\n\n\t\t\tvar skinIndex = { array: [], stride: 4 };\n\t\t\tvar skinWeight = { array: [], stride: 4 };\n\n\t\t\tvar geometry = new BufferGeometry();\n\n\t\t\tvar materialKeys = [];\n\n\t\t\tvar start = 0;\n\n\t\t\tfor ( var p = 0; p < primitives.length; p ++ ) {\n\n\t\t\t\tvar primitive = primitives[ p ];\n\t\t\t\tvar inputs = primitive.inputs;\n\n\t\t\t\t// groups\n\n\t\t\t\tvar count = 0;\n\n\t\t\t\tswitch ( primitive.type ) {\n\n\t\t\t\t\tcase 'lines':\n\t\t\t\t\tcase 'linestrips':\n\t\t\t\t\t\tcount = primitive.count * 2;\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'triangles':\n\t\t\t\t\t\tcount = primitive.count * 3;\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'polylist':\n\n\t\t\t\t\t\tfor ( var g = 0; g < primitive.count; g ++ ) {\n\n\t\t\t\t\t\t\tvar vc = primitive.vcount[ g ];\n\n\t\t\t\t\t\t\tswitch ( vc ) {\n\n\t\t\t\t\t\t\t\tcase 3:\n\t\t\t\t\t\t\t\t\tcount += 3; // single triangle\n\t\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t\tcase 4:\n\t\t\t\t\t\t\t\t\tcount += 6; // quad, subdivided into two triangles\n\t\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\t\t\tcount += ( vc - 2 ) * 3; // polylist with more than four vertices\n\t\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tconsole.warn( 'THREE.ColladaLoader: Unknow primitive type:', primitive.type );\n\n\t\t\t\t}\n\n\t\t\t\tgeometry.addGroup( start, count, p );\n\t\t\t\tstart += count;\n\n\t\t\t\t// material\n\n\t\t\t\tif ( primitive.material ) {\n\n\t\t\t\t\tmaterialKeys.push( primitive.material );\n\n\t\t\t\t}\n\n\t\t\t\t// geometry data\n\n\t\t\t\tfor ( var name in inputs ) {\n\n\t\t\t\t\tvar input = inputs[ name ];\n\n\t\t\t\t\tswitch ( name )\t{\n\n\t\t\t\t\t\tcase 'VERTEX':\n\t\t\t\t\t\t\tfor ( var key in vertices ) {\n\n\t\t\t\t\t\t\t\tvar id = vertices[ key ];\n\n\t\t\t\t\t\t\t\tswitch ( key ) {\n\n\t\t\t\t\t\t\t\t\tcase 'POSITION':\n\t\t\t\t\t\t\t\t\t\tvar prevLength = position.array.length;\n\t\t\t\t\t\t\t\t\t\tbuildGeometryData( primitive, sources[ id ], input.offset, position.array );\n\t\t\t\t\t\t\t\t\t\tposition.stride = sources[ id ].stride;\n\n\t\t\t\t\t\t\t\t\t\tif ( sources.skinWeights && sources.skinIndices ) {\n\n\t\t\t\t\t\t\t\t\t\t\tbuildGeometryData( primitive, sources.skinIndices, input.offset, skinIndex.array );\n\t\t\t\t\t\t\t\t\t\t\tbuildGeometryData( primitive, sources.skinWeights, input.offset, skinWeight.array );\n\n\t\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t\t// see #3803\n\n\t\t\t\t\t\t\t\t\t\tif ( primitive.hasUV === false && primitives.uvsNeedsFix === true ) {\n\n\t\t\t\t\t\t\t\t\t\t\tvar count = ( position.array.length - prevLength ) / position.stride;\n\n\t\t\t\t\t\t\t\t\t\t\tfor ( var i = 0; i < count; i ++ ) {\n\n\t\t\t\t\t\t\t\t\t\t\t\t// fill missing uv coordinates\n\n\t\t\t\t\t\t\t\t\t\t\t\tuv.array.push( 0, 0 );\n\n\t\t\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t\t\tcase 'NORMAL':\n\t\t\t\t\t\t\t\t\t\tbuildGeometryData( primitive, sources[ id ], input.offset, normal.array );\n\t\t\t\t\t\t\t\t\t\tnormal.stride = sources[ id ].stride;\n\t\t\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t\t\tcase 'COLOR':\n\t\t\t\t\t\t\t\t\t\tbuildGeometryData( primitive, sources[ id ], input.offset, color.array );\n\t\t\t\t\t\t\t\t\t\tcolor.stride = sources[ id ].stride;\n\t\t\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t\t\tcase 'TEXCOORD':\n\t\t\t\t\t\t\t\t\t\tbuildGeometryData( primitive, sources[ id ], input.offset, uv.array );\n\t\t\t\t\t\t\t\t\t\tuv.stride = sources[ id ].stride;\n\t\t\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t\t\tcase 'TEXCOORD1':\n\t\t\t\t\t\t\t\t\t\tbuildGeometryData( primitive, sources[ id ], input.offset, uv2.array );\n\t\t\t\t\t\t\t\t\t\tuv.stride = sources[ id ].stride;\n\t\t\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\t\t\t\tconsole.warn( 'THREE.ColladaLoader: Semantic \"%s\" not handled in geometry build process.', key );\n\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'NORMAL':\n\t\t\t\t\t\t\tbuildGeometryData( primitive, sources[ input.id ], input.offset, normal.array );\n\t\t\t\t\t\t\tnormal.stride = sources[ input.id ].stride;\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'COLOR':\n\t\t\t\t\t\t\tbuildGeometryData( primitive, sources[ input.id ], input.offset, color.array );\n\t\t\t\t\t\t\tcolor.stride = sources[ input.id ].stride;\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'TEXCOORD':\n\t\t\t\t\t\t\tbuildGeometryData( primitive, sources[ input.id ], input.offset, uv.array );\n\t\t\t\t\t\t\tuv.stride = sources[ input.id ].stride;\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'TEXCOORD1':\n\t\t\t\t\t\t\tbuildGeometryData( primitive, sources[ input.id ], input.offset, uv2.array );\n\t\t\t\t\t\t\tuv2.stride = sources[ input.id ].stride;\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// build geometry\n\n\t\t\tif ( position.array.length > 0 ) geometry.setAttribute( 'position', new Float32BufferAttribute( position.array, position.stride ) );\n\t\t\tif ( normal.array.length > 0 ) geometry.setAttribute( 'normal', new Float32BufferAttribute( normal.array, normal.stride ) );\n\t\t\tif ( color.array.length > 0 ) geometry.setAttribute( 'color', new Float32BufferAttribute( color.array, color.stride ) );\n\t\t\tif ( uv.array.length > 0 ) geometry.setAttribute( 'uv', new Float32BufferAttribute( uv.array, uv.stride ) );\n\t\t\tif ( uv2.array.length > 0 ) geometry.setAttribute( 'uv2', new Float32BufferAttribute( uv2.array, uv2.stride ) );\n\n\t\t\tif ( skinIndex.array.length > 0 ) geometry.setAttribute( 'skinIndex', new Float32BufferAttribute( skinIndex.array, skinIndex.stride ) );\n\t\t\tif ( skinWeight.array.length > 0 ) geometry.setAttribute( 'skinWeight', new Float32BufferAttribute( skinWeight.array, skinWeight.stride ) );\n\n\t\t\tbuild.data = geometry;\n\t\t\tbuild.type = primitives[ 0 ].type;\n\t\t\tbuild.materialKeys = materialKeys;\n\n\t\t\treturn build;\n\n\t\t}\n\n\t\tfunction buildGeometryData( primitive, source, offset, array ) {\n\n\t\t\tvar indices = primitive.p;\n\t\t\tvar stride = primitive.stride;\n\t\t\tvar vcount = primitive.vcount;\n\n\t\t\tfunction pushVector( i ) {\n\n\t\t\t\tvar index = indices[ i + offset ] * sourceStride;\n\t\t\t\tvar length = index + sourceStride;\n\n\t\t\t\tfor ( ; index < length; index ++ ) {\n\n\t\t\t\t\tarray.push( sourceArray[ index ] );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tvar sourceArray = source.array;\n\t\t\tvar sourceStride = source.stride;\n\n\t\t\tif ( primitive.vcount !== undefined ) {\n\n\t\t\t\tvar index = 0;\n\n\t\t\t\tfor ( var i = 0, l = vcount.length; i < l; i ++ ) {\n\n\t\t\t\t\tvar count = vcount[ i ];\n\n\t\t\t\t\tif ( count === 4 ) {\n\n\t\t\t\t\t\tvar a = index + stride * 0;\n\t\t\t\t\t\tvar b = index + stride * 1;\n\t\t\t\t\t\tvar c = index + stride * 2;\n\t\t\t\t\t\tvar d = index + stride * 3;\n\n\t\t\t\t\t\tpushVector( a ); pushVector( b ); pushVector( d );\n\t\t\t\t\t\tpushVector( b ); pushVector( c ); pushVector( d );\n\n\t\t\t\t\t} else if ( count === 3 ) {\n\n\t\t\t\t\t\tvar a = index + stride * 0;\n\t\t\t\t\t\tvar b = index + stride * 1;\n\t\t\t\t\t\tvar c = index + stride * 2;\n\n\t\t\t\t\t\tpushVector( a ); pushVector( b ); pushVector( c );\n\n\t\t\t\t\t} else if ( count > 4 ) {\n\n\t\t\t\t\t\tfor ( var k = 1, kl = ( count - 2 ); k <= kl; k ++ ) {\n\n\t\t\t\t\t\t\tvar a = index + stride * 0;\n\t\t\t\t\t\t\tvar b = index + stride * k;\n\t\t\t\t\t\t\tvar c = index + stride * ( k + 1 );\n\n\t\t\t\t\t\t\tpushVector( a ); pushVector( b ); pushVector( c );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t\tindex += stride * count;\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\tfor ( var i = 0, l = indices.length; i < l; i += stride ) {\n\n\t\t\t\t\tpushVector( i );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction getGeometry( id ) {\n\n\t\t\treturn getBuild( library.geometries[ id ], buildGeometry );\n\n\t\t}\n\n\t\t// kinematics\n\n\t\tfunction parseKinematicsModel( xml ) {\n\n\t\t\tvar data = {\n\t\t\t\tname: xml.getAttribute( 'name' ) || '',\n\t\t\t\tjoints: {},\n\t\t\t\tlinks: []\n\t\t\t};\n\n\t\t\tfor ( var i = 0; i < xml.childNodes.length; i ++ ) {\n\n\t\t\t\tvar child = xml.childNodes[ i ];\n\n\t\t\t\tif ( child.nodeType !== 1 ) continue;\n\n\t\t\t\tswitch ( child.nodeName ) {\n\n\t\t\t\t\tcase 'technique_common':\n\t\t\t\t\t\tparseKinematicsTechniqueCommon( child, data );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tlibrary.kinematicsModels[ xml.getAttribute( 'id' ) ] = data;\n\n\t\t}\n\n\t\tfunction buildKinematicsModel( data ) {\n\n\t\t\tif ( data.build !== undefined ) return data.build;\n\n\t\t\treturn data;\n\n\t\t}\n\n\t\tfunction getKinematicsModel( id ) {\n\n\t\t\treturn getBuild( library.kinematicsModels[ id ], buildKinematicsModel );\n\n\t\t}\n\n\t\tfunction parseKinematicsTechniqueCommon( xml, data ) {\n\n\t\t\tfor ( var i = 0; i < xml.childNodes.length; i ++ ) {\n\n\t\t\t\tvar child = xml.childNodes[ i ];\n\n\t\t\t\tif ( child.nodeType !== 1 ) continue;\n\n\t\t\t\tswitch ( child.nodeName ) {\n\n\t\t\t\t\tcase 'joint':\n\t\t\t\t\t\tdata.joints[ child.getAttribute( 'sid' ) ] = parseKinematicsJoint( child );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'link':\n\t\t\t\t\t\tdata.links.push( parseKinematicsLink( child ) );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction parseKinematicsJoint( xml ) {\n\n\t\t\tvar data;\n\n\t\t\tfor ( var i = 0; i < xml.childNodes.length; i ++ ) {\n\n\t\t\t\tvar child = xml.childNodes[ i ];\n\n\t\t\t\tif ( child.nodeType !== 1 ) continue;\n\n\t\t\t\tswitch ( child.nodeName ) {\n\n\t\t\t\t\tcase 'prismatic':\n\t\t\t\t\tcase 'revolute':\n\t\t\t\t\t\tdata = parseKinematicsJointParameter( child );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn data;\n\n\t\t}\n\n\t\tfunction parseKinematicsJointParameter( xml, data ) {\n\n\t\t\tvar data = {\n\t\t\t\tsid: xml.getAttribute( 'sid' ),\n\t\t\t\tname: xml.getAttribute( 'name' ) || '',\n\t\t\t\taxis: new Vector3(),\n\t\t\t\tlimits: {\n\t\t\t\t\tmin: 0,\n\t\t\t\t\tmax: 0\n\t\t\t\t},\n\t\t\t\ttype: xml.nodeName,\n\t\t\t\tstatic: false,\n\t\t\t\tzeroPosition: 0,\n\t\t\t\tmiddlePosition: 0\n\t\t\t};\n\n\t\t\tfor ( var i = 0; i < xml.childNodes.length; i ++ ) {\n\n\t\t\t\tvar child = xml.childNodes[ i ];\n\n\t\t\t\tif ( child.nodeType !== 1 ) continue;\n\n\t\t\t\tswitch ( child.nodeName ) {\n\n\t\t\t\t\tcase 'axis':\n\t\t\t\t\t\tvar array = parseFloats( child.textContent );\n\t\t\t\t\t\tdata.axis.fromArray( array );\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'limits':\n\t\t\t\t\t\tvar max = child.getElementsByTagName( 'max' )[ 0 ];\n\t\t\t\t\t\tvar min = child.getElementsByTagName( 'min' )[ 0 ];\n\n\t\t\t\t\t\tdata.limits.max = parseFloat( max.textContent );\n\t\t\t\t\t\tdata.limits.min = parseFloat( min.textContent );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// if min is equal to or greater than max, consider the joint static\n\n\t\t\tif ( data.limits.min >= data.limits.max ) {\n\n\t\t\t\tdata.static = true;\n\n\t\t\t}\n\n\t\t\t// calculate middle position\n\n\t\t\tdata.middlePosition = ( data.limits.min + data.limits.max ) / 2.0;\n\n\t\t\treturn data;\n\n\t\t}\n\n\t\tfunction parseKinematicsLink( xml ) {\n\n\t\t\tvar data = {\n\t\t\t\tsid: xml.getAttribute( 'sid' ),\n\t\t\t\tname: xml.getAttribute( 'name' ) || '',\n\t\t\t\tattachments: [],\n\t\t\t\ttransforms: []\n\t\t\t};\n\n\t\t\tfor ( var i = 0; i < xml.childNodes.length; i ++ ) {\n\n\t\t\t\tvar child = xml.childNodes[ i ];\n\n\t\t\t\tif ( child.nodeType !== 1 ) continue;\n\n\t\t\t\tswitch ( child.nodeName ) {\n\n\t\t\t\t\tcase 'attachment_full':\n\t\t\t\t\t\tdata.attachments.push( parseKinematicsAttachment( child ) );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'matrix':\n\t\t\t\t\tcase 'translate':\n\t\t\t\t\tcase 'rotate':\n\t\t\t\t\t\tdata.transforms.push( parseKinematicsTransform( child ) );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn data;\n\n\t\t}\n\n\t\tfunction parseKinematicsAttachment( xml ) {\n\n\t\t\tvar data = {\n\t\t\t\tjoint: xml.getAttribute( 'joint' ).split( '/' ).pop(),\n\t\t\t\ttransforms: [],\n\t\t\t\tlinks: []\n\t\t\t};\n\n\t\t\tfor ( var i = 0; i < xml.childNodes.length; i ++ ) {\n\n\t\t\t\tvar child = xml.childNodes[ i ];\n\n\t\t\t\tif ( child.nodeType !== 1 ) continue;\n\n\t\t\t\tswitch ( child.nodeName ) {\n\n\t\t\t\t\tcase 'link':\n\t\t\t\t\t\tdata.links.push( parseKinematicsLink( child ) );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'matrix':\n\t\t\t\t\tcase 'translate':\n\t\t\t\t\tcase 'rotate':\n\t\t\t\t\t\tdata.transforms.push( parseKinematicsTransform( child ) );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn data;\n\n\t\t}\n\n\t\tfunction parseKinematicsTransform( xml ) {\n\n\t\t\tvar data = {\n\t\t\t\ttype: xml.nodeName\n\t\t\t};\n\n\t\t\tvar array = parseFloats( xml.textContent );\n\n\t\t\tswitch ( data.type ) {\n\n\t\t\t\tcase 'matrix':\n\t\t\t\t\tdata.obj = new Matrix4();\n\t\t\t\t\tdata.obj.fromArray( array ).transpose();\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'translate':\n\t\t\t\t\tdata.obj = new Vector3();\n\t\t\t\t\tdata.obj.fromArray( array );\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'rotate':\n\t\t\t\t\tdata.obj = new Vector3();\n\t\t\t\t\tdata.obj.fromArray( array );\n\t\t\t\t\tdata.angle = MathUtils.degToRad( array[ 3 ] );\n\t\t\t\t\tbreak;\n\n\t\t\t}\n\n\t\t\treturn data;\n\n\t\t}\n\n\t\t// physics\n\n\t\tfunction parsePhysicsModel( xml ) {\n\n\t\t\tvar data = {\n\t\t\t\tname: xml.getAttribute( 'name' ) || '',\n\t\t\t\trigidBodies: {}\n\t\t\t};\n\n\t\t\tfor ( var i = 0; i < xml.childNodes.length; i ++ ) {\n\n\t\t\t\tvar child = xml.childNodes[ i ];\n\n\t\t\t\tif ( child.nodeType !== 1 ) continue;\n\n\t\t\t\tswitch ( child.nodeName ) {\n\n\t\t\t\t\tcase 'rigid_body':\n\t\t\t\t\t\tdata.rigidBodies[ child.getAttribute( 'name' ) ] = {};\n\t\t\t\t\t\tparsePhysicsRigidBody( child, data.rigidBodies[ child.getAttribute( 'name' ) ] );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tlibrary.physicsModels[ xml.getAttribute( 'id' ) ] = data;\n\n\t\t}\n\n\t\tfunction parsePhysicsRigidBody( xml, data ) {\n\n\t\t\tfor ( var i = 0; i < xml.childNodes.length; i ++ ) {\n\n\t\t\t\tvar child = xml.childNodes[ i ];\n\n\t\t\t\tif ( child.nodeType !== 1 ) continue;\n\n\t\t\t\tswitch ( child.nodeName ) {\n\n\t\t\t\t\tcase 'technique_common':\n\t\t\t\t\t\tparsePhysicsTechniqueCommon( child, data );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction parsePhysicsTechniqueCommon( xml, data ) {\n\n\t\t\tfor ( var i = 0; i < xml.childNodes.length; i ++ ) {\n\n\t\t\t\tvar child = xml.childNodes[ i ];\n\n\t\t\t\tif ( child.nodeType !== 1 ) continue;\n\n\t\t\t\tswitch ( child.nodeName ) {\n\n\t\t\t\t\tcase 'inertia':\n\t\t\t\t\t\tdata.inertia = parseFloats( child.textContent );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'mass':\n\t\t\t\t\t\tdata.mass = parseFloats( child.textContent )[ 0 ];\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\t// scene\n\n\t\tfunction parseKinematicsScene( xml ) {\n\n\t\t\tvar data = {\n\t\t\t\tbindJointAxis: []\n\t\t\t};\n\n\t\t\tfor ( var i = 0; i < xml.childNodes.length; i ++ ) {\n\n\t\t\t\tvar child = xml.childNodes[ i ];\n\n\t\t\t\tif ( child.nodeType !== 1 ) continue;\n\n\t\t\t\tswitch ( child.nodeName ) {\n\n\t\t\t\t\tcase 'bind_joint_axis':\n\t\t\t\t\t\tdata.bindJointAxis.push( parseKinematicsBindJointAxis( child ) );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tlibrary.kinematicsScenes[ parseId( xml.getAttribute( 'url' ) ) ] = data;\n\n\t\t}\n\n\t\tfunction parseKinematicsBindJointAxis( xml ) {\n\n\t\t\tvar data = {\n\t\t\t\ttarget: xml.getAttribute( 'target' ).split( '/' ).pop()\n\t\t\t};\n\n\t\t\tfor ( var i = 0; i < xml.childNodes.length; i ++ ) {\n\n\t\t\t\tvar child = xml.childNodes[ i ];\n\n\t\t\t\tif ( child.nodeType !== 1 ) continue;\n\n\t\t\t\tswitch ( child.nodeName ) {\n\n\t\t\t\t\tcase 'axis':\n\t\t\t\t\t\tvar param = child.getElementsByTagName( 'param' )[ 0 ];\n\t\t\t\t\t\tdata.axis = param.textContent;\n\t\t\t\t\t\tvar tmpJointIndex = data.axis.split( 'inst_' ).pop().split( 'axis' )[ 0 ];\n\t\t\t\t\t\tdata.jointIndex = tmpJointIndex.substr( 0, tmpJointIndex.length - 1 );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn data;\n\n\t\t}\n\n\t\tfunction buildKinematicsScene( data ) {\n\n\t\t\tif ( data.build !== undefined ) return data.build;\n\n\t\t\treturn data;\n\n\t\t}\n\n\t\tfunction getKinematicsScene( id ) {\n\n\t\t\treturn getBuild( library.kinematicsScenes[ id ], buildKinematicsScene );\n\n\t\t}\n\n\t\tfunction setupKinematics() {\n\n\t\t\tvar kinematicsModelId = Object.keys( library.kinematicsModels )[ 0 ];\n\t\t\tvar kinematicsSceneId = Object.keys( library.kinematicsScenes )[ 0 ];\n\t\t\tvar visualSceneId = Object.keys( library.visualScenes )[ 0 ];\n\n\t\t\tif ( kinematicsModelId === undefined || kinematicsSceneId === undefined ) return;\n\n\t\t\tvar kinematicsModel = getKinematicsModel( kinematicsModelId );\n\t\t\tvar kinematicsScene = getKinematicsScene( kinematicsSceneId );\n\t\t\tvar visualScene = getVisualScene( visualSceneId );\n\n\t\t\tvar bindJointAxis = kinematicsScene.bindJointAxis;\n\t\t\tvar jointMap = {};\n\n\t\t\tfor ( var i = 0, l = bindJointAxis.length; i < l; i ++ ) {\n\n\t\t\t\tvar axis = bindJointAxis[ i ];\n\n\t\t\t\t// the result of the following query is an element of type 'translate', 'rotate','scale' or 'matrix'\n\n\t\t\t\tvar targetElement = collada.querySelector( '[sid=\"' + axis.target + '\"]' );\n\n\t\t\t\tif ( targetElement ) {\n\n\t\t\t\t\t// get the parent of the transform element\n\n\t\t\t\t\tvar parentVisualElement = targetElement.parentElement;\n\n\t\t\t\t\t// connect the joint of the kinematics model with the element in the visual scene\n\n\t\t\t\t\tconnect( axis.jointIndex, parentVisualElement );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tfunction connect( jointIndex, visualElement ) {\n\n\t\t\t\tvar visualElementName = visualElement.getAttribute( 'name' );\n\t\t\t\tvar joint = kinematicsModel.joints[ jointIndex ];\n\n\t\t\t\tvisualScene.traverse( function ( object ) {\n\n\t\t\t\t\tif ( object.name === visualElementName ) {\n\n\t\t\t\t\t\tjointMap[ jointIndex ] = {\n\t\t\t\t\t\t\tobject: object,\n\t\t\t\t\t\t\ttransforms: buildTransformList( visualElement ),\n\t\t\t\t\t\t\tjoint: joint,\n\t\t\t\t\t\t\tposition: joint.zeroPosition\n\t\t\t\t\t\t};\n\n\t\t\t\t\t}\n\n\t\t\t\t} );\n\n\t\t\t}\n\n\t\t\tvar m0 = new Matrix4();\n\n\t\t\tkinematics = {\n\n\t\t\t\tjoints: kinematicsModel && kinematicsModel.joints,\n\n\t\t\t\tgetJointValue: function ( jointIndex ) {\n\n\t\t\t\t\tvar jointData = jointMap[ jointIndex ];\n\n\t\t\t\t\tif ( jointData ) {\n\n\t\t\t\t\t\treturn jointData.position;\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tconsole.warn( 'THREE.ColladaLoader: Joint ' + jointIndex + ' doesn\\'t exist.' );\n\n\t\t\t\t\t}\n\n\t\t\t\t},\n\n\t\t\t\tsetJointValue: function ( jointIndex, value ) {\n\n\t\t\t\t\tvar jointData = jointMap[ jointIndex ];\n\n\t\t\t\t\tif ( jointData ) {\n\n\t\t\t\t\t\tvar joint = jointData.joint;\n\n\t\t\t\t\t\tif ( value > joint.limits.max || value < joint.limits.min ) {\n\n\t\t\t\t\t\t\tconsole.warn( 'THREE.ColladaLoader: Joint ' + jointIndex + ' value ' + value + ' outside of limits (min: ' + joint.limits.min + ', max: ' + joint.limits.max + ').' );\n\n\t\t\t\t\t\t} else if ( joint.static ) {\n\n\t\t\t\t\t\t\tconsole.warn( 'THREE.ColladaLoader: Joint ' + jointIndex + ' is static.' );\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tvar object = jointData.object;\n\t\t\t\t\t\t\tvar axis = joint.axis;\n\t\t\t\t\t\t\tvar transforms = jointData.transforms;\n\n\t\t\t\t\t\t\tmatrix.identity();\n\n\t\t\t\t\t\t\t// each update, we have to apply all transforms in the correct order\n\n\t\t\t\t\t\t\tfor ( var i = 0; i < transforms.length; i ++ ) {\n\n\t\t\t\t\t\t\t\tvar transform = transforms[ i ];\n\n\t\t\t\t\t\t\t\t// if there is a connection of the transform node with a joint, apply the joint value\n\n\t\t\t\t\t\t\t\tif ( transform.sid && transform.sid.indexOf( jointIndex ) !== - 1 ) {\n\n\t\t\t\t\t\t\t\t\tswitch ( joint.type ) {\n\n\t\t\t\t\t\t\t\t\t\tcase 'revolute':\n\t\t\t\t\t\t\t\t\t\t\tmatrix.multiply( m0.makeRotationAxis( axis, MathUtils.degToRad( value ) ) );\n\t\t\t\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t\t\t\tcase 'prismatic':\n\t\t\t\t\t\t\t\t\t\t\tmatrix.multiply( m0.makeTranslation( axis.x * value, axis.y * value, axis.z * value ) );\n\t\t\t\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\t\t\t\t\tconsole.warn( 'THREE.ColladaLoader: Unknown joint type: ' + joint.type );\n\t\t\t\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t\t\tswitch ( transform.type ) {\n\n\t\t\t\t\t\t\t\t\t\tcase 'matrix':\n\t\t\t\t\t\t\t\t\t\t\tmatrix.multiply( transform.obj );\n\t\t\t\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t\t\t\tcase 'translate':\n\t\t\t\t\t\t\t\t\t\t\tmatrix.multiply( m0.makeTranslation( transform.obj.x, transform.obj.y, transform.obj.z ) );\n\t\t\t\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t\t\t\tcase 'scale':\n\t\t\t\t\t\t\t\t\t\t\tmatrix.scale( transform.obj );\n\t\t\t\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t\t\t\tcase 'rotate':\n\t\t\t\t\t\t\t\t\t\t\tmatrix.multiply( m0.makeRotationAxis( transform.obj, transform.angle ) );\n\t\t\t\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tobject.matrix.copy( matrix );\n\t\t\t\t\t\t\tobject.matrix.decompose( object.position, object.quaternion, object.scale );\n\n\t\t\t\t\t\t\tjointMap[ jointIndex ].position = value;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tconsole.log( 'THREE.ColladaLoader: ' + jointIndex + ' does not exist.' );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t};\n\n\t\t}\n\n\t\tfunction buildTransformList( node ) {\n\n\t\t\tvar transforms = [];\n\n\t\t\tvar xml = collada.querySelector( '[id=\"' + node.id + '\"]' );\n\n\t\t\tfor ( var i = 0; i < xml.childNodes.length; i ++ ) {\n\n\t\t\t\tvar child = xml.childNodes[ i ];\n\n\t\t\t\tif ( child.nodeType !== 1 ) continue;\n\n\t\t\t\tswitch ( child.nodeName ) {\n\n\t\t\t\t\tcase 'matrix':\n\t\t\t\t\t\tvar array = parseFloats( child.textContent );\n\t\t\t\t\t\tvar matrix = new Matrix4().fromArray( array ).transpose();\n\t\t\t\t\t\ttransforms.push( {\n\t\t\t\t\t\t\tsid: child.getAttribute( 'sid' ),\n\t\t\t\t\t\t\ttype: child.nodeName,\n\t\t\t\t\t\t\tobj: matrix\n\t\t\t\t\t\t} );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'translate':\n\t\t\t\t\tcase 'scale':\n\t\t\t\t\t\tvar array = parseFloats( child.textContent );\n\t\t\t\t\t\tvar vector = new Vector3().fromArray( array );\n\t\t\t\t\t\ttransforms.push( {\n\t\t\t\t\t\t\tsid: child.getAttribute( 'sid' ),\n\t\t\t\t\t\t\ttype: child.nodeName,\n\t\t\t\t\t\t\tobj: vector\n\t\t\t\t\t\t} );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'rotate':\n\t\t\t\t\t\tvar array = parseFloats( child.textContent );\n\t\t\t\t\t\tvar vector = new Vector3().fromArray( array );\n\t\t\t\t\t\tvar angle = MathUtils.degToRad( array[ 3 ] );\n\t\t\t\t\t\ttransforms.push( {\n\t\t\t\t\t\t\tsid: child.getAttribute( 'sid' ),\n\t\t\t\t\t\t\ttype: child.nodeName,\n\t\t\t\t\t\t\tobj: vector,\n\t\t\t\t\t\t\tangle: angle\n\t\t\t\t\t\t} );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn transforms;\n\n\t\t}\n\n\t\t// nodes\n\n\t\tfunction prepareNodes( xml ) {\n\n\t\t\tvar elements = xml.getElementsByTagName( 'node' );\n\n\t\t\t// ensure all node elements have id attributes\n\n\t\t\tfor ( var i = 0; i < elements.length; i ++ ) {\n\n\t\t\t\tvar element = elements[ i ];\n\n\t\t\t\tif ( element.hasAttribute( 'id' ) === false ) {\n\n\t\t\t\t\telement.setAttribute( 'id', generateId() );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tvar matrix = new Matrix4();\n\t\tvar vector = new Vector3();\n\n\t\tfunction parseNode( xml ) {\n\n\t\t\tvar data = {\n\t\t\t\tname: xml.getAttribute( 'name' ) || '',\n\t\t\t\ttype: xml.getAttribute( 'type' ),\n\t\t\t\tid: xml.getAttribute( 'id' ),\n\t\t\t\tsid: xml.getAttribute( 'sid' ),\n\t\t\t\tmatrix: new Matrix4(),\n\t\t\t\tnodes: [],\n\t\t\t\tinstanceCameras: [],\n\t\t\t\tinstanceControllers: [],\n\t\t\t\tinstanceLights: [],\n\t\t\t\tinstanceGeometries: [],\n\t\t\t\tinstanceNodes: [],\n\t\t\t\ttransforms: {}\n\t\t\t};\n\n\t\t\tfor ( var i = 0; i < xml.childNodes.length; i ++ ) {\n\n\t\t\t\tvar child = xml.childNodes[ i ];\n\n\t\t\t\tif ( child.nodeType !== 1 ) continue;\n\n\t\t\t\tswitch ( child.nodeName ) {\n\n\t\t\t\t\tcase 'node':\n\t\t\t\t\t\tdata.nodes.push( child.getAttribute( 'id' ) );\n\t\t\t\t\t\tparseNode( child );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'instance_camera':\n\t\t\t\t\t\tdata.instanceCameras.push( parseId( child.getAttribute( 'url' ) ) );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'instance_controller':\n\t\t\t\t\t\tdata.instanceControllers.push( parseNodeInstance( child ) );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'instance_light':\n\t\t\t\t\t\tdata.instanceLights.push( parseId( child.getAttribute( 'url' ) ) );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'instance_geometry':\n\t\t\t\t\t\tdata.instanceGeometries.push( parseNodeInstance( child ) );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'instance_node':\n\t\t\t\t\t\tdata.instanceNodes.push( parseId( child.getAttribute( 'url' ) ) );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'matrix':\n\t\t\t\t\t\tvar array = parseFloats( child.textContent );\n\t\t\t\t\t\tdata.matrix.multiply( matrix.fromArray( array ).transpose() );\n\t\t\t\t\t\tdata.transforms[ child.getAttribute( 'sid' ) ] = child.nodeName;\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'translate':\n\t\t\t\t\t\tvar array = parseFloats( child.textContent );\n\t\t\t\t\t\tvector.fromArray( array );\n\t\t\t\t\t\tdata.matrix.multiply( matrix.makeTranslation( vector.x, vector.y, vector.z ) );\n\t\t\t\t\t\tdata.transforms[ child.getAttribute( 'sid' ) ] = child.nodeName;\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'rotate':\n\t\t\t\t\t\tvar array = parseFloats( child.textContent );\n\t\t\t\t\t\tvar angle = MathUtils.degToRad( array[ 3 ] );\n\t\t\t\t\t\tdata.matrix.multiply( matrix.makeRotationAxis( vector.fromArray( array ), angle ) );\n\t\t\t\t\t\tdata.transforms[ child.getAttribute( 'sid' ) ] = child.nodeName;\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'scale':\n\t\t\t\t\t\tvar array = parseFloats( child.textContent );\n\t\t\t\t\t\tdata.matrix.scale( vector.fromArray( array ) );\n\t\t\t\t\t\tdata.transforms[ child.getAttribute( 'sid' ) ] = child.nodeName;\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'extra':\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tconsole.log( child );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( hasNode( data.id ) ) {\n\n\t\t\t\tconsole.warn( 'THREE.ColladaLoader: There is already a node with ID %s. Exclude current node from further processing.', data.id );\n\n\t\t\t} else {\n\n\t\t\t\tlibrary.nodes[ data.id ] = data;\n\n\t\t\t}\n\n\t\t\treturn data;\n\n\t\t}\n\n\t\tfunction parseNodeInstance( xml ) {\n\n\t\t\tvar data = {\n\t\t\t\tid: parseId( xml.getAttribute( 'url' ) ),\n\t\t\t\tmaterials: {},\n\t\t\t\tskeletons: []\n\t\t\t};\n\n\t\t\tfor ( var i = 0; i < xml.childNodes.length; i ++ ) {\n\n\t\t\t\tvar child = xml.childNodes[ i ];\n\n\t\t\t\tswitch ( child.nodeName ) {\n\n\t\t\t\t\tcase 'bind_material':\n\t\t\t\t\t\tvar instances = child.getElementsByTagName( 'instance_material' );\n\n\t\t\t\t\t\tfor ( var j = 0; j < instances.length; j ++ ) {\n\n\t\t\t\t\t\t\tvar instance = instances[ j ];\n\t\t\t\t\t\t\tvar symbol = instance.getAttribute( 'symbol' );\n\t\t\t\t\t\t\tvar target = instance.getAttribute( 'target' );\n\n\t\t\t\t\t\t\tdata.materials[ symbol ] = parseId( target );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'skeleton':\n\t\t\t\t\t\tdata.skeletons.push( parseId( child.textContent ) );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn data;\n\n\t\t}\n\n\t\tfunction buildSkeleton( skeletons, joints ) {\n\n\t\t\tvar boneData = [];\n\t\t\tvar sortedBoneData = [];\n\n\t\t\tvar i, j, data;\n\n\t\t\t// a skeleton can have multiple root bones. collada expresses this\n\t\t\t// situtation with multiple \"skeleton\" tags per controller instance\n\n\t\t\tfor ( i = 0; i < skeletons.length; i ++ ) {\n\n\t\t\t\tvar skeleton = skeletons[ i ];\n\n\t\t\t\tvar root;\n\n\t\t\t\tif ( hasNode( skeleton ) ) {\n\n\t\t\t\t\troot = getNode( skeleton );\n\t\t\t\t\tbuildBoneHierarchy( root, joints, boneData );\n\n\t\t\t\t} else if ( hasVisualScene( skeleton ) ) {\n\n\t\t\t\t\t// handle case where the skeleton refers to the visual scene (#13335)\n\n\t\t\t\t\tvar visualScene = library.visualScenes[ skeleton ];\n\t\t\t\t\tvar children = visualScene.children;\n\n\t\t\t\t\tfor ( var j = 0; j < children.length; j ++ ) {\n\n\t\t\t\t\t\tvar child = children[ j ];\n\n\t\t\t\t\t\tif ( child.type === 'JOINT' ) {\n\n\t\t\t\t\t\t\tvar root = getNode( child.id );\n\t\t\t\t\t\t\tbuildBoneHierarchy( root, joints, boneData );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\tconsole.error( 'THREE.ColladaLoader: Unable to find root bone of skeleton with ID:', skeleton );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// sort bone data (the order is defined in the corresponding controller)\n\n\t\t\tfor ( i = 0; i < joints.length; i ++ ) {\n\n\t\t\t\tfor ( j = 0; j < boneData.length; j ++ ) {\n\n\t\t\t\t\tdata = boneData[ j ];\n\n\t\t\t\t\tif ( data.bone.name === joints[ i ].name ) {\n\n\t\t\t\t\t\tsortedBoneData[ i ] = data;\n\t\t\t\t\t\tdata.processed = true;\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// add unprocessed bone data at the end of the list\n\n\t\t\tfor ( i = 0; i < boneData.length; i ++ ) {\n\n\t\t\t\tdata = boneData[ i ];\n\n\t\t\t\tif ( data.processed === false ) {\n\n\t\t\t\t\tsortedBoneData.push( data );\n\t\t\t\t\tdata.processed = true;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// setup arrays for skeleton creation\n\n\t\t\tvar bones = [];\n\t\t\tvar boneInverses = [];\n\n\t\t\tfor ( i = 0; i < sortedBoneData.length; i ++ ) {\n\n\t\t\t\tdata = sortedBoneData[ i ];\n\n\t\t\t\tbones.push( data.bone );\n\t\t\t\tboneInverses.push( data.boneInverse );\n\n\t\t\t}\n\n\t\t\treturn new Skeleton( bones, boneInverses );\n\n\t\t}\n\n\t\tfunction buildBoneHierarchy( root, joints, boneData ) {\n\n\t\t\t// setup bone data from visual scene\n\n\t\t\troot.traverse( function ( object ) {\n\n\t\t\t\tif ( object.isBone === true ) {\n\n\t\t\t\t\tvar boneInverse;\n\n\t\t\t\t\t// retrieve the boneInverse from the controller data\n\n\t\t\t\t\tfor ( var i = 0; i < joints.length; i ++ ) {\n\n\t\t\t\t\t\tvar joint = joints[ i ];\n\n\t\t\t\t\t\tif ( joint.name === object.name ) {\n\n\t\t\t\t\t\t\tboneInverse = joint.boneInverse;\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( boneInverse === undefined ) {\n\n\t\t\t\t\t\t// Unfortunately, there can be joints in the visual scene that are not part of the\n\t\t\t\t\t\t// corresponding controller. In this case, we have to create a dummy boneInverse matrix\n\t\t\t\t\t\t// for the respective bone. This bone won't affect any vertices, because there are no skin indices\n\t\t\t\t\t\t// and weights defined for it. But we still have to add the bone to the sorted bone list in order to\n\t\t\t\t\t\t// ensure a correct animation of the model.\n\n\t\t\t\t\t\tboneInverse = new Matrix4();\n\n\t\t\t\t\t}\n\n\t\t\t\t\tboneData.push( { bone: object, boneInverse: boneInverse, processed: false } );\n\n\t\t\t\t}\n\n\t\t\t} );\n\n\t\t}\n\n\t\tfunction buildNode( data ) {\n\n\t\t\tvar objects = [];\n\n\t\t\tvar matrix = data.matrix;\n\t\t\tvar nodes = data.nodes;\n\t\t\tvar type = data.type;\n\t\t\tvar instanceCameras = data.instanceCameras;\n\t\t\tvar instanceControllers = data.instanceControllers;\n\t\t\tvar instanceLights = data.instanceLights;\n\t\t\tvar instanceGeometries = data.instanceGeometries;\n\t\t\tvar instanceNodes = data.instanceNodes;\n\n\t\t\t// nodes\n\n\t\t\tfor ( var i = 0, l = nodes.length; i < l; i ++ ) {\n\n\t\t\t\tobjects.push( getNode( nodes[ i ] ) );\n\n\t\t\t}\n\n\t\t\t// instance cameras\n\n\t\t\tfor ( var i = 0, l = instanceCameras.length; i < l; i ++ ) {\n\n\t\t\t\tvar instanceCamera = getCamera( instanceCameras[ i ] );\n\n\t\t\t\tif ( instanceCamera !== null ) {\n\n\t\t\t\t\tobjects.push( instanceCamera.clone() );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// instance controllers\n\n\t\t\tfor ( var i = 0, l = instanceControllers.length; i < l; i ++ ) {\n\n\t\t\t\tvar instance = instanceControllers[ i ];\n\t\t\t\tvar controller = getController( instance.id );\n\t\t\t\tvar geometries = getGeometry( controller.id );\n\t\t\t\tvar newObjects = buildObjects( geometries, instance.materials );\n\n\t\t\t\tvar skeletons = instance.skeletons;\n\t\t\t\tvar joints = controller.skin.joints;\n\n\t\t\t\tvar skeleton = buildSkeleton( skeletons, joints );\n\n\t\t\t\tfor ( var j = 0, jl = newObjects.length; j < jl; j ++ ) {\n\n\t\t\t\t\tvar object = newObjects[ j ];\n\n\t\t\t\t\tif ( object.isSkinnedMesh ) {\n\n\t\t\t\t\t\tobject.bind( skeleton, controller.skin.bindMatrix );\n\t\t\t\t\t\tobject.normalizeSkinWeights();\n\n\t\t\t\t\t}\n\n\t\t\t\t\tobjects.push( object );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// instance lights\n\n\t\t\tfor ( var i = 0, l = instanceLights.length; i < l; i ++ ) {\n\n\t\t\t\tvar instanceLight = getLight( instanceLights[ i ] );\n\n\t\t\t\tif ( instanceLight !== null ) {\n\n\t\t\t\t\tobjects.push( instanceLight.clone() );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// instance geometries\n\n\t\t\tfor ( var i = 0, l = instanceGeometries.length; i < l; i ++ ) {\n\n\t\t\t\tvar instance = instanceGeometries[ i ];\n\n\t\t\t\t// a single geometry instance in collada can lead to multiple object3Ds.\n\t\t\t\t// this is the case when primitives are combined like triangles and lines\n\n\t\t\t\tvar geometries = getGeometry( instance.id );\n\t\t\t\tvar newObjects = buildObjects( geometries, instance.materials );\n\n\t\t\t\tfor ( var j = 0, jl = newObjects.length; j < jl; j ++ ) {\n\n\t\t\t\t\tobjects.push( newObjects[ j ] );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// instance nodes\n\n\t\t\tfor ( var i = 0, l = instanceNodes.length; i < l; i ++ ) {\n\n\t\t\t\tobjects.push( getNode( instanceNodes[ i ] ).clone() );\n\n\t\t\t}\n\n\t\t\tvar object;\n\n\t\t\tif ( nodes.length === 0 && objects.length === 1 ) {\n\n\t\t\t\tobject = objects[ 0 ];\n\n\t\t\t} else {\n\n\t\t\t\tobject = ( type === 'JOINT' ) ? new Bone() : new Group();\n\n\t\t\t\tfor ( var i = 0; i < objects.length; i ++ ) {\n\n\t\t\t\t\tobject.add( objects[ i ] );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tobject.name = ( type === 'JOINT' ) ? data.sid : data.name;\n\t\t\tobject.matrix.copy( matrix );\n\t\t\tobject.matrix.decompose( object.position, object.quaternion, object.scale );\n\n\t\t\treturn object;\n\n\t\t}\n\n\t\tvar fallbackMaterial = new MeshBasicMaterial( { color: 0xff00ff } );\n\n\t\tfunction resolveMaterialBinding( keys, instanceMaterials ) {\n\n\t\t\tvar materials = [];\n\n\t\t\tfor ( var i = 0, l = keys.length; i < l; i ++ ) {\n\n\t\t\t\tvar id = instanceMaterials[ keys[ i ] ];\n\n\t\t\t\tif ( id === undefined ) {\n\n\t\t\t\t\tconsole.warn( 'THREE.ColladaLoader: Material with key %s not found. Apply fallback material.', keys[ i ] );\n\t\t\t\t\tmaterials.push( fallbackMaterial );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tmaterials.push( getMaterial( id ) );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn materials;\n\n\t\t}\n\n\t\tfunction buildObjects( geometries, instanceMaterials ) {\n\n\t\t\tvar objects = [];\n\n\t\t\tfor ( var type in geometries ) {\n\n\t\t\t\tvar geometry = geometries[ type ];\n\n\t\t\t\tvar materials = resolveMaterialBinding( geometry.materialKeys, instanceMaterials );\n\n\t\t\t\t// handle case if no materials are defined\n\n\t\t\t\tif ( materials.length === 0 ) {\n\n\t\t\t\t\tif ( type === 'lines' || type === 'linestrips' ) {\n\n\t\t\t\t\t\tmaterials.push( new LineBasicMaterial() );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tmaterials.push( new MeshPhongMaterial() );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\t// regard skinning\n\n\t\t\t\tvar skinning = ( geometry.data.attributes.skinIndex !== undefined );\n\n\t\t\t\tif ( skinning ) {\n\n\t\t\t\t\tfor ( var i = 0, l = materials.length; i < l; i ++ ) {\n\n\t\t\t\t\t\tmaterials[ i ].skinning = true;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\t// choose between a single or multi materials (material array)\n\n\t\t\t\tvar material = ( materials.length === 1 ) ? materials[ 0 ] : materials;\n\n\t\t\t\t// now create a specific 3D object\n\n\t\t\t\tvar object;\n\n\t\t\t\tswitch ( type ) {\n\n\t\t\t\t\tcase 'lines':\n\t\t\t\t\t\tobject = new LineSegments( geometry.data, material );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'linestrips':\n\t\t\t\t\t\tobject = new Line( geometry.data, material );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'triangles':\n\t\t\t\t\tcase 'polylist':\n\t\t\t\t\t\tif ( skinning ) {\n\n\t\t\t\t\t\t\tobject = new SkinnedMesh( geometry.data, material );\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tobject = new Mesh( geometry.data, material );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\n\t\t\t\tobjects.push( object );\n\n\t\t\t}\n\n\t\t\treturn objects;\n\n\t\t}\n\n\t\tfunction hasNode( id ) {\n\n\t\t\treturn library.nodes[ id ] !== undefined;\n\n\t\t}\n\n\t\tfunction getNode( id ) {\n\n\t\t\treturn getBuild( library.nodes[ id ], buildNode );\n\n\t\t}\n\n\t\t// visual scenes\n\n\t\tfunction parseVisualScene( xml ) {\n\n\t\t\tvar data = {\n\t\t\t\tname: xml.getAttribute( 'name' ),\n\t\t\t\tchildren: []\n\t\t\t};\n\n\t\t\tprepareNodes( xml );\n\n\t\t\tvar elements = getElementsByTagName( xml, 'node' );\n\n\t\t\tfor ( var i = 0; i < elements.length; i ++ ) {\n\n\t\t\t\tdata.children.push( parseNode( elements[ i ] ) );\n\n\t\t\t}\n\n\t\t\tlibrary.visualScenes[ xml.getAttribute( 'id' ) ] = data;\n\n\t\t}\n\n\t\tfunction buildVisualScene( data ) {\n\n\t\t\tvar group = new Group();\n\t\t\tgroup.name = data.name;\n\n\t\t\tvar children = data.children;\n\n\t\t\tfor ( var i = 0; i < children.length; i ++ ) {\n\n\t\t\t\tvar child = children[ i ];\n\n\t\t\t\tgroup.add( getNode( child.id ) );\n\n\t\t\t}\n\n\t\t\treturn group;\n\n\t\t}\n\n\t\tfunction hasVisualScene( id ) {\n\n\t\t\treturn library.visualScenes[ id ] !== undefined;\n\n\t\t}\n\n\t\tfunction getVisualScene( id ) {\n\n\t\t\treturn getBuild( library.visualScenes[ id ], buildVisualScene );\n\n\t\t}\n\n\t\t// scenes\n\n\t\tfunction parseScene( xml ) {\n\n\t\t\tvar instance = getElementsByTagName( xml, 'instance_visual_scene' )[ 0 ];\n\t\t\treturn getVisualScene( parseId( instance.getAttribute( 'url' ) ) );\n\n\t\t}\n\n\t\tfunction setupAnimations() {\n\n\t\t\tvar clips = library.clips;\n\n\t\t\tif ( isEmpty( clips ) === true ) {\n\n\t\t\t\tif ( isEmpty( library.animations ) === false ) {\n\n\t\t\t\t\t// if there are animations but no clips, we create a default clip for playback\n\n\t\t\t\t\tvar tracks = [];\n\n\t\t\t\t\tfor ( var id in library.animations ) {\n\n\t\t\t\t\t\tvar animationTracks = getAnimation( id );\n\n\t\t\t\t\t\tfor ( var i = 0, l = animationTracks.length; i < l; i ++ ) {\n\n\t\t\t\t\t\t\ttracks.push( animationTracks[ i ] );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t\tanimations.push( new AnimationClip( 'default', - 1, tracks ) );\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\tfor ( var id in clips ) {\n\n\t\t\t\t\tanimations.push( getAnimationClip( id ) );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\t// convert the parser error element into text with each child elements text\n\t\t// separated by new lines.\n\n\t\tfunction parserErrorToText( parserError ) {\n\n\t\t\tvar result = '';\n\t\t\tvar stack = [ parserError ];\n\n\t\t\twhile ( stack.length ) {\n\n\t\t\t\tvar node = stack.shift();\n\n\t\t\t\tif ( node.nodeType === Node.TEXT_NODE ) {\n\n\t\t\t\t\tresult += node.textContent;\n\n\t\t\t\t} else {\n\n\t\t\t\t\tresult += '\\n';\n\t\t\t\t\tstack.push.apply( stack, node.childNodes );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn result.trim();\n\n\t\t}\n\n\t\tif ( text.length === 0 ) {\n\n\t\t\treturn { scene: new Scene() };\n\n\t\t}\n\n\t\tvar xml = new DOMParser().parseFromString( text, 'application/xml' );\n\n\t\tvar collada = getElementsByTagName( xml, 'COLLADA' )[ 0 ];\n\n\t\tvar parserError = xml.getElementsByTagName( 'parsererror' )[ 0 ];\n\t\tif ( parserError !== undefined ) {\n\n\t\t\t// Chrome will return parser error with a div in it\n\n\t\t\tvar errorElement = getElementsByTagName( parserError, 'div' )[ 0 ];\n\t\t\tvar errorText;\n\n\t\t\tif ( errorElement ) {\n\n\t\t\t\terrorText = errorElement.textContent;\n\n\t\t\t} else {\n\n\t\t\t\terrorText = parserErrorToText( parserError );\n\n\t\t\t}\n\n\t\t\tconsole.error( 'THREE.ColladaLoader: Failed to parse collada file.\\n', errorText );\n\n\t\t\treturn null;\n\n\t\t}\n\n\t\t// metadata\n\n\t\tvar version = collada.getAttribute( 'version' );\n\t\tconsole.log( 'THREE.ColladaLoader: File version', version );\n\n\t\tvar asset = parseAsset( getElementsByTagName( collada, 'asset' )[ 0 ] );\n\t\tvar textureLoader = new TextureLoader( this.manager );\n\t\ttextureLoader.setPath( this.resourcePath || path ).setCrossOrigin( this.crossOrigin );\n\n\t\tvar tgaLoader;\n\n\t\tif ( TGALoader ) {\n\n\t\t\ttgaLoader = new TGALoader( this.manager );\n\t\t\ttgaLoader.setPath( this.resourcePath || path );\n\n\t\t}\n\n\t\t//\n\n\t\tvar animations = [];\n\t\tvar kinematics = {};\n\t\tvar count = 0;\n\n\t\t//\n\n\t\tvar library = {\n\t\t\tanimations: {},\n\t\t\tclips: {},\n\t\t\tcontrollers: {},\n\t\t\timages: {},\n\t\t\teffects: {},\n\t\t\tmaterials: {},\n\t\t\tcameras: {},\n\t\t\tlights: {},\n\t\t\tgeometries: {},\n\t\t\tnodes: {},\n\t\t\tvisualScenes: {},\n\t\t\tkinematicsModels: {},\n\t\t\tphysicsModels: {},\n\t\t\tkinematicsScenes: {}\n\t\t};\n\n\t\tparseLibrary( collada, 'library_animations', 'animation', parseAnimation );\n\t\tparseLibrary( collada, 'library_animation_clips', 'animation_clip', parseAnimationClip );\n\t\tparseLibrary( collada, 'library_controllers', 'controller', parseController );\n\t\tparseLibrary( collada, 'library_images', 'image', parseImage );\n\t\tparseLibrary( collada, 'library_effects', 'effect', parseEffect );\n\t\tparseLibrary( collada, 'library_materials', 'material', parseMaterial );\n\t\tparseLibrary( collada, 'library_cameras', 'camera', parseCamera );\n\t\tparseLibrary( collada, 'library_lights', 'light', parseLight );\n\t\tparseLibrary( collada, 'library_geometries', 'geometry', parseGeometry );\n\t\tparseLibrary( collada, 'library_nodes', 'node', parseNode );\n\t\tparseLibrary( collada, 'library_visual_scenes', 'visual_scene', parseVisualScene );\n\t\tparseLibrary( collada, 'library_kinematics_models', 'kinematics_model', parseKinematicsModel );\n\t\tparseLibrary( collada, 'library_physics_models', 'physics_model', parsePhysicsModel );\n\t\tparseLibrary( collada, 'scene', 'instance_kinematics_scene', parseKinematicsScene );\n\n\t\tbuildLibrary( library.animations, buildAnimation );\n\t\tbuildLibrary( library.clips, buildAnimationClip );\n\t\tbuildLibrary( library.controllers, buildController );\n\t\tbuildLibrary( library.images, buildImage );\n\t\tbuildLibrary( library.effects, buildEffect );\n\t\tbuildLibrary( library.materials, buildMaterial );\n\t\tbuildLibrary( library.cameras, buildCamera );\n\t\tbuildLibrary( library.lights, buildLight );\n\t\tbuildLibrary( library.geometries, buildGeometry );\n\t\tbuildLibrary( library.visualScenes, buildVisualScene );\n\n\t\tsetupAnimations();\n\t\tsetupKinematics();\n\n\t\tvar scene = parseScene( getElementsByTagName( collada, 'scene' )[ 0 ] );\n\t\tscene.animations = animations;\n\n\t\tif ( asset.upAxis === 'Z_UP' ) {\n\n\t\t\tscene.quaternion.setFromEuler( new Euler( - Math.PI / 2, 0, 0 ) );\n\n\t\t}\n\n\t\tscene.scale.multiplyScalar( asset.unit );\n\n\t\treturn {\n\t\t\tget animations() {\n\n\t\t\t\tconsole.warn( 'THREE.ColladaLoader: Please access animations over scene.animations now.' );\n\t\t\t\treturn animations;\n\n\t\t\t},\n\t\t\tkinematics: kinematics,\n\t\t\tlibrary: library,\n\t\t\tscene: scene\n\t\t};\n\n\t}\n\n} );\n\nexport { ColladaLoader };\n"]},"metadata":{},"sourceType":"module"}