{"ast":null,"code":"import _extends from '@babel/runtime/helpers/esm/extends';\nimport _objectWithoutPropertiesLoose from '@babel/runtime/helpers/esm/objectWithoutPropertiesLoose';\nimport { forwardRef, useRef, useMemo, createElement } from 'react';\nimport { WebGLRenderTarget, PlaneBufferGeometry, Mesh, MeshDepthMaterial, ShaderMaterial } from 'three';\nimport { useThree, useFrame } from '@react-three/fiber';\nimport { HorizontalBlurShader, VerticalBlurShader } from 'three-stdlib';\nconst ContactShadows = /*#__PURE__*/forwardRef((_ref, ref) => {\n  let {\n    opacity = 1,\n    width = 1,\n    height = 1,\n    blur = 1,\n    far = 10,\n    resolution = 256\n  } = _ref,\n      props = _objectWithoutPropertiesLoose(_ref, [\"opacity\", \"width\", \"height\", \"blur\", \"far\", \"resolution\"]);\n\n  const scene = useThree(({\n    scene\n  }) => scene);\n  const gl = useThree(({\n    gl\n  }) => gl);\n  const shadowCamera = useRef();\n  const [renderTarget, planeGeometry, depthMaterial, blurPlane, horizontalBlurMaterial, verticalBlurMaterial, renderTargetBlur] = useMemo(() => {\n    const renderTarget = new WebGLRenderTarget(resolution, resolution);\n    const renderTargetBlur = new WebGLRenderTarget(resolution, resolution);\n    renderTargetBlur.texture.generateMipmaps = renderTarget.texture.generateMipmaps = false;\n    const planeGeometry = new PlaneBufferGeometry(width, height).rotateX(Math.PI / 2);\n    const blurPlane = new Mesh(planeGeometry);\n    const depthMaterial = new MeshDepthMaterial();\n    depthMaterial.depthTest = depthMaterial.depthWrite = false;\n\n    depthMaterial.onBeforeCompile = shader => shader.fragmentShader = shader.fragmentShader.replace('1.0 - fragCoordZ ), opacity );', '0.0 ), ( 1.0 - fragCoordZ ) * 1.0 );');\n\n    const horizontalBlurMaterial = new ShaderMaterial(HorizontalBlurShader);\n    const verticalBlurMaterial = new ShaderMaterial(VerticalBlurShader);\n    verticalBlurMaterial.depthTest = horizontalBlurMaterial.depthTest = false;\n    return [renderTarget, planeGeometry, depthMaterial, blurPlane, horizontalBlurMaterial, verticalBlurMaterial, renderTargetBlur];\n  }, [resolution, width, height]);\n  useFrame(() => {\n    if (shadowCamera.current) {\n      const initialBackground = scene.background;\n      scene.background = null;\n      scene.overrideMaterial = depthMaterial;\n      gl.setRenderTarget(renderTarget);\n      gl.render(scene, shadowCamera.current);\n      scene.overrideMaterial = null;\n      blurPlane.material = horizontalBlurMaterial;\n      blurPlane.material.uniforms.tDiffuse.value = renderTarget.texture;\n      horizontalBlurMaterial.uniforms.h.value = blur / 256;\n      gl.setRenderTarget(renderTargetBlur);\n      gl.render(blurPlane, shadowCamera.current);\n      blurPlane.material = verticalBlurMaterial;\n      blurPlane.material.uniforms.tDiffuse.value = renderTargetBlur.texture;\n      verticalBlurMaterial.uniforms.v.value = blur / 256;\n      gl.setRenderTarget(renderTarget);\n      gl.render(blurPlane, shadowCamera.current);\n      gl.setRenderTarget(null);\n      scene.background = initialBackground;\n    }\n  });\n  return /*#__PURE__*/createElement(\"group\", _extends({}, props, {\n    ref: ref\n  }), /*#__PURE__*/createElement(\"mesh\", {\n    geometry: planeGeometry,\n    scale: [1, -1, 1],\n    rotation: [-Math.PI / 2, 0, 0]\n  }, /*#__PURE__*/createElement(\"meshBasicMaterial\", {\n    map: renderTarget.texture,\n    transparent: true,\n    opacity: opacity\n  })), /*#__PURE__*/createElement(\"orthographicCamera\", {\n    ref: shadowCamera,\n    args: [-width / 2, width / 2, height / 2, -height / 2, 0, far]\n  }));\n});\nexport { ContactShadows };","map":{"version":3,"sources":["/Users/haiakablan/Documents/לוטוס/קורס/Architecture-web/node_modules/@react-three/drei/core/ContactShadows.js"],"names":["_extends","_objectWithoutPropertiesLoose","forwardRef","useRef","useMemo","createElement","WebGLRenderTarget","PlaneBufferGeometry","Mesh","MeshDepthMaterial","ShaderMaterial","useThree","useFrame","HorizontalBlurShader","VerticalBlurShader","ContactShadows","_ref","ref","opacity","width","height","blur","far","resolution","props","scene","gl","shadowCamera","renderTarget","planeGeometry","depthMaterial","blurPlane","horizontalBlurMaterial","verticalBlurMaterial","renderTargetBlur","texture","generateMipmaps","rotateX","Math","PI","depthTest","depthWrite","onBeforeCompile","shader","fragmentShader","replace","current","initialBackground","background","overrideMaterial","setRenderTarget","render","material","uniforms","tDiffuse","value","h","v","geometry","scale","rotation","map","transparent","args"],"mappings":"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","sourcesContent":["import _extends from '@babel/runtime/helpers/esm/extends';\nimport _objectWithoutPropertiesLoose from '@babel/runtime/helpers/esm/objectWithoutPropertiesLoose';\nimport { forwardRef, useRef, useMemo, createElement } from 'react';\nimport { WebGLRenderTarget, PlaneBufferGeometry, Mesh, MeshDepthMaterial, ShaderMaterial } from 'three';\nimport { useThree, useFrame } from '@react-three/fiber';\nimport { HorizontalBlurShader, VerticalBlurShader } from 'three-stdlib';\n\nconst ContactShadows = /*#__PURE__*/forwardRef((_ref, ref) => {\n  let {\n    opacity = 1,\n    width = 1,\n    height = 1,\n    blur = 1,\n    far = 10,\n    resolution = 256\n  } = _ref,\n      props = _objectWithoutPropertiesLoose(_ref, [\"opacity\", \"width\", \"height\", \"blur\", \"far\", \"resolution\"]);\n\n  const scene = useThree(({\n    scene\n  }) => scene);\n  const gl = useThree(({\n    gl\n  }) => gl);\n  const shadowCamera = useRef();\n  const [renderTarget, planeGeometry, depthMaterial, blurPlane, horizontalBlurMaterial, verticalBlurMaterial, renderTargetBlur] = useMemo(() => {\n    const renderTarget = new WebGLRenderTarget(resolution, resolution);\n    const renderTargetBlur = new WebGLRenderTarget(resolution, resolution);\n    renderTargetBlur.texture.generateMipmaps = renderTarget.texture.generateMipmaps = false;\n    const planeGeometry = new PlaneBufferGeometry(width, height).rotateX(Math.PI / 2);\n    const blurPlane = new Mesh(planeGeometry);\n    const depthMaterial = new MeshDepthMaterial();\n    depthMaterial.depthTest = depthMaterial.depthWrite = false;\n\n    depthMaterial.onBeforeCompile = shader => shader.fragmentShader = shader.fragmentShader.replace('1.0 - fragCoordZ ), opacity );', '0.0 ), ( 1.0 - fragCoordZ ) * 1.0 );');\n\n    const horizontalBlurMaterial = new ShaderMaterial(HorizontalBlurShader);\n    const verticalBlurMaterial = new ShaderMaterial(VerticalBlurShader);\n    verticalBlurMaterial.depthTest = horizontalBlurMaterial.depthTest = false;\n    return [renderTarget, planeGeometry, depthMaterial, blurPlane, horizontalBlurMaterial, verticalBlurMaterial, renderTargetBlur];\n  }, [resolution, width, height]);\n  useFrame(() => {\n    if (shadowCamera.current) {\n      const initialBackground = scene.background;\n      scene.background = null;\n      scene.overrideMaterial = depthMaterial;\n      gl.setRenderTarget(renderTarget);\n      gl.render(scene, shadowCamera.current);\n      scene.overrideMaterial = null;\n      blurPlane.material = horizontalBlurMaterial;\n      blurPlane.material.uniforms.tDiffuse.value = renderTarget.texture;\n      horizontalBlurMaterial.uniforms.h.value = blur / 256;\n      gl.setRenderTarget(renderTargetBlur);\n      gl.render(blurPlane, shadowCamera.current);\n      blurPlane.material = verticalBlurMaterial;\n      blurPlane.material.uniforms.tDiffuse.value = renderTargetBlur.texture;\n      verticalBlurMaterial.uniforms.v.value = blur / 256;\n      gl.setRenderTarget(renderTarget);\n      gl.render(blurPlane, shadowCamera.current);\n      gl.setRenderTarget(null);\n      scene.background = initialBackground;\n    }\n  });\n  return /*#__PURE__*/createElement(\"group\", _extends({}, props, {\n    ref: ref\n  }), /*#__PURE__*/createElement(\"mesh\", {\n    geometry: planeGeometry,\n    scale: [1, -1, 1],\n    rotation: [-Math.PI / 2, 0, 0]\n  }, /*#__PURE__*/createElement(\"meshBasicMaterial\", {\n    map: renderTarget.texture,\n    transparent: true,\n    opacity: opacity\n  })), /*#__PURE__*/createElement(\"orthographicCamera\", {\n    ref: shadowCamera,\n    args: [-width / 2, width / 2, height / 2, -height / 2, 0, far]\n  }));\n});\n\nexport { ContactShadows };\n"]},"metadata":{},"sourceType":"module"}