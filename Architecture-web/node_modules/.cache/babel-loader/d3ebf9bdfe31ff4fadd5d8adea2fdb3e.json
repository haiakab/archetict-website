{"ast":null,"code":"import { MeshStandardMaterial } from 'three';\nimport _defineProperty from '@babel/runtime/helpers/esm/defineProperty';\n\nclass MeshReflectorMaterial extends MeshStandardMaterial {\n  constructor(parameters = {}) {\n    super(parameters);\n\n    _defineProperty(this, \"_debug\", {\n      value: 0\n    });\n\n    _defineProperty(this, \"_tDepth\", {\n      value: null\n    });\n\n    _defineProperty(this, \"_distortionMap\", {\n      value: null\n    });\n\n    _defineProperty(this, \"_tDiffuse\", {\n      value: null\n    });\n\n    _defineProperty(this, \"_u_mipmap_0\", {\n      value: null\n    });\n\n    _defineProperty(this, \"_u_mipmap_1\", {\n      value: null\n    });\n\n    _defineProperty(this, \"_u_mipmap_2\", {\n      value: null\n    });\n\n    _defineProperty(this, \"_u_mipmap_3\", {\n      value: null\n    });\n\n    _defineProperty(this, \"_u_mipmap_4\", {\n      value: null\n    });\n\n    _defineProperty(this, \"_u_mipmap_5\", {\n      value: null\n    });\n\n    _defineProperty(this, \"_u_mipmap_6\", {\n      value: null\n    });\n\n    _defineProperty(this, \"_u_mipmap_7\", {\n      value: null\n    });\n\n    _defineProperty(this, \"_u_mipmap_res_0\", {\n      value: null\n    });\n\n    _defineProperty(this, \"_u_mipmap_res_1\", {\n      value: null\n    });\n\n    _defineProperty(this, \"_u_mipmap_res_2\", {\n      value: null\n    });\n\n    _defineProperty(this, \"_u_mipmap_res_3\", {\n      value: null\n    });\n\n    _defineProperty(this, \"_u_mipmap_res_4\", {\n      value: null\n    });\n\n    _defineProperty(this, \"_u_mipmap_res_5\", {\n      value: null\n    });\n\n    _defineProperty(this, \"_u_mipmap_res_6\", {\n      value: null\n    });\n\n    _defineProperty(this, \"_u_mipmap_res_7\", {\n      value: null\n    });\n\n    _defineProperty(this, \"_textureMatrix\", {\n      value: null\n    });\n\n    _defineProperty(this, \"_mirror\", {\n      value: 0.0\n    });\n\n    _defineProperty(this, \"_mixBlur\", {\n      value: 0.0\n    });\n\n    _defineProperty(this, \"_blurStrength\", {\n      value: 0.5\n    });\n\n    _defineProperty(this, \"_minDepthThreshold\", {\n      value: 0.9\n    });\n\n    _defineProperty(this, \"_maxDepthThreshold\", {\n      value: 1\n    });\n\n    _defineProperty(this, \"_depthScale\", {\n      value: 0\n    });\n\n    _defineProperty(this, \"_depthToBlurRatioBias\", {\n      value: 0.25\n    });\n\n    _defineProperty(this, \"_distortion\", {\n      value: 1\n    });\n\n    this.setValues(parameters);\n  }\n\n  onBeforeCompile(shader) {\n    var _shader$defines;\n\n    if (!((_shader$defines = shader.defines) == null ? void 0 : _shader$defines.USE_UV)) {\n      shader.defines.USE_UV = '';\n    }\n\n    shader.uniforms.debug = this._debug;\n    shader.uniforms.tDiffuse = this._tDiffuse;\n    shader.uniforms.tDepth = this._tDepth;\n    shader.uniforms.distortionMap = this._distortionMap;\n    shader.uniforms.u_mipmap_0 = this._u_mipmap_0;\n    shader.uniforms.u_mipmap_1 = this._u_mipmap_1;\n    shader.uniforms.u_mipmap_2 = this._u_mipmap_2;\n    shader.uniforms.u_mipmap_3 = this._u_mipmap_3;\n    shader.uniforms.u_mipmap_4 = this._u_mipmap_4;\n    shader.uniforms.u_mipmap_5 = this._u_mipmap_5;\n    shader.uniforms.u_mipmap_6 = this._u_mipmap_6;\n    shader.uniforms.u_mipmap_7 = this._u_mipmap_7;\n    shader.uniforms.u_mipmap_res_0 = this._u_mipmap_res_0;\n    shader.uniforms.u_mipmap_res_1 = this._u_mipmap_res_1;\n    shader.uniforms.u_mipmap_res_2 = this._u_mipmap_res_2;\n    shader.uniforms.u_mipmap_res_3 = this._u_mipmap_res_3;\n    shader.uniforms.u_mipmap_res_4 = this._u_mipmap_res_4;\n    shader.uniforms.u_mipmap_res_5 = this._u_mipmap_res_5;\n    shader.uniforms.u_mipmap_res_6 = this._u_mipmap_res_6;\n    shader.uniforms.u_mipmap_res_7 = this._u_mipmap_res_7;\n    shader.uniforms.textureMatrix = this._textureMatrix;\n    shader.uniforms.mirror = this._mirror;\n    shader.uniforms.mixBlur = this._mixBlur;\n    shader.uniforms.mixStrength = this._blurStrength;\n    shader.uniforms.minDepthThreshold = this._minDepthThreshold;\n    shader.uniforms.maxDepthThreshold = this._maxDepthThreshold;\n    shader.uniforms.depthScale = this._depthScale;\n    shader.uniforms.depthToBlurRatioBias = this._depthToBlurRatioBias;\n    shader.uniforms.distortion = this._distortion;\n    shader.vertexShader = \"\\n        uniform mat4 textureMatrix;\\n        varying vec4 my_vUv;     \\n      \" + shader.vertexShader;\n    shader.vertexShader = shader.vertexShader.replace('#include <project_vertex>', \"#include <project_vertex>\\n        my_vUv = textureMatrix * vec4( position, 1.0 );\\n        gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\");\n    shader.fragmentShader = \"\\n        uniform int debug;\\n        uniform sampler2D tDiffuse;\\n        uniform sampler2D tDepth;\\n        uniform sampler2D distortionMap;\\n        uniform sampler2D u_mipmap_0;\\n        uniform sampler2D u_mipmap_1;\\n        uniform sampler2D u_mipmap_2;\\n        uniform sampler2D u_mipmap_3;\\n        uniform sampler2D u_mipmap_4;\\n        uniform sampler2D u_mipmap_5;\\n        uniform sampler2D u_mipmap_6;\\n        uniform sampler2D u_mipmap_7;\\n        uniform vec2 u_mipmap_res_0;\\n        uniform vec2 u_mipmap_res_1;\\n        uniform vec2 u_mipmap_res_2;\\n        uniform vec2 u_mipmap_res_3;\\n        uniform vec2 u_mipmap_res_4;\\n        uniform vec2 u_mipmap_res_5;\\n        uniform vec2 u_mipmap_res_6;\\n        uniform vec2 u_mipmap_res_7;\\n        uniform float distortion;\\n        uniform float cameraNear;\\n\\t\\t\\t  uniform float cameraFar;\\n        uniform float mixBlur;\\n        uniform float mirror;\\n        uniform float mixStrength;\\n        uniform float minDepthThreshold;\\n        uniform float maxDepthThreshold;\\n        uniform float depthScale;\\n        uniform float depthToBlurRatioBias;\\n        varying vec4 my_vUv;  \\n        \\n        // from http://www.java-gaming.org/index.php?topic=35123.0\\n        vec4 cubic( float v ) {\\n          vec4 n = vec4( 1.0, 2.0, 3.0, 4.0 ) - v;\\n          vec4 s = n * n * n;\\n          float x = s.x;\\n          float y = s.y - 4.0 * s.x;\\n          float z = s.z - 4.0 * s.y + 6.0 * s.x;\\n          float w = 6.0 - x - y - z;\\n          return vec4( x, y, z, w ) * ( 1.0 / 6.0 );\\n        }\\n        \\n        vec4 textureBicubic( sampler2D sampler, vec2 texCoords, vec2 texSize ) {\\n          vec2 invTexSize = 1.0 / texSize;\\n          texCoords = texCoords * texSize - 0.5;\\n          vec2 fxy = fract( texCoords );\\n          texCoords -= fxy;\\n\\n          vec4 xcubic = cubic( fxy.x );\\n          vec4 ycubic = cubic( fxy.y );\\n          vec4 c = texCoords.xxyy + vec2 ( - 0.5, + 1.5 ).xyxy;\\n          vec4 s = vec4( xcubic.xz + xcubic.yw, ycubic.xz + ycubic.yw );\\n\\n          vec4 offset = c + vec4( xcubic.yw, ycubic.yw ) / s;\\n          offset *= invTexSize.xxyy;\\n        \\n          vec4 sample0 = texture2D( sampler, offset.xz);\\n          vec4 sample1 = texture2D( sampler, offset.yz);\\n          vec4 sample2 = texture2D( sampler, offset.xw);\\n          vec4 sample3 = texture2D( sampler, offset.yw);\\n        \\n          float sx = s.x / ( s.x + s.y );\\n          float sy = s.z / ( s.z + s.w );\\n\\n          return mix(\\n            mix(\\n              sample3,\\n              sample2,\\n              sx\\n            ),\\n            mix(\\n              sample1,\\n              sample0,\\n              sx\\n            ),\\n            sy\\n          );\\n        }\\n\\n\\n        \" + shader.fragmentShader;\n    shader.fragmentShader = shader.fragmentShader.replace('#include <emissivemap_fragment>', \"#include <emissivemap_fragment>\\n    \\n      float depthFactor = 1.0;\\n      float distortionFactor = 0.0;\\n      vec3 my_normal = vec3(0.0);\\n      float reflectorRoughnessFactor = roughness;\\n      vec3 coord = my_vUv.xyz / my_vUv.w;\\n\\n      #ifdef USE_DISTORTION\\n        distortionFactor = texture2D(distortionMap, vUv).r * distortion;\\n      #endif\\n\\n      #ifdef USE_NORMALMAP\\n        vec4 normalColor = texture2D(normalMap, vUv * normalScale);\\n        my_normal = normalize( vec3( normalColor.r * 2.0 - 1.0, normalColor.b ,  normalColor.g * 2.0 - 1.0 ) );\\n      #endif\\n\\n      #ifdef USE_ROUGHNESSMAP\\n        vec4 reflectorTexelRoughness = texture2D( roughnessMap, vUv );\\n        reflectorRoughnessFactor *= reflectorTexelRoughness.g;\\n      #endif\\n\\n      vec2 proj_vUv = coord.xy + coord.z * my_normal.xz * 0.01;\\n      proj_vUv.x += distortionFactor;\\n      proj_vUv.y += distortionFactor;\\n      \\n      float lod = 1.0 - min(1.0, mixBlur * reflectorRoughnessFactor);\\n\\n      #ifdef USE_DEPTH\\n        vec4 depth = texture2D(tDepth, proj_vUv);\\n        depthFactor = smoothstep(minDepthThreshold, maxDepthThreshold, 1.0-(depth.r * depth.a));\\n        depthFactor *= depthScale;\\n        depthFactor = max(0.0001, min(1.0, depthFactor + depthToBlurRatioBias));\\n      #endif\\n\\n      vec4 baseColor = texture2D(tDiffuse, proj_vUv);\\n      vec4 mixedColor;\\n\\n      float _lod = (1.0 - pow(1.0 - lod, 4.0)) * 8.0;\\n      if (_lod < 1.) {\\n        vec4 one = textureBicubic(u_mipmap_7, proj_vUv, u_mipmap_res_7);\\n        vec4 two = textureBicubic(u_mipmap_6, proj_vUv, u_mipmap_res_6);\\n        mixedColor = mix(one, two, _lod);\\n      } else if (_lod < 2.) {\\n        vec4 one = textureBicubic(u_mipmap_6, proj_vUv, u_mipmap_res_6);\\n        vec4 two = textureBicubic(u_mipmap_5, proj_vUv, u_mipmap_res_5);\\n        mixedColor = mix(one, two, _lod - 1.0);\\n      } else if (_lod < 3.) {\\n        vec4 one = textureBicubic(u_mipmap_5, proj_vUv, u_mipmap_res_5);\\n        vec4 two = textureBicubic(u_mipmap_4, proj_vUv, u_mipmap_res_4);\\n        mixedColor = mix(one, two, _lod - 2.0);\\n      } else if (_lod < 4.) {\\n        vec4 one = textureBicubic(u_mipmap_4, proj_vUv, u_mipmap_res_4);\\n        vec4 two = textureBicubic(u_mipmap_3, proj_vUv, u_mipmap_res_3);\\n        mixedColor = mix(one, two, _lod - 3.0);\\n      } else if (_lod < 5.) {\\n        vec4 one = textureBicubic(u_mipmap_3, proj_vUv, u_mipmap_res_3);\\n        vec4 two = textureBicubic(u_mipmap_2, proj_vUv, u_mipmap_res_2);\\n        mixedColor = mix(one, two, _lod - 4.0);\\n      } else if (_lod < 6.) {\\n        vec4 one = textureBicubic(u_mipmap_2, proj_vUv, u_mipmap_res_2);\\n        vec4 two = textureBicubic(u_mipmap_1, proj_vUv, u_mipmap_res_1);\\n        mixedColor = mix(one, two, _lod - 5.0);\\n      } else if (_lod < 7.) {\\n        vec4 one = textureBicubic(u_mipmap_1, proj_vUv, u_mipmap_res_1);\\n        vec4 two = textureBicubic(u_mipmap_0, proj_vUv, u_mipmap_res_0);\\n        mixedColor = mix(one, two, _lod - 6.0);\\n      } else {\\n        vec4 one = textureBicubic(u_mipmap_0, proj_vUv, u_mipmap_res_0);\\n        mixedColor = mix(one, baseColor, _lod - 7.0);\\n      }\\n\\n      mixedColor.rgb *= depthFactor;\\n      diffuseColor.rgb = diffuseColor.rgb * ((1.0 - min(1.0, mirror)) + mixedColor.rgb * mixStrength);     \\n      diffuseColor = sRGBToLinear(diffuseColor);\\n\\n      if (debug == 1) {\\n        diffuseColor = sRGBToLinear(vec4(vec3(depthFactor), 1.0));\\n      }\\n      if (debug == 2) {\\n        diffuseColor = sRGBToLinear(texture2D(tDiffuse, proj_vUv));\\n      }\\n      if (debug == 3) {\\n        diffuseColor = sRGBToLinear(texture2D(distortionMap, vUv));\\n      }\\n      if (debug == 4) {\\n        diffuseColor = sRGBToLinear(vec4(vec3(lod), 1.0));\\n      }\\n      \");\n  }\n\n  get tDiffuse() {\n    return this._tDiffuse.value;\n  }\n\n  set tDiffuse(v) {\n    this._tDiffuse.value = v;\n  }\n\n  get tDepth() {\n    return this._tDepth.value;\n  }\n\n  set tDepth(v) {\n    this._tDepth.value = v;\n  }\n\n  get distortionMap() {\n    return this._distortionMap.value;\n  }\n\n  set distortionMap(v) {\n    this._distortionMap.value = v;\n  }\n\n  get u_mipmap_0() {\n    return this._u_mipmap_0.value;\n  }\n\n  set u_mipmap_0(v) {\n    this._u_mipmap_0.value = v;\n  }\n\n  get u_mipmap_1() {\n    return this._u_mipmap_1.value;\n  }\n\n  set u_mipmap_1(v) {\n    this._u_mipmap_1.value = v;\n  }\n\n  get u_mipmap_2() {\n    return this._u_mipmap_2.value;\n  }\n\n  set u_mipmap_2(v) {\n    this._u_mipmap_2.value = v;\n  }\n\n  get u_mipmap_3() {\n    return this._u_mipmap_3.value;\n  }\n\n  set u_mipmap_3(v) {\n    this._u_mipmap_3.value = v;\n  }\n\n  get u_mipmap_4() {\n    return this._u_mipmap_4.value;\n  }\n\n  set u_mipmap_4(v) {\n    this._u_mipmap_4.value = v;\n  }\n\n  get u_mipmap_5() {\n    return this._u_mipmap_5.value;\n  }\n\n  set u_mipmap_5(v) {\n    this._u_mipmap_5.value = v;\n  }\n\n  get u_mipmap_6() {\n    return this._u_mipmap_6.value;\n  }\n\n  set u_mipmap_6(v) {\n    this._u_mipmap_6.value = v;\n  }\n\n  get u_mipmap_7() {\n    return this._u_mipmap_7.value;\n  }\n\n  set u_mipmap_7(v) {\n    this._u_mipmap_7.value = v;\n  }\n\n  get u_mipmap_res_0() {\n    return this._u_mipmap_res_0.value;\n  }\n\n  set u_mipmap_res_0(v) {\n    this._u_mipmap_res_0.value = v;\n  }\n\n  get u_mipmap_res_1() {\n    return this._u_mipmap_res_1.value;\n  }\n\n  set u_mipmap_res_1(v) {\n    this._u_mipmap_res_1.value = v;\n  }\n\n  get u_mipmap_res_2() {\n    return this._u_mipmap_res_2.value;\n  }\n\n  set u_mipmap_res_2(v) {\n    this._u_mipmap_res_2.value = v;\n  }\n\n  get u_mipmap_res_3() {\n    return this._u_mipmap_res_3.value;\n  }\n\n  set u_mipmap_res_3(v) {\n    this._u_mipmap_res_3.value = v;\n  }\n\n  get u_mipmap_res_4() {\n    return this._u_mipmap_res_4.value;\n  }\n\n  set u_mipmap_res_4(v) {\n    this._u_mipmap_res_4.value = v;\n  }\n\n  get u_mipmap_res_5() {\n    return this._u_mipmap_res_5.value;\n  }\n\n  set u_mipmap_res_5(v) {\n    this._u_mipmap_res_5.value = v;\n  }\n\n  get u_mipmap_res_6() {\n    return this._u_mipmap_res_6.value;\n  }\n\n  set u_mipmap_res_6(v) {\n    this._u_mipmap_res_6.value = v;\n  }\n\n  get u_mipmap_res_7() {\n    return this._u_mipmap_res_7.value;\n  }\n\n  set u_mipmap_res_7(v) {\n    this._u_mipmap_res_7.value = v;\n  }\n\n  get textureMatrix() {\n    return this._textureMatrix.value;\n  }\n\n  set textureMatrix(v) {\n    this._textureMatrix.value = v;\n  }\n\n  get mirror() {\n    return this._mirror.value;\n  }\n\n  set mirror(v) {\n    this._mirror.value = v;\n  }\n\n  get mixBlur() {\n    return this._mixBlur.value;\n  }\n\n  set mixBlur(v) {\n    this._mixBlur.value = v;\n  }\n\n  get mixStrength() {\n    return this._blurStrength.value;\n  }\n\n  set mixStrength(v) {\n    this._blurStrength.value = v;\n  }\n\n  get minDepthThreshold() {\n    return this._minDepthThreshold.value;\n  }\n\n  set minDepthThreshold(v) {\n    this._minDepthThreshold.value = v;\n  }\n\n  get maxDepthThreshold() {\n    return this._maxDepthThreshold.value;\n  }\n\n  set maxDepthThreshold(v) {\n    this._maxDepthThreshold.value = v;\n  }\n\n  get depthScale() {\n    return this._depthScale.value;\n  }\n\n  set depthScale(v) {\n    this._depthScale.value = v;\n  }\n\n  get debug() {\n    return this._debug.value;\n  }\n\n  set debug(v) {\n    this._debug.value = v;\n  }\n\n  get depthToBlurRatioBias() {\n    return this._depthToBlurRatioBias.value;\n  }\n\n  set depthToBlurRatioBias(v) {\n    this._depthToBlurRatioBias.value = v;\n  }\n\n  get distortion() {\n    return this._distortion.value;\n  }\n\n  set distortion(v) {\n    this._distortion.value = v;\n  }\n\n}\n\nexport { MeshReflectorMaterial };","map":{"version":3,"sources":["/Users/haiakablan/Documents/לוטוס/קורס/Architecture-web/node_modules/@react-three/drei/materials/MeshReflectorMaterial.js"],"names":["MeshStandardMaterial","_defineProperty","MeshReflectorMaterial","constructor","parameters","value","setValues","onBeforeCompile","shader","_shader$defines","defines","USE_UV","uniforms","debug","_debug","tDiffuse","_tDiffuse","tDepth","_tDepth","distortionMap","_distortionMap","u_mipmap_0","_u_mipmap_0","u_mipmap_1","_u_mipmap_1","u_mipmap_2","_u_mipmap_2","u_mipmap_3","_u_mipmap_3","u_mipmap_4","_u_mipmap_4","u_mipmap_5","_u_mipmap_5","u_mipmap_6","_u_mipmap_6","u_mipmap_7","_u_mipmap_7","u_mipmap_res_0","_u_mipmap_res_0","u_mipmap_res_1","_u_mipmap_res_1","u_mipmap_res_2","_u_mipmap_res_2","u_mipmap_res_3","_u_mipmap_res_3","u_mipmap_res_4","_u_mipmap_res_4","u_mipmap_res_5","_u_mipmap_res_5","u_mipmap_res_6","_u_mipmap_res_6","u_mipmap_res_7","_u_mipmap_res_7","textureMatrix","_textureMatrix","mirror","_mirror","mixBlur","_mixBlur","mixStrength","_blurStrength","minDepthThreshold","_minDepthThreshold","maxDepthThreshold","_maxDepthThreshold","depthScale","_depthScale","depthToBlurRatioBias","_depthToBlurRatioBias","distortion","_distortion","vertexShader","replace","fragmentShader","v"],"mappings":"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","sourcesContent":["import { MeshStandardMaterial } from 'three';\nimport _defineProperty from '@babel/runtime/helpers/esm/defineProperty';\n\nclass MeshReflectorMaterial extends MeshStandardMaterial {\n  constructor(parameters = {}) {\n    super(parameters);\n\n    _defineProperty(this, \"_debug\", {\n      value: 0\n    });\n\n    _defineProperty(this, \"_tDepth\", {\n      value: null\n    });\n\n    _defineProperty(this, \"_distortionMap\", {\n      value: null\n    });\n\n    _defineProperty(this, \"_tDiffuse\", {\n      value: null\n    });\n\n    _defineProperty(this, \"_u_mipmap_0\", {\n      value: null\n    });\n\n    _defineProperty(this, \"_u_mipmap_1\", {\n      value: null\n    });\n\n    _defineProperty(this, \"_u_mipmap_2\", {\n      value: null\n    });\n\n    _defineProperty(this, \"_u_mipmap_3\", {\n      value: null\n    });\n\n    _defineProperty(this, \"_u_mipmap_4\", {\n      value: null\n    });\n\n    _defineProperty(this, \"_u_mipmap_5\", {\n      value: null\n    });\n\n    _defineProperty(this, \"_u_mipmap_6\", {\n      value: null\n    });\n\n    _defineProperty(this, \"_u_mipmap_7\", {\n      value: null\n    });\n\n    _defineProperty(this, \"_u_mipmap_res_0\", {\n      value: null\n    });\n\n    _defineProperty(this, \"_u_mipmap_res_1\", {\n      value: null\n    });\n\n    _defineProperty(this, \"_u_mipmap_res_2\", {\n      value: null\n    });\n\n    _defineProperty(this, \"_u_mipmap_res_3\", {\n      value: null\n    });\n\n    _defineProperty(this, \"_u_mipmap_res_4\", {\n      value: null\n    });\n\n    _defineProperty(this, \"_u_mipmap_res_5\", {\n      value: null\n    });\n\n    _defineProperty(this, \"_u_mipmap_res_6\", {\n      value: null\n    });\n\n    _defineProperty(this, \"_u_mipmap_res_7\", {\n      value: null\n    });\n\n    _defineProperty(this, \"_textureMatrix\", {\n      value: null\n    });\n\n    _defineProperty(this, \"_mirror\", {\n      value: 0.0\n    });\n\n    _defineProperty(this, \"_mixBlur\", {\n      value: 0.0\n    });\n\n    _defineProperty(this, \"_blurStrength\", {\n      value: 0.5\n    });\n\n    _defineProperty(this, \"_minDepthThreshold\", {\n      value: 0.9\n    });\n\n    _defineProperty(this, \"_maxDepthThreshold\", {\n      value: 1\n    });\n\n    _defineProperty(this, \"_depthScale\", {\n      value: 0\n    });\n\n    _defineProperty(this, \"_depthToBlurRatioBias\", {\n      value: 0.25\n    });\n\n    _defineProperty(this, \"_distortion\", {\n      value: 1\n    });\n\n    this.setValues(parameters);\n  }\n\n  onBeforeCompile(shader) {\n    var _shader$defines;\n\n    if (!((_shader$defines = shader.defines) == null ? void 0 : _shader$defines.USE_UV)) {\n      shader.defines.USE_UV = '';\n    }\n\n    shader.uniforms.debug = this._debug;\n    shader.uniforms.tDiffuse = this._tDiffuse;\n    shader.uniforms.tDepth = this._tDepth;\n    shader.uniforms.distortionMap = this._distortionMap;\n    shader.uniforms.u_mipmap_0 = this._u_mipmap_0;\n    shader.uniforms.u_mipmap_1 = this._u_mipmap_1;\n    shader.uniforms.u_mipmap_2 = this._u_mipmap_2;\n    shader.uniforms.u_mipmap_3 = this._u_mipmap_3;\n    shader.uniforms.u_mipmap_4 = this._u_mipmap_4;\n    shader.uniforms.u_mipmap_5 = this._u_mipmap_5;\n    shader.uniforms.u_mipmap_6 = this._u_mipmap_6;\n    shader.uniforms.u_mipmap_7 = this._u_mipmap_7;\n    shader.uniforms.u_mipmap_res_0 = this._u_mipmap_res_0;\n    shader.uniforms.u_mipmap_res_1 = this._u_mipmap_res_1;\n    shader.uniforms.u_mipmap_res_2 = this._u_mipmap_res_2;\n    shader.uniforms.u_mipmap_res_3 = this._u_mipmap_res_3;\n    shader.uniforms.u_mipmap_res_4 = this._u_mipmap_res_4;\n    shader.uniforms.u_mipmap_res_5 = this._u_mipmap_res_5;\n    shader.uniforms.u_mipmap_res_6 = this._u_mipmap_res_6;\n    shader.uniforms.u_mipmap_res_7 = this._u_mipmap_res_7;\n    shader.uniforms.textureMatrix = this._textureMatrix;\n    shader.uniforms.mirror = this._mirror;\n    shader.uniforms.mixBlur = this._mixBlur;\n    shader.uniforms.mixStrength = this._blurStrength;\n    shader.uniforms.minDepthThreshold = this._minDepthThreshold;\n    shader.uniforms.maxDepthThreshold = this._maxDepthThreshold;\n    shader.uniforms.depthScale = this._depthScale;\n    shader.uniforms.depthToBlurRatioBias = this._depthToBlurRatioBias;\n    shader.uniforms.distortion = this._distortion;\n    shader.vertexShader = \"\\n        uniform mat4 textureMatrix;\\n        varying vec4 my_vUv;     \\n      \" + shader.vertexShader;\n    shader.vertexShader = shader.vertexShader.replace('#include <project_vertex>', \"#include <project_vertex>\\n        my_vUv = textureMatrix * vec4( position, 1.0 );\\n        gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\");\n    shader.fragmentShader = \"\\n        uniform int debug;\\n        uniform sampler2D tDiffuse;\\n        uniform sampler2D tDepth;\\n        uniform sampler2D distortionMap;\\n        uniform sampler2D u_mipmap_0;\\n        uniform sampler2D u_mipmap_1;\\n        uniform sampler2D u_mipmap_2;\\n        uniform sampler2D u_mipmap_3;\\n        uniform sampler2D u_mipmap_4;\\n        uniform sampler2D u_mipmap_5;\\n        uniform sampler2D u_mipmap_6;\\n        uniform sampler2D u_mipmap_7;\\n        uniform vec2 u_mipmap_res_0;\\n        uniform vec2 u_mipmap_res_1;\\n        uniform vec2 u_mipmap_res_2;\\n        uniform vec2 u_mipmap_res_3;\\n        uniform vec2 u_mipmap_res_4;\\n        uniform vec2 u_mipmap_res_5;\\n        uniform vec2 u_mipmap_res_6;\\n        uniform vec2 u_mipmap_res_7;\\n        uniform float distortion;\\n        uniform float cameraNear;\\n\\t\\t\\t  uniform float cameraFar;\\n        uniform float mixBlur;\\n        uniform float mirror;\\n        uniform float mixStrength;\\n        uniform float minDepthThreshold;\\n        uniform float maxDepthThreshold;\\n        uniform float depthScale;\\n        uniform float depthToBlurRatioBias;\\n        varying vec4 my_vUv;  \\n        \\n        // from http://www.java-gaming.org/index.php?topic=35123.0\\n        vec4 cubic( float v ) {\\n          vec4 n = vec4( 1.0, 2.0, 3.0, 4.0 ) - v;\\n          vec4 s = n * n * n;\\n          float x = s.x;\\n          float y = s.y - 4.0 * s.x;\\n          float z = s.z - 4.0 * s.y + 6.0 * s.x;\\n          float w = 6.0 - x - y - z;\\n          return vec4( x, y, z, w ) * ( 1.0 / 6.0 );\\n        }\\n        \\n        vec4 textureBicubic( sampler2D sampler, vec2 texCoords, vec2 texSize ) {\\n          vec2 invTexSize = 1.0 / texSize;\\n          texCoords = texCoords * texSize - 0.5;\\n          vec2 fxy = fract( texCoords );\\n          texCoords -= fxy;\\n\\n          vec4 xcubic = cubic( fxy.x );\\n          vec4 ycubic = cubic( fxy.y );\\n          vec4 c = texCoords.xxyy + vec2 ( - 0.5, + 1.5 ).xyxy;\\n          vec4 s = vec4( xcubic.xz + xcubic.yw, ycubic.xz + ycubic.yw );\\n\\n          vec4 offset = c + vec4( xcubic.yw, ycubic.yw ) / s;\\n          offset *= invTexSize.xxyy;\\n        \\n          vec4 sample0 = texture2D( sampler, offset.xz);\\n          vec4 sample1 = texture2D( sampler, offset.yz);\\n          vec4 sample2 = texture2D( sampler, offset.xw);\\n          vec4 sample3 = texture2D( sampler, offset.yw);\\n        \\n          float sx = s.x / ( s.x + s.y );\\n          float sy = s.z / ( s.z + s.w );\\n\\n          return mix(\\n            mix(\\n              sample3,\\n              sample2,\\n              sx\\n            ),\\n            mix(\\n              sample1,\\n              sample0,\\n              sx\\n            ),\\n            sy\\n          );\\n        }\\n\\n\\n        \" + shader.fragmentShader;\n    shader.fragmentShader = shader.fragmentShader.replace('#include <emissivemap_fragment>', \"#include <emissivemap_fragment>\\n    \\n      float depthFactor = 1.0;\\n      float distortionFactor = 0.0;\\n      vec3 my_normal = vec3(0.0);\\n      float reflectorRoughnessFactor = roughness;\\n      vec3 coord = my_vUv.xyz / my_vUv.w;\\n\\n      #ifdef USE_DISTORTION\\n        distortionFactor = texture2D(distortionMap, vUv).r * distortion;\\n      #endif\\n\\n      #ifdef USE_NORMALMAP\\n        vec4 normalColor = texture2D(normalMap, vUv * normalScale);\\n        my_normal = normalize( vec3( normalColor.r * 2.0 - 1.0, normalColor.b ,  normalColor.g * 2.0 - 1.0 ) );\\n      #endif\\n\\n      #ifdef USE_ROUGHNESSMAP\\n        vec4 reflectorTexelRoughness = texture2D( roughnessMap, vUv );\\n        reflectorRoughnessFactor *= reflectorTexelRoughness.g;\\n      #endif\\n\\n      vec2 proj_vUv = coord.xy + coord.z * my_normal.xz * 0.01;\\n      proj_vUv.x += distortionFactor;\\n      proj_vUv.y += distortionFactor;\\n      \\n      float lod = 1.0 - min(1.0, mixBlur * reflectorRoughnessFactor);\\n\\n      #ifdef USE_DEPTH\\n        vec4 depth = texture2D(tDepth, proj_vUv);\\n        depthFactor = smoothstep(minDepthThreshold, maxDepthThreshold, 1.0-(depth.r * depth.a));\\n        depthFactor *= depthScale;\\n        depthFactor = max(0.0001, min(1.0, depthFactor + depthToBlurRatioBias));\\n      #endif\\n\\n      vec4 baseColor = texture2D(tDiffuse, proj_vUv);\\n      vec4 mixedColor;\\n\\n      float _lod = (1.0 - pow(1.0 - lod, 4.0)) * 8.0;\\n      if (_lod < 1.) {\\n        vec4 one = textureBicubic(u_mipmap_7, proj_vUv, u_mipmap_res_7);\\n        vec4 two = textureBicubic(u_mipmap_6, proj_vUv, u_mipmap_res_6);\\n        mixedColor = mix(one, two, _lod);\\n      } else if (_lod < 2.) {\\n        vec4 one = textureBicubic(u_mipmap_6, proj_vUv, u_mipmap_res_6);\\n        vec4 two = textureBicubic(u_mipmap_5, proj_vUv, u_mipmap_res_5);\\n        mixedColor = mix(one, two, _lod - 1.0);\\n      } else if (_lod < 3.) {\\n        vec4 one = textureBicubic(u_mipmap_5, proj_vUv, u_mipmap_res_5);\\n        vec4 two = textureBicubic(u_mipmap_4, proj_vUv, u_mipmap_res_4);\\n        mixedColor = mix(one, two, _lod - 2.0);\\n      } else if (_lod < 4.) {\\n        vec4 one = textureBicubic(u_mipmap_4, proj_vUv, u_mipmap_res_4);\\n        vec4 two = textureBicubic(u_mipmap_3, proj_vUv, u_mipmap_res_3);\\n        mixedColor = mix(one, two, _lod - 3.0);\\n      } else if (_lod < 5.) {\\n        vec4 one = textureBicubic(u_mipmap_3, proj_vUv, u_mipmap_res_3);\\n        vec4 two = textureBicubic(u_mipmap_2, proj_vUv, u_mipmap_res_2);\\n        mixedColor = mix(one, two, _lod - 4.0);\\n      } else if (_lod < 6.) {\\n        vec4 one = textureBicubic(u_mipmap_2, proj_vUv, u_mipmap_res_2);\\n        vec4 two = textureBicubic(u_mipmap_1, proj_vUv, u_mipmap_res_1);\\n        mixedColor = mix(one, two, _lod - 5.0);\\n      } else if (_lod < 7.) {\\n        vec4 one = textureBicubic(u_mipmap_1, proj_vUv, u_mipmap_res_1);\\n        vec4 two = textureBicubic(u_mipmap_0, proj_vUv, u_mipmap_res_0);\\n        mixedColor = mix(one, two, _lod - 6.0);\\n      } else {\\n        vec4 one = textureBicubic(u_mipmap_0, proj_vUv, u_mipmap_res_0);\\n        mixedColor = mix(one, baseColor, _lod - 7.0);\\n      }\\n\\n      mixedColor.rgb *= depthFactor;\\n      diffuseColor.rgb = diffuseColor.rgb * ((1.0 - min(1.0, mirror)) + mixedColor.rgb * mixStrength);     \\n      diffuseColor = sRGBToLinear(diffuseColor);\\n\\n      if (debug == 1) {\\n        diffuseColor = sRGBToLinear(vec4(vec3(depthFactor), 1.0));\\n      }\\n      if (debug == 2) {\\n        diffuseColor = sRGBToLinear(texture2D(tDiffuse, proj_vUv));\\n      }\\n      if (debug == 3) {\\n        diffuseColor = sRGBToLinear(texture2D(distortionMap, vUv));\\n      }\\n      if (debug == 4) {\\n        diffuseColor = sRGBToLinear(vec4(vec3(lod), 1.0));\\n      }\\n      \");\n  }\n\n  get tDiffuse() {\n    return this._tDiffuse.value;\n  }\n\n  set tDiffuse(v) {\n    this._tDiffuse.value = v;\n  }\n\n  get tDepth() {\n    return this._tDepth.value;\n  }\n\n  set tDepth(v) {\n    this._tDepth.value = v;\n  }\n\n  get distortionMap() {\n    return this._distortionMap.value;\n  }\n\n  set distortionMap(v) {\n    this._distortionMap.value = v;\n  }\n\n  get u_mipmap_0() {\n    return this._u_mipmap_0.value;\n  }\n\n  set u_mipmap_0(v) {\n    this._u_mipmap_0.value = v;\n  }\n\n  get u_mipmap_1() {\n    return this._u_mipmap_1.value;\n  }\n\n  set u_mipmap_1(v) {\n    this._u_mipmap_1.value = v;\n  }\n\n  get u_mipmap_2() {\n    return this._u_mipmap_2.value;\n  }\n\n  set u_mipmap_2(v) {\n    this._u_mipmap_2.value = v;\n  }\n\n  get u_mipmap_3() {\n    return this._u_mipmap_3.value;\n  }\n\n  set u_mipmap_3(v) {\n    this._u_mipmap_3.value = v;\n  }\n\n  get u_mipmap_4() {\n    return this._u_mipmap_4.value;\n  }\n\n  set u_mipmap_4(v) {\n    this._u_mipmap_4.value = v;\n  }\n\n  get u_mipmap_5() {\n    return this._u_mipmap_5.value;\n  }\n\n  set u_mipmap_5(v) {\n    this._u_mipmap_5.value = v;\n  }\n\n  get u_mipmap_6() {\n    return this._u_mipmap_6.value;\n  }\n\n  set u_mipmap_6(v) {\n    this._u_mipmap_6.value = v;\n  }\n\n  get u_mipmap_7() {\n    return this._u_mipmap_7.value;\n  }\n\n  set u_mipmap_7(v) {\n    this._u_mipmap_7.value = v;\n  }\n\n  get u_mipmap_res_0() {\n    return this._u_mipmap_res_0.value;\n  }\n\n  set u_mipmap_res_0(v) {\n    this._u_mipmap_res_0.value = v;\n  }\n\n  get u_mipmap_res_1() {\n    return this._u_mipmap_res_1.value;\n  }\n\n  set u_mipmap_res_1(v) {\n    this._u_mipmap_res_1.value = v;\n  }\n\n  get u_mipmap_res_2() {\n    return this._u_mipmap_res_2.value;\n  }\n\n  set u_mipmap_res_2(v) {\n    this._u_mipmap_res_2.value = v;\n  }\n\n  get u_mipmap_res_3() {\n    return this._u_mipmap_res_3.value;\n  }\n\n  set u_mipmap_res_3(v) {\n    this._u_mipmap_res_3.value = v;\n  }\n\n  get u_mipmap_res_4() {\n    return this._u_mipmap_res_4.value;\n  }\n\n  set u_mipmap_res_4(v) {\n    this._u_mipmap_res_4.value = v;\n  }\n\n  get u_mipmap_res_5() {\n    return this._u_mipmap_res_5.value;\n  }\n\n  set u_mipmap_res_5(v) {\n    this._u_mipmap_res_5.value = v;\n  }\n\n  get u_mipmap_res_6() {\n    return this._u_mipmap_res_6.value;\n  }\n\n  set u_mipmap_res_6(v) {\n    this._u_mipmap_res_6.value = v;\n  }\n\n  get u_mipmap_res_7() {\n    return this._u_mipmap_res_7.value;\n  }\n\n  set u_mipmap_res_7(v) {\n    this._u_mipmap_res_7.value = v;\n  }\n\n  get textureMatrix() {\n    return this._textureMatrix.value;\n  }\n\n  set textureMatrix(v) {\n    this._textureMatrix.value = v;\n  }\n\n  get mirror() {\n    return this._mirror.value;\n  }\n\n  set mirror(v) {\n    this._mirror.value = v;\n  }\n\n  get mixBlur() {\n    return this._mixBlur.value;\n  }\n\n  set mixBlur(v) {\n    this._mixBlur.value = v;\n  }\n\n  get mixStrength() {\n    return this._blurStrength.value;\n  }\n\n  set mixStrength(v) {\n    this._blurStrength.value = v;\n  }\n\n  get minDepthThreshold() {\n    return this._minDepthThreshold.value;\n  }\n\n  set minDepthThreshold(v) {\n    this._minDepthThreshold.value = v;\n  }\n\n  get maxDepthThreshold() {\n    return this._maxDepthThreshold.value;\n  }\n\n  set maxDepthThreshold(v) {\n    this._maxDepthThreshold.value = v;\n  }\n\n  get depthScale() {\n    return this._depthScale.value;\n  }\n\n  set depthScale(v) {\n    this._depthScale.value = v;\n  }\n\n  get debug() {\n    return this._debug.value;\n  }\n\n  set debug(v) {\n    this._debug.value = v;\n  }\n\n  get depthToBlurRatioBias() {\n    return this._depthToBlurRatioBias.value;\n  }\n\n  set depthToBlurRatioBias(v) {\n    this._depthToBlurRatioBias.value = v;\n  }\n\n  get distortion() {\n    return this._distortion.value;\n  }\n\n  set distortion(v) {\n    this._distortion.value = v;\n  }\n\n}\n\nexport { MeshReflectorMaterial };\n"]},"metadata":{},"sourceType":"module"}