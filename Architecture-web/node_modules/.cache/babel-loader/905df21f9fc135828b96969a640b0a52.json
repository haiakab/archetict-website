{"ast":null,"code":"import { forwardRef, useRef, useState, useImperativeHandle } from 'react';\nimport { useThree, useFrame } from '@react-three/fiber';\nimport { SimplexNoise } from 'three-stdlib';\nconst CameraShake = /*#__PURE__*/forwardRef(({\n  intensity = 1,\n  decay,\n  decayRate = 0.65,\n  maxYaw = 0.1,\n  maxPitch = 0.1,\n  maxRoll = 0.1,\n  yawFrequency = 1,\n  pitchFrequency = 1,\n  rollFrequency = 1,\n  additive\n}, ref) => {\n  const camera = useThree(state => state.camera);\n  const intensityRef = useRef(intensity);\n  const [yawNoise] = useState(() => new SimplexNoise());\n  const [pitchNoise] = useState(() => new SimplexNoise());\n  const [rollNoise] = useState(() => new SimplexNoise());\n\n  const constrainIntensity = () => {\n    if (intensityRef.current < 0 || intensityRef.current > 1) {\n      intensityRef.current = intensityRef.current < 0 ? 0 : 1;\n    }\n  };\n\n  useImperativeHandle(ref, () => ({\n    getIntensity: () => intensityRef.current,\n    setIntensity: val => {\n      intensityRef.current = val;\n      constrainIntensity();\n    }\n  }), []);\n  useFrame(({\n    clock\n  }, delta) => {\n    const shake = Math.pow(intensityRef.current, 2);\n    const yaw = maxYaw * shake * yawNoise.noise(clock.elapsedTime * yawFrequency, 1);\n    const pitch = maxPitch * shake * pitchNoise.noise(clock.elapsedTime * pitchFrequency, 1);\n    const roll = maxRoll * shake * rollNoise.noise(clock.elapsedTime * rollFrequency, 1);\n\n    if (additive) {\n      camera.rotation.x += pitch;\n      camera.rotation.y += yaw;\n      camera.rotation.z += roll;\n    } else {\n      camera.rotation.set(pitch, yaw, roll);\n    }\n\n    if (decay && intensityRef.current > 0) {\n      intensityRef.current -= decayRate * delta;\n      constrainIntensity();\n    }\n  });\n  return null;\n});\nexport { CameraShake };","map":{"version":3,"sources":["/Users/haiakablan/Documents/לוטוס/קורס/Architecture-web/node_modules/@react-three/drei/core/CameraShake.js"],"names":["forwardRef","useRef","useState","useImperativeHandle","useThree","useFrame","SimplexNoise","CameraShake","intensity","decay","decayRate","maxYaw","maxPitch","maxRoll","yawFrequency","pitchFrequency","rollFrequency","additive","ref","camera","state","intensityRef","yawNoise","pitchNoise","rollNoise","constrainIntensity","current","getIntensity","setIntensity","val","clock","delta","shake","Math","pow","yaw","noise","elapsedTime","pitch","roll","rotation","x","y","z","set"],"mappings":"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","sourcesContent":["import { forwardRef, useRef, useState, useImperativeHandle } from 'react';\nimport { useThree, useFrame } from '@react-three/fiber';\nimport { SimplexNoise } from 'three-stdlib';\n\nconst CameraShake = /*#__PURE__*/forwardRef(({\n  intensity = 1,\n  decay,\n  decayRate = 0.65,\n  maxYaw = 0.1,\n  maxPitch = 0.1,\n  maxRoll = 0.1,\n  yawFrequency = 1,\n  pitchFrequency = 1,\n  rollFrequency = 1,\n  additive\n}, ref) => {\n  const camera = useThree(state => state.camera);\n  const intensityRef = useRef(intensity);\n  const [yawNoise] = useState(() => new SimplexNoise());\n  const [pitchNoise] = useState(() => new SimplexNoise());\n  const [rollNoise] = useState(() => new SimplexNoise());\n\n  const constrainIntensity = () => {\n    if (intensityRef.current < 0 || intensityRef.current > 1) {\n      intensityRef.current = intensityRef.current < 0 ? 0 : 1;\n    }\n  };\n\n  useImperativeHandle(ref, () => ({\n    getIntensity: () => intensityRef.current,\n    setIntensity: val => {\n      intensityRef.current = val;\n      constrainIntensity();\n    }\n  }), []);\n  useFrame(({\n    clock\n  }, delta) => {\n    const shake = Math.pow(intensityRef.current, 2);\n    const yaw = maxYaw * shake * yawNoise.noise(clock.elapsedTime * yawFrequency, 1);\n    const pitch = maxPitch * shake * pitchNoise.noise(clock.elapsedTime * pitchFrequency, 1);\n    const roll = maxRoll * shake * rollNoise.noise(clock.elapsedTime * rollFrequency, 1);\n\n    if (additive) {\n      camera.rotation.x += pitch;\n      camera.rotation.y += yaw;\n      camera.rotation.z += roll;\n    } else {\n      camera.rotation.set(pitch, yaw, roll);\n    }\n\n    if (decay && intensityRef.current > 0) {\n      intensityRef.current -= decayRate * delta;\n      constrainIntensity();\n    }\n  });\n  return null;\n});\n\nexport { CameraShake };\n"]},"metadata":{},"sourceType":"module"}