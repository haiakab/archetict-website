{"ast":null,"code":"import { snapshot, subscribe, getVersion } from 'valtio/vanilla';\nexport * from 'valtio/vanilla';\nimport { useRef, useState, useEffect, useReducer, useCallback, useMemo, useLayoutEffect, useDebugValue } from 'react';\nimport { isDeepChanged, createDeepProxy, affectedToPathList } from 'proxy-compare';\nconst TARGET = Symbol();\nconst GET_VERSION = Symbol();\n\nconst createMutableSource = (target, getVersion) => ({\n  [TARGET]: target,\n  [GET_VERSION]: getVersion\n});\n\nconst useMutableSource = (source, getSnapshot, subscribe) => {\n  const lastVersion = useRef(0);\n  const currentVersion = source[GET_VERSION](source[TARGET]);\n  const [state, setState] = useState(() => [source, getSnapshot, subscribe, currentVersion, getSnapshot(source[TARGET])]);\n  let currentSnapshot = state[4];\n\n  if (state[0] !== source || state[1] !== getSnapshot || state[2] !== subscribe) {\n    currentSnapshot = getSnapshot(source[TARGET]);\n    setState([source, getSnapshot, subscribe, currentVersion, currentSnapshot]);\n  } else if (currentVersion !== state[3] && currentVersion !== lastVersion.current) {\n    currentSnapshot = getSnapshot(source[TARGET]);\n\n    if (!Object.is(currentSnapshot, state[4])) {\n      setState([source, getSnapshot, subscribe, currentVersion, currentSnapshot]);\n    }\n  }\n\n  useEffect(() => {\n    let didUnsubscribe = false;\n\n    const checkForUpdates = () => {\n      if (didUnsubscribe) {\n        return;\n      }\n\n      try {\n        const nextSnapshot = getSnapshot(source[TARGET]);\n        const nextVersion = source[GET_VERSION](source[TARGET]);\n        lastVersion.current = nextVersion;\n        setState(prev => {\n          if (prev[0] !== source || prev[1] !== getSnapshot || prev[2] !== subscribe) {\n            return prev;\n          }\n\n          if (Object.is(prev[4], nextSnapshot)) {\n            return prev;\n          }\n\n          return [prev[0], prev[1], prev[2], nextVersion, nextSnapshot];\n        });\n      } catch (e) {\n        setState(prev => [...prev]);\n      }\n    };\n\n    const unsubscribe = subscribe(source[TARGET], checkForUpdates);\n    checkForUpdates();\n    return () => {\n      didUnsubscribe = true;\n      unsubscribe();\n    };\n  }, [source, getSnapshot, subscribe]);\n  return currentSnapshot;\n};\n\nconst isSSR = typeof window === \"undefined\" || !window.navigator || /ServerSideRendering|^Deno\\//.test(window.navigator.userAgent);\nconst useIsomorphicLayoutEffect = isSSR ? useEffect : useLayoutEffect;\n\nconst useAffectedDebugValue = (state, affected) => {\n  const pathList = useRef();\n  useEffect(() => {\n    pathList.current = affectedToPathList(state, affected);\n  });\n  useDebugValue(pathList.current);\n};\n\nconst mutableSourceCache = new WeakMap();\n\nconst getMutableSource = proxyObject => {\n  if (!mutableSourceCache.has(proxyObject)) {\n    mutableSourceCache.set(proxyObject, createMutableSource(proxyObject, getVersion));\n  }\n\n  return mutableSourceCache.get(proxyObject);\n};\n\nconst useSnapshot = (proxyObject, options) => {\n  const [, forceUpdate] = useReducer(c => c + 1, 0);\n  const affected = new WeakMap();\n  const lastAffected = useRef();\n  const prevSnapshot = useRef();\n  const lastSnapshot = useRef();\n  useIsomorphicLayoutEffect(() => {\n    lastSnapshot.current = prevSnapshot.current = snapshot(proxyObject);\n  }, [proxyObject]);\n  useIsomorphicLayoutEffect(() => {\n    lastAffected.current = affected;\n\n    if (prevSnapshot.current !== lastSnapshot.current && isDeepChanged(prevSnapshot.current, lastSnapshot.current, affected, new WeakMap())) {\n      prevSnapshot.current = lastSnapshot.current;\n      forceUpdate();\n    }\n  });\n  const notifyInSync = options == null ? void 0 : options.sync;\n  const sub = useCallback((proxyObject2, cb) => subscribe(proxyObject2, () => {\n    const nextSnapshot = snapshot(proxyObject2);\n    lastSnapshot.current = nextSnapshot;\n\n    try {\n      if (lastAffected.current && !isDeepChanged(prevSnapshot.current, nextSnapshot, lastAffected.current, new WeakMap())) {\n        return;\n      }\n    } catch (e) {}\n\n    prevSnapshot.current = nextSnapshot;\n    cb();\n  }, notifyInSync), [notifyInSync]);\n  const currSnapshot = useMutableSource(getMutableSource(proxyObject), snapshot, sub);\n\n  if (typeof process === \"object\" && process.env.NODE_ENV !== \"production\") {\n    useAffectedDebugValue(currSnapshot, affected);\n  }\n\n  const proxyCache = useMemo(() => new WeakMap(), []);\n  return createDeepProxy(currSnapshot, affected, proxyCache);\n};\n\nexport { useSnapshot };","map":{"version":3,"sources":["/Users/haiakablan/Documents/לוטוס/קורס/Architecture-web/node_modules/valtio/esm/index.js"],"names":["snapshot","subscribe","getVersion","useRef","useState","useEffect","useReducer","useCallback","useMemo","useLayoutEffect","useDebugValue","isDeepChanged","createDeepProxy","affectedToPathList","TARGET","Symbol","GET_VERSION","createMutableSource","target","useMutableSource","source","getSnapshot","lastVersion","currentVersion","state","setState","currentSnapshot","current","Object","is","didUnsubscribe","checkForUpdates","nextSnapshot","nextVersion","prev","e","unsubscribe","isSSR","window","navigator","test","userAgent","useIsomorphicLayoutEffect","useAffectedDebugValue","affected","pathList","mutableSourceCache","WeakMap","getMutableSource","proxyObject","has","set","get","useSnapshot","options","forceUpdate","c","lastAffected","prevSnapshot","lastSnapshot","notifyInSync","sync","sub","proxyObject2","cb","currSnapshot","process","env","NODE_ENV","proxyCache"],"mappings":"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","sourcesContent":["import { snapshot, subscribe, getVersion } from 'valtio/vanilla';\nexport * from 'valtio/vanilla';\nimport { useRef, useState, useEffect, useReducer, useCallback, useMemo, useLayoutEffect, useDebugValue } from 'react';\nimport { isDeepChanged, createDeepProxy, affectedToPathList } from 'proxy-compare';\n\nconst TARGET = Symbol();\nconst GET_VERSION = Symbol();\nconst createMutableSource = (target, getVersion) => ({\n  [TARGET]: target,\n  [GET_VERSION]: getVersion\n});\nconst useMutableSource = (source, getSnapshot, subscribe) => {\n  const lastVersion = useRef(0);\n  const currentVersion = source[GET_VERSION](source[TARGET]);\n  const [state, setState] = useState(() => [\n    source,\n    getSnapshot,\n    subscribe,\n    currentVersion,\n    getSnapshot(source[TARGET])\n  ]);\n  let currentSnapshot = state[4];\n  if (state[0] !== source || state[1] !== getSnapshot || state[2] !== subscribe) {\n    currentSnapshot = getSnapshot(source[TARGET]);\n    setState([\n      source,\n      getSnapshot,\n      subscribe,\n      currentVersion,\n      currentSnapshot\n    ]);\n  } else if (currentVersion !== state[3] && currentVersion !== lastVersion.current) {\n    currentSnapshot = getSnapshot(source[TARGET]);\n    if (!Object.is(currentSnapshot, state[4])) {\n      setState([\n        source,\n        getSnapshot,\n        subscribe,\n        currentVersion,\n        currentSnapshot\n      ]);\n    }\n  }\n  useEffect(() => {\n    let didUnsubscribe = false;\n    const checkForUpdates = () => {\n      if (didUnsubscribe) {\n        return;\n      }\n      try {\n        const nextSnapshot = getSnapshot(source[TARGET]);\n        const nextVersion = source[GET_VERSION](source[TARGET]);\n        lastVersion.current = nextVersion;\n        setState((prev) => {\n          if (prev[0] !== source || prev[1] !== getSnapshot || prev[2] !== subscribe) {\n            return prev;\n          }\n          if (Object.is(prev[4], nextSnapshot)) {\n            return prev;\n          }\n          return [\n            prev[0],\n            prev[1],\n            prev[2],\n            nextVersion,\n            nextSnapshot\n          ];\n        });\n      } catch (e) {\n        setState((prev) => [...prev]);\n      }\n    };\n    const unsubscribe = subscribe(source[TARGET], checkForUpdates);\n    checkForUpdates();\n    return () => {\n      didUnsubscribe = true;\n      unsubscribe();\n    };\n  }, [source, getSnapshot, subscribe]);\n  return currentSnapshot;\n};\n\nconst isSSR = typeof window === \"undefined\" || !window.navigator || /ServerSideRendering|^Deno\\//.test(window.navigator.userAgent);\nconst useIsomorphicLayoutEffect = isSSR ? useEffect : useLayoutEffect;\nconst useAffectedDebugValue = (state, affected) => {\n  const pathList = useRef();\n  useEffect(() => {\n    pathList.current = affectedToPathList(state, affected);\n  });\n  useDebugValue(pathList.current);\n};\nconst mutableSourceCache = new WeakMap();\nconst getMutableSource = (proxyObject) => {\n  if (!mutableSourceCache.has(proxyObject)) {\n    mutableSourceCache.set(proxyObject, createMutableSource(proxyObject, getVersion));\n  }\n  return mutableSourceCache.get(proxyObject);\n};\nconst useSnapshot = (proxyObject, options) => {\n  const [, forceUpdate] = useReducer((c) => c + 1, 0);\n  const affected = new WeakMap();\n  const lastAffected = useRef();\n  const prevSnapshot = useRef();\n  const lastSnapshot = useRef();\n  useIsomorphicLayoutEffect(() => {\n    lastSnapshot.current = prevSnapshot.current = snapshot(proxyObject);\n  }, [proxyObject]);\n  useIsomorphicLayoutEffect(() => {\n    lastAffected.current = affected;\n    if (prevSnapshot.current !== lastSnapshot.current && isDeepChanged(prevSnapshot.current, lastSnapshot.current, affected, new WeakMap())) {\n      prevSnapshot.current = lastSnapshot.current;\n      forceUpdate();\n    }\n  });\n  const notifyInSync = options == null ? void 0 : options.sync;\n  const sub = useCallback((proxyObject2, cb) => subscribe(proxyObject2, () => {\n    const nextSnapshot = snapshot(proxyObject2);\n    lastSnapshot.current = nextSnapshot;\n    try {\n      if (lastAffected.current && !isDeepChanged(prevSnapshot.current, nextSnapshot, lastAffected.current, new WeakMap())) {\n        return;\n      }\n    } catch (e) {\n    }\n    prevSnapshot.current = nextSnapshot;\n    cb();\n  }, notifyInSync), [notifyInSync]);\n  const currSnapshot = useMutableSource(getMutableSource(proxyObject), snapshot, sub);\n  if (typeof process === \"object\" && process.env.NODE_ENV !== \"production\") {\n    useAffectedDebugValue(currSnapshot, affected);\n  }\n  const proxyCache = useMemo(() => new WeakMap(), []);\n  return createDeepProxy(currSnapshot, affected, proxyCache);\n};\n\nexport { useSnapshot };\n"]},"metadata":{},"sourceType":"module"}