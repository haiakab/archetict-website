{"ast":null,"code":"import { MeshBasicMaterial, Matrix4, Color, DoubleSide } from 'three';\n/**\n * https://github.com/gkjohnson/collada-exporter-js\n *\n * Usage:\n *  var exporter = new ColladaExporter();\n *\n *  var data = exporter.parse(mesh);\n *\n * Format Definition:\n *  https://www.khronos.org/collada/\n */\n\nconst ColladaExporter = () => {};\n\nColladaExporter.prototype = {\n  constructor: ColladaExporter,\n  parse: function (object, onDone, options) {\n    options = options || {};\n    options = Object.assign({\n      version: '1.4.1',\n      author: null,\n      textureDirectory: ''\n    }, options);\n\n    if (options.textureDirectory !== '') {\n      options.textureDirectory = `${options.textureDirectory}/`.replace(/\\\\/g, '/').replace(/\\/+/g, '/');\n    }\n\n    const version = options.version;\n\n    if (version !== '1.4.1' && version !== '1.5.0') {\n      console.warn(`ColladaExporter : Version ${version} not supported for export. Only 1.4.1 and 1.5.0.`);\n      return null;\n    } // Convert the urdf xml into a well-formatted, indented format\n\n\n    function format(urdf) {\n      const IS_END_TAG = /^<\\//;\n      const IS_SELF_CLOSING = /(\\?>$)|(\\/>$)/;\n      const HAS_TEXT = /<[^>]+>[^<]*<\\/[^<]+>/;\n\n      const pad = (ch, num) => num > 0 ? ch + pad(ch, num - 1) : '';\n\n      let tagnum = 0;\n      return urdf.match(/(<[^>]+>[^<]+<\\/[^<]+>)|(<[^>]+>)/g).map(tag => {\n        if (!HAS_TEXT.test(tag) && !IS_SELF_CLOSING.test(tag) && IS_END_TAG.test(tag)) {\n          tagnum--;\n        }\n\n        const res = `${pad('  ', tagnum)}${tag}`;\n\n        if (!HAS_TEXT.test(tag) && !IS_SELF_CLOSING.test(tag) && !IS_END_TAG.test(tag)) {\n          tagnum++;\n        }\n\n        return res;\n      }).join('\\n');\n    } // Convert an image into a png format for saving\n\n\n    function base64ToBuffer(str) {\n      const b = atob(str);\n      const buf = new Uint8Array(b.length);\n\n      for (let i = 0, l = buf.length; i < l; i++) {\n        buf[i] = b.charCodeAt(i);\n      }\n\n      return buf;\n    }\n\n    let canvas, ctx;\n\n    function imageToData(image, ext) {\n      canvas = canvas || document.createElement('canvas');\n      ctx = ctx || canvas.getContext('2d');\n      canvas.width = image.width;\n      canvas.height = image.height;\n      ctx.drawImage(image, 0, 0); // Get the base64 encoded data\n\n      const base64data = canvas.toDataURL(`image/${ext}`, 1).replace(/^data:image\\/(png|jpg);base64,/, ''); // Convert to a uint8 array\n\n      return base64ToBuffer(base64data);\n    } // gets the attribute array. Generate a new array if the attribute is interleaved\n\n\n    const getFuncs = ['getX', 'getY', 'getZ', 'getW'];\n\n    function attrBufferToArray(attr) {\n      if (attr.isInterleavedBufferAttribute) {\n        // use the typed array constructor to save on memory\n        const arr = new attr.array.constructor(attr.count * attr.itemSize);\n        const size = attr.itemSize;\n\n        for (let i = 0, l = attr.count; i < l; i++) {\n          for (let j = 0; j < size; j++) {\n            arr[i * size + j] = attr[getFuncs[j]](i);\n          }\n        }\n\n        return arr;\n      } else {\n        return attr.array;\n      }\n    } // Returns an array of the same type starting at the `st` index,\n    // and `ct` length\n\n\n    function subArray(arr, st, ct) {\n      if (Array.isArray(arr)) return arr.slice(st, st + ct);else return new arr.constructor(arr.buffer, st * arr.BYTES_PER_ELEMENT, ct);\n    } // Returns the string for a geometry's attribute\n\n\n    function getAttribute(attr, name, params, type) {\n      const array = attrBufferToArray(attr);\n      const res = `${`<source id=\"${name}\">` + `<float_array id=\"${name}-array\" count=\"${array.length}\">` + array.join(' ')}</float_array><technique_common>${`<accessor source=\"#${name}-array\" count=\"${Math.floor(array.length / attr.itemSize)}\" stride=\"${attr.itemSize}\">`}${params.map(n => `<param name=\"${n}\" type=\"${type}\" />`).join('')}</accessor></technique_common></source>`;\n      return res;\n    } // Returns the string for a node's transform information\n\n\n    let transMat;\n\n    function getTransform(o) {\n      // ensure the object's matrix is up to date\n      // before saving the transform\n      o.updateMatrix();\n      transMat = transMat || new Matrix4();\n      transMat.copy(o.matrix);\n      transMat.transpose();\n      return `<matrix>${transMat.toArray().join(' ')}</matrix>`;\n    } // Process the given piece of geometry into the geometry library\n    // Returns the mesh id\n\n\n    function processGeometry(g) {\n      let info = geometryInfo.get(g);\n\n      if (!info) {\n        // convert the geometry to bufferGeometry if it isn't already\n        const bufferGeometry = g;\n\n        if (bufferGeometry.isBufferGeometry !== true) {\n          throw new Error('THREE.ColladaExporter: Geometry is not of type THREE.BufferGeometry.');\n        }\n\n        const meshid = `Mesh${libraryGeometries.length + 1}`;\n        const indexCount = bufferGeometry.index ? bufferGeometry.index.count * bufferGeometry.index.itemSize : bufferGeometry.attributes.position.count;\n        const groups = bufferGeometry.groups != null && bufferGeometry.groups.length !== 0 ? bufferGeometry.groups : [{\n          start: 0,\n          count: indexCount,\n          materialIndex: 0\n        }];\n        const gname = g.name ? ` name=\"${g.name}\"` : '';\n        let gnode = `<geometry id=\"${meshid}\"${gname}><mesh>`; // define the geometry node and the vertices for the geometry\n\n        const posName = `${meshid}-position`;\n        const vertName = `${meshid}-vertices`;\n        gnode += getAttribute(bufferGeometry.attributes.position, posName, ['X', 'Y', 'Z'], 'float');\n        gnode += `<vertices id=\"${vertName}\"><input semantic=\"POSITION\" source=\"#${posName}\" /></vertices>`; // NOTE: We're not optimizing the attribute arrays here, so they're all the same length and\n        // can therefore share the same triangle indices. However, MeshLab seems to have trouble opening\n        // models with attributes that share an offset.\n        // MeshLab Bug#424: https://sourceforge.net/p/meshlab/bugs/424/\n        // serialize normals\n\n        let triangleInputs = `<input semantic=\"VERTEX\" source=\"#${vertName}\" offset=\"0\" />`;\n\n        if ('normal' in bufferGeometry.attributes) {\n          const normName = `${meshid}-normal`;\n          gnode += getAttribute(bufferGeometry.attributes.normal, normName, ['X', 'Y', 'Z'], 'float');\n          triangleInputs += `<input semantic=\"NORMAL\" source=\"#${normName}\" offset=\"0\" />`;\n        } // serialize uvs\n\n\n        if ('uv' in bufferGeometry.attributes) {\n          var uvName = `${meshid}-texcoord`;\n          gnode += getAttribute(bufferGeometry.attributes.uv, uvName, ['S', 'T'], 'float');\n          triangleInputs += `<input semantic=\"TEXCOORD\" source=\"#${uvName}\" offset=\"0\" set=\"0\" />`;\n        } // serialize lightmap uvs\n\n\n        if ('uv2' in bufferGeometry.attributes) {\n          var uvName = `${meshid}-texcoord2`;\n          gnode += getAttribute(bufferGeometry.attributes.uv2, uvName, ['S', 'T'], 'float');\n          triangleInputs += `<input semantic=\"TEXCOORD\" source=\"#${uvName}\" offset=\"0\" set=\"1\" />`;\n        } // serialize colors\n\n\n        if ('color' in bufferGeometry.attributes) {\n          const colName = `${meshid}-color`;\n          gnode += getAttribute(bufferGeometry.attributes.color, colName, ['X', 'Y', 'Z'], 'uint8');\n          triangleInputs += `<input semantic=\"COLOR\" source=\"#${colName}\" offset=\"0\" />`;\n        }\n\n        let indexArray = null;\n\n        if (bufferGeometry.index) {\n          indexArray = attrBufferToArray(bufferGeometry.index);\n        } else {\n          indexArray = new Array(indexCount);\n\n          for (let i = 0, l = indexArray.length; i < l; i++) indexArray[i] = i;\n        }\n\n        for (let i = 0, l = groups.length; i < l; i++) {\n          const group = groups[i];\n          const subarr = subArray(indexArray, group.start, group.count);\n          const polycount = subarr.length / 3;\n          gnode += `<triangles material=\"MESH_MATERIAL_${group.materialIndex}\" count=\"${polycount}\">`;\n          gnode += triangleInputs;\n          gnode += `<p>${subarr.join(' ')}</p>`;\n          gnode += '</triangles>';\n        }\n\n        gnode += '</mesh></geometry>';\n        libraryGeometries.push(gnode);\n        info = {\n          meshid,\n          bufferGeometry\n        };\n        geometryInfo.set(g, info);\n      }\n\n      return info;\n    } // Process the given texture into the image library\n    // Returns the image library\n\n\n    function processTexture(tex) {\n      let texid = imageMap.get(tex);\n\n      if (texid == null) {\n        texid = `image-${libraryImages.length + 1}`;\n        const ext = 'png';\n        const name = tex.name || texid;\n        let imageNode = `<image id=\"${texid}\" name=\"${name}\">`;\n\n        if (version === '1.5.0') {\n          imageNode += `<init_from><ref>${options.textureDirectory}${name}.${ext}</ref></init_from>`;\n        } else {\n          // version image node 1.4.1\n          imageNode += `<init_from>${options.textureDirectory}${name}.${ext}</init_from>`;\n        }\n\n        imageNode += '</image>';\n        libraryImages.push(imageNode);\n        imageMap.set(tex, texid);\n        textures.push({\n          directory: options.textureDirectory,\n          name,\n          ext,\n          data: imageToData(tex.image, ext),\n          original: tex\n        });\n      }\n\n      return texid;\n    } // Process the given material into the material and effect libraries\n    // Returns the material id\n\n\n    function processMaterial(m) {\n      let matid = materialMap.get(m);\n\n      if (matid == null) {\n        matid = `Mat${libraryEffects.length + 1}`;\n        let type = 'phong';\n\n        if (m.isMeshLambertMaterial === true) {\n          type = 'lambert';\n        } else if (m.isMeshBasicMaterial === true) {\n          type = 'constant';\n\n          if (m.map !== null) {\n            // The Collada spec does not support diffuse texture maps with the\n            // constant shader type.\n            // mrdoob/three.js#15469\n            console.warn('ColladaExporter: Texture maps not supported with MeshBasicMaterial.');\n          }\n        }\n\n        const emissive = m.emissive ? m.emissive : new Color(0, 0, 0);\n        const diffuse = m.color ? m.color : new Color(0, 0, 0);\n        const specular = m.specular ? m.specular : new Color(1, 1, 1);\n        const shininess = m.shininess || 0;\n        const reflectivity = m.reflectivity || 0; // Do not export and alpha map for the reasons mentioned in issue (#13792)\n        // in three.js alpha maps are black and white, but collada expects the alpha\n        // channel to specify the transparency\n\n        let transparencyNode = '';\n\n        if (m.transparent === true) {\n          transparencyNode += `<transparent>${m.map ? '<texture texture=\"diffuse-sampler\"></texture>' : '<float>1</float>'}</transparent>`;\n\n          if (m.opacity < 1) {\n            transparencyNode += `<transparency><float>${m.opacity}</float></transparency>`;\n          }\n        }\n\n        const techniqueNode = `${`<technique sid=\"common\"><${type}>`}<emission>${m.emissiveMap ? '<texture texture=\"emissive-sampler\" texcoord=\"TEXCOORD\" />' : `<color sid=\"emission\">${emissive.r} ${emissive.g} ${emissive.b} 1</color>`}</emission>${type !== 'constant' ? `<diffuse>${m.map ? '<texture texture=\"diffuse-sampler\" texcoord=\"TEXCOORD\" />' : `<color sid=\"diffuse\">${diffuse.r} ${diffuse.g} ${diffuse.b} 1</color>`}</diffuse>` : ''}${type !== 'constant' ? `<bump>${m.normalMap ? '<texture texture=\"bump-sampler\" texcoord=\"TEXCOORD\" />' : ''}</bump>` : ''}${type === 'phong' ? `${`<specular><color sid=\"specular\">${specular.r} ${specular.g} ${specular.b} 1</color></specular>`}<shininess>${m.specularMap ? '<texture texture=\"specular-sampler\" texcoord=\"TEXCOORD\" />' : `<float sid=\"shininess\">${shininess}</float>`}</shininess>` : ''}${`<reflective><color>${diffuse.r} ${diffuse.g} ${diffuse.b} 1</color></reflective>`}${`<reflectivity><float>${reflectivity}</float></reflectivity>`}${transparencyNode}${`</${type}></technique>`}`;\n        const effectnode = `${`<effect id=\"${matid}-effect\">`}<profile_COMMON>${m.map ? `<newparam sid=\"diffuse-surface\"><surface type=\"2D\">${`<init_from>${processTexture(m.map)}</init_from>`}</surface></newparam><newparam sid=\"diffuse-sampler\"><sampler2D><source>diffuse-surface</source></sampler2D></newparam>` : ''}${m.specularMap ? `<newparam sid=\"specular-surface\"><surface type=\"2D\">${`<init_from>${processTexture(m.specularMap)}</init_from>`}</surface></newparam><newparam sid=\"specular-sampler\"><sampler2D><source>specular-surface</source></sampler2D></newparam>` : ''}${m.emissiveMap ? `<newparam sid=\"emissive-surface\"><surface type=\"2D\">${`<init_from>${processTexture(m.emissiveMap)}</init_from>`}</surface></newparam><newparam sid=\"emissive-sampler\"><sampler2D><source>emissive-surface</source></sampler2D></newparam>` : ''}${m.normalMap ? `<newparam sid=\"bump-surface\"><surface type=\"2D\">${`<init_from>${processTexture(m.normalMap)}</init_from>`}</surface></newparam><newparam sid=\"bump-sampler\"><sampler2D><source>bump-surface</source></sampler2D></newparam>` : ''}${techniqueNode}${m.side === DoubleSide ? '<extra><technique profile=\"THREEJS\"><double_sided sid=\"double_sided\" type=\"int\">1</double_sided></technique></extra>' : ''}</profile_COMMON></effect>`;\n        const materialName = m.name ? ` name=\"${m.name}\"` : '';\n        const materialNode = `<material id=\"${matid}\"${materialName}><instance_effect url=\"#${matid}-effect\" /></material>`;\n        libraryMaterials.push(materialNode);\n        libraryEffects.push(effectnode);\n        materialMap.set(m, matid);\n      }\n\n      return matid;\n    } // Recursively process the object into a scene\n\n\n    function processObject(o) {\n      let node = `<node name=\"${o.name}\">`;\n      node += getTransform(o);\n\n      if (o.isMesh === true && o.geometry !== null) {\n        // function returns the id associated with the mesh and a \"BufferGeometry\" version\n        // of the geometry in case it's not a geometry.\n        const geomInfo = processGeometry(o.geometry);\n        const meshid = geomInfo.meshid;\n        const geometry = geomInfo.bufferGeometry; // ids of the materials to bind to the geometry\n\n        let matids = null;\n        let matidsArray = []; // get a list of materials to bind to the sub groups of the geometry.\n        // If the amount of subgroups is greater than the materials, than reuse\n        // the materials.\n\n        const mat = o.material || new MeshBasicMaterial();\n        const materials = Array.isArray(mat) ? mat : [mat];\n\n        if (geometry.groups.length > materials.length) {\n          matidsArray = new Array(geometry.groups.length);\n        } else {\n          matidsArray = new Array(materials.length);\n        }\n\n        matids = matidsArray.fill().map((v, i) => processMaterial(materials[i % materials.length]));\n        node += `${`<instance_geometry url=\"#${meshid}\">` + (matids != null ? `<bind_material><technique_common>${matids.map((id, i) => `${`<instance_material symbol=\"MESH_MATERIAL_${i}\" target=\"#${id}\" >`}<bind_vertex_input semantic=\"TEXCOORD\" input_semantic=\"TEXCOORD\" input_set=\"0\" /></instance_material>`).join('')}</technique_common></bind_material>` : '')}</instance_geometry>`;\n      }\n\n      o.children.forEach(c => node += processObject(c));\n      node += '</node>';\n      return node;\n    }\n\n    var geometryInfo = new WeakMap();\n    var materialMap = new WeakMap();\n    var imageMap = new WeakMap();\n    var textures = [];\n    var libraryImages = [];\n    var libraryGeometries = [];\n    var libraryEffects = [];\n    var libraryMaterials = [];\n    const libraryVisualScenes = processObject(object);\n    const specLink = version === '1.4.1' ? 'http://www.collada.org/2005/11/COLLADASchema' : 'https://www.khronos.org/collada/';\n    let dae = `<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\" ?>${`<COLLADA xmlns=\"${specLink}\" version=\"${version}\">`}<asset><contributor><authoring_tool>three.js Collada Exporter</authoring_tool>${options.author !== null ? `<author>${options.author}</author>` : ''}</contributor>${`<created>${new Date().toISOString()}</created>`}${`<modified>${new Date().toISOString()}</modified>`}<up_axis>Y_UP</up_axis></asset>`;\n    dae += `<library_images>${libraryImages.join('')}</library_images>`;\n    dae += `<library_effects>${libraryEffects.join('')}</library_effects>`;\n    dae += `<library_materials>${libraryMaterials.join('')}</library_materials>`;\n    dae += `<library_geometries>${libraryGeometries.join('')}</library_geometries>`;\n    dae += `<library_visual_scenes><visual_scene id=\"Scene\" name=\"scene\">${libraryVisualScenes}</visual_scene></library_visual_scenes>`;\n    dae += '<scene><instance_visual_scene url=\"#Scene\"/></scene>';\n    dae += '</COLLADA>';\n    const res = {\n      data: format(dae),\n      textures\n    };\n\n    if (typeof onDone === 'function') {\n      requestAnimationFrame(() => onDone(res));\n    }\n\n    return res;\n  }\n};\nexport { ColladaExporter };","map":{"version":3,"sources":["/Users/haiakablan/Documents/לוטוס/קורס/Architecture-web/node_modules/three-stdlib/exporters/ColladaExporter.js"],"names":["MeshBasicMaterial","Matrix4","Color","DoubleSide","ColladaExporter","prototype","constructor","parse","object","onDone","options","Object","assign","version","author","textureDirectory","replace","console","warn","format","urdf","IS_END_TAG","IS_SELF_CLOSING","HAS_TEXT","pad","ch","num","tagnum","match","map","tag","test","res","join","base64ToBuffer","str","b","atob","buf","Uint8Array","length","i","l","charCodeAt","canvas","ctx","imageToData","image","ext","document","createElement","getContext","width","height","drawImage","base64data","toDataURL","getFuncs","attrBufferToArray","attr","isInterleavedBufferAttribute","arr","array","count","itemSize","size","j","subArray","st","ct","Array","isArray","slice","buffer","BYTES_PER_ELEMENT","getAttribute","name","params","type","Math","floor","n","transMat","getTransform","o","updateMatrix","copy","matrix","transpose","toArray","processGeometry","g","info","geometryInfo","get","bufferGeometry","isBufferGeometry","Error","meshid","libraryGeometries","indexCount","index","attributes","position","groups","start","materialIndex","gname","gnode","posName","vertName","triangleInputs","normName","normal","uvName","uv","uv2","colName","color","indexArray","group","subarr","polycount","push","set","processTexture","tex","texid","imageMap","libraryImages","imageNode","textures","directory","data","original","processMaterial","m","matid","materialMap","libraryEffects","isMeshLambertMaterial","isMeshBasicMaterial","emissive","diffuse","specular","shininess","reflectivity","transparencyNode","transparent","opacity","techniqueNode","emissiveMap","r","normalMap","specularMap","effectnode","side","materialName","materialNode","libraryMaterials","processObject","node","isMesh","geometry","geomInfo","matids","matidsArray","mat","material","materials","fill","v","id","children","forEach","c","WeakMap","libraryVisualScenes","specLink","dae","Date","toISOString","requestAnimationFrame"],"mappings":"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","sourcesContent":["import { MeshBasicMaterial, Matrix4, Color, DoubleSide } from 'three';\n\n/**\n * https://github.com/gkjohnson/collada-exporter-js\n *\n * Usage:\n *  var exporter = new ColladaExporter();\n *\n *  var data = exporter.parse(mesh);\n *\n * Format Definition:\n *  https://www.khronos.org/collada/\n */\n\nconst ColladaExporter = () => {};\n\nColladaExporter.prototype = {\n  constructor: ColladaExporter,\n  parse: function (object, onDone, options) {\n    options = options || {};\n    options = Object.assign({\n      version: '1.4.1',\n      author: null,\n      textureDirectory: ''\n    }, options);\n\n    if (options.textureDirectory !== '') {\n      options.textureDirectory = `${options.textureDirectory}/`.replace(/\\\\/g, '/').replace(/\\/+/g, '/');\n    }\n\n    const version = options.version;\n\n    if (version !== '1.4.1' && version !== '1.5.0') {\n      console.warn(`ColladaExporter : Version ${version} not supported for export. Only 1.4.1 and 1.5.0.`);\n      return null;\n    } // Convert the urdf xml into a well-formatted, indented format\n\n\n    function format(urdf) {\n      const IS_END_TAG = /^<\\//;\n      const IS_SELF_CLOSING = /(\\?>$)|(\\/>$)/;\n      const HAS_TEXT = /<[^>]+>[^<]*<\\/[^<]+>/;\n\n      const pad = (ch, num) => num > 0 ? ch + pad(ch, num - 1) : '';\n\n      let tagnum = 0;\n      return urdf.match(/(<[^>]+>[^<]+<\\/[^<]+>)|(<[^>]+>)/g).map(tag => {\n        if (!HAS_TEXT.test(tag) && !IS_SELF_CLOSING.test(tag) && IS_END_TAG.test(tag)) {\n          tagnum--;\n        }\n\n        const res = `${pad('  ', tagnum)}${tag}`;\n\n        if (!HAS_TEXT.test(tag) && !IS_SELF_CLOSING.test(tag) && !IS_END_TAG.test(tag)) {\n          tagnum++;\n        }\n\n        return res;\n      }).join('\\n');\n    } // Convert an image into a png format for saving\n\n\n    function base64ToBuffer(str) {\n      const b = atob(str);\n      const buf = new Uint8Array(b.length);\n\n      for (let i = 0, l = buf.length; i < l; i++) {\n        buf[i] = b.charCodeAt(i);\n      }\n\n      return buf;\n    }\n\n    let canvas, ctx;\n\n    function imageToData(image, ext) {\n      canvas = canvas || document.createElement('canvas');\n      ctx = ctx || canvas.getContext('2d');\n      canvas.width = image.width;\n      canvas.height = image.height;\n      ctx.drawImage(image, 0, 0); // Get the base64 encoded data\n\n      const base64data = canvas.toDataURL(`image/${ext}`, 1).replace(/^data:image\\/(png|jpg);base64,/, ''); // Convert to a uint8 array\n\n      return base64ToBuffer(base64data);\n    } // gets the attribute array. Generate a new array if the attribute is interleaved\n\n\n    const getFuncs = ['getX', 'getY', 'getZ', 'getW'];\n\n    function attrBufferToArray(attr) {\n      if (attr.isInterleavedBufferAttribute) {\n        // use the typed array constructor to save on memory\n        const arr = new attr.array.constructor(attr.count * attr.itemSize);\n        const size = attr.itemSize;\n\n        for (let i = 0, l = attr.count; i < l; i++) {\n          for (let j = 0; j < size; j++) {\n            arr[i * size + j] = attr[getFuncs[j]](i);\n          }\n        }\n\n        return arr;\n      } else {\n        return attr.array;\n      }\n    } // Returns an array of the same type starting at the `st` index,\n    // and `ct` length\n\n\n    function subArray(arr, st, ct) {\n      if (Array.isArray(arr)) return arr.slice(st, st + ct);else return new arr.constructor(arr.buffer, st * arr.BYTES_PER_ELEMENT, ct);\n    } // Returns the string for a geometry's attribute\n\n\n    function getAttribute(attr, name, params, type) {\n      const array = attrBufferToArray(attr);\n      const res = `${`<source id=\"${name}\">` + `<float_array id=\"${name}-array\" count=\"${array.length}\">` + array.join(' ')}</float_array><technique_common>${`<accessor source=\"#${name}-array\" count=\"${Math.floor(array.length / attr.itemSize)}\" stride=\"${attr.itemSize}\">`}${params.map(n => `<param name=\"${n}\" type=\"${type}\" />`).join('')}</accessor></technique_common></source>`;\n      return res;\n    } // Returns the string for a node's transform information\n\n\n    let transMat;\n\n    function getTransform(o) {\n      // ensure the object's matrix is up to date\n      // before saving the transform\n      o.updateMatrix();\n      transMat = transMat || new Matrix4();\n      transMat.copy(o.matrix);\n      transMat.transpose();\n      return `<matrix>${transMat.toArray().join(' ')}</matrix>`;\n    } // Process the given piece of geometry into the geometry library\n    // Returns the mesh id\n\n\n    function processGeometry(g) {\n      let info = geometryInfo.get(g);\n\n      if (!info) {\n        // convert the geometry to bufferGeometry if it isn't already\n        const bufferGeometry = g;\n\n        if (bufferGeometry.isBufferGeometry !== true) {\n          throw new Error('THREE.ColladaExporter: Geometry is not of type THREE.BufferGeometry.');\n        }\n\n        const meshid = `Mesh${libraryGeometries.length + 1}`;\n        const indexCount = bufferGeometry.index ? bufferGeometry.index.count * bufferGeometry.index.itemSize : bufferGeometry.attributes.position.count;\n        const groups = bufferGeometry.groups != null && bufferGeometry.groups.length !== 0 ? bufferGeometry.groups : [{\n          start: 0,\n          count: indexCount,\n          materialIndex: 0\n        }];\n        const gname = g.name ? ` name=\"${g.name}\"` : '';\n        let gnode = `<geometry id=\"${meshid}\"${gname}><mesh>`; // define the geometry node and the vertices for the geometry\n\n        const posName = `${meshid}-position`;\n        const vertName = `${meshid}-vertices`;\n        gnode += getAttribute(bufferGeometry.attributes.position, posName, ['X', 'Y', 'Z'], 'float');\n        gnode += `<vertices id=\"${vertName}\"><input semantic=\"POSITION\" source=\"#${posName}\" /></vertices>`; // NOTE: We're not optimizing the attribute arrays here, so they're all the same length and\n        // can therefore share the same triangle indices. However, MeshLab seems to have trouble opening\n        // models with attributes that share an offset.\n        // MeshLab Bug#424: https://sourceforge.net/p/meshlab/bugs/424/\n        // serialize normals\n\n        let triangleInputs = `<input semantic=\"VERTEX\" source=\"#${vertName}\" offset=\"0\" />`;\n\n        if ('normal' in bufferGeometry.attributes) {\n          const normName = `${meshid}-normal`;\n          gnode += getAttribute(bufferGeometry.attributes.normal, normName, ['X', 'Y', 'Z'], 'float');\n          triangleInputs += `<input semantic=\"NORMAL\" source=\"#${normName}\" offset=\"0\" />`;\n        } // serialize uvs\n\n\n        if ('uv' in bufferGeometry.attributes) {\n          var uvName = `${meshid}-texcoord`;\n          gnode += getAttribute(bufferGeometry.attributes.uv, uvName, ['S', 'T'], 'float');\n          triangleInputs += `<input semantic=\"TEXCOORD\" source=\"#${uvName}\" offset=\"0\" set=\"0\" />`;\n        } // serialize lightmap uvs\n\n\n        if ('uv2' in bufferGeometry.attributes) {\n          var uvName = `${meshid}-texcoord2`;\n          gnode += getAttribute(bufferGeometry.attributes.uv2, uvName, ['S', 'T'], 'float');\n          triangleInputs += `<input semantic=\"TEXCOORD\" source=\"#${uvName}\" offset=\"0\" set=\"1\" />`;\n        } // serialize colors\n\n\n        if ('color' in bufferGeometry.attributes) {\n          const colName = `${meshid}-color`;\n          gnode += getAttribute(bufferGeometry.attributes.color, colName, ['X', 'Y', 'Z'], 'uint8');\n          triangleInputs += `<input semantic=\"COLOR\" source=\"#${colName}\" offset=\"0\" />`;\n        }\n\n        let indexArray = null;\n\n        if (bufferGeometry.index) {\n          indexArray = attrBufferToArray(bufferGeometry.index);\n        } else {\n          indexArray = new Array(indexCount);\n\n          for (let i = 0, l = indexArray.length; i < l; i++) indexArray[i] = i;\n        }\n\n        for (let i = 0, l = groups.length; i < l; i++) {\n          const group = groups[i];\n          const subarr = subArray(indexArray, group.start, group.count);\n          const polycount = subarr.length / 3;\n          gnode += `<triangles material=\"MESH_MATERIAL_${group.materialIndex}\" count=\"${polycount}\">`;\n          gnode += triangleInputs;\n          gnode += `<p>${subarr.join(' ')}</p>`;\n          gnode += '</triangles>';\n        }\n\n        gnode += '</mesh></geometry>';\n        libraryGeometries.push(gnode);\n        info = {\n          meshid,\n          bufferGeometry\n        };\n        geometryInfo.set(g, info);\n      }\n\n      return info;\n    } // Process the given texture into the image library\n    // Returns the image library\n\n\n    function processTexture(tex) {\n      let texid = imageMap.get(tex);\n\n      if (texid == null) {\n        texid = `image-${libraryImages.length + 1}`;\n        const ext = 'png';\n        const name = tex.name || texid;\n        let imageNode = `<image id=\"${texid}\" name=\"${name}\">`;\n\n        if (version === '1.5.0') {\n          imageNode += `<init_from><ref>${options.textureDirectory}${name}.${ext}</ref></init_from>`;\n        } else {\n          // version image node 1.4.1\n          imageNode += `<init_from>${options.textureDirectory}${name}.${ext}</init_from>`;\n        }\n\n        imageNode += '</image>';\n        libraryImages.push(imageNode);\n        imageMap.set(tex, texid);\n        textures.push({\n          directory: options.textureDirectory,\n          name,\n          ext,\n          data: imageToData(tex.image, ext),\n          original: tex\n        });\n      }\n\n      return texid;\n    } // Process the given material into the material and effect libraries\n    // Returns the material id\n\n\n    function processMaterial(m) {\n      let matid = materialMap.get(m);\n\n      if (matid == null) {\n        matid = `Mat${libraryEffects.length + 1}`;\n        let type = 'phong';\n\n        if (m.isMeshLambertMaterial === true) {\n          type = 'lambert';\n        } else if (m.isMeshBasicMaterial === true) {\n          type = 'constant';\n\n          if (m.map !== null) {\n            // The Collada spec does not support diffuse texture maps with the\n            // constant shader type.\n            // mrdoob/three.js#15469\n            console.warn('ColladaExporter: Texture maps not supported with MeshBasicMaterial.');\n          }\n        }\n\n        const emissive = m.emissive ? m.emissive : new Color(0, 0, 0);\n        const diffuse = m.color ? m.color : new Color(0, 0, 0);\n        const specular = m.specular ? m.specular : new Color(1, 1, 1);\n        const shininess = m.shininess || 0;\n        const reflectivity = m.reflectivity || 0; // Do not export and alpha map for the reasons mentioned in issue (#13792)\n        // in three.js alpha maps are black and white, but collada expects the alpha\n        // channel to specify the transparency\n\n        let transparencyNode = '';\n\n        if (m.transparent === true) {\n          transparencyNode += `<transparent>${m.map ? '<texture texture=\"diffuse-sampler\"></texture>' : '<float>1</float>'}</transparent>`;\n\n          if (m.opacity < 1) {\n            transparencyNode += `<transparency><float>${m.opacity}</float></transparency>`;\n          }\n        }\n\n        const techniqueNode = `${`<technique sid=\"common\"><${type}>`}<emission>${m.emissiveMap ? '<texture texture=\"emissive-sampler\" texcoord=\"TEXCOORD\" />' : `<color sid=\"emission\">${emissive.r} ${emissive.g} ${emissive.b} 1</color>`}</emission>${type !== 'constant' ? `<diffuse>${m.map ? '<texture texture=\"diffuse-sampler\" texcoord=\"TEXCOORD\" />' : `<color sid=\"diffuse\">${diffuse.r} ${diffuse.g} ${diffuse.b} 1</color>`}</diffuse>` : ''}${type !== 'constant' ? `<bump>${m.normalMap ? '<texture texture=\"bump-sampler\" texcoord=\"TEXCOORD\" />' : ''}</bump>` : ''}${type === 'phong' ? `${`<specular><color sid=\"specular\">${specular.r} ${specular.g} ${specular.b} 1</color></specular>`}<shininess>${m.specularMap ? '<texture texture=\"specular-sampler\" texcoord=\"TEXCOORD\" />' : `<float sid=\"shininess\">${shininess}</float>`}</shininess>` : ''}${`<reflective><color>${diffuse.r} ${diffuse.g} ${diffuse.b} 1</color></reflective>`}${`<reflectivity><float>${reflectivity}</float></reflectivity>`}${transparencyNode}${`</${type}></technique>`}`;\n        const effectnode = `${`<effect id=\"${matid}-effect\">`}<profile_COMMON>${m.map ? `<newparam sid=\"diffuse-surface\"><surface type=\"2D\">${`<init_from>${processTexture(m.map)}</init_from>`}</surface></newparam><newparam sid=\"diffuse-sampler\"><sampler2D><source>diffuse-surface</source></sampler2D></newparam>` : ''}${m.specularMap ? `<newparam sid=\"specular-surface\"><surface type=\"2D\">${`<init_from>${processTexture(m.specularMap)}</init_from>`}</surface></newparam><newparam sid=\"specular-sampler\"><sampler2D><source>specular-surface</source></sampler2D></newparam>` : ''}${m.emissiveMap ? `<newparam sid=\"emissive-surface\"><surface type=\"2D\">${`<init_from>${processTexture(m.emissiveMap)}</init_from>`}</surface></newparam><newparam sid=\"emissive-sampler\"><sampler2D><source>emissive-surface</source></sampler2D></newparam>` : ''}${m.normalMap ? `<newparam sid=\"bump-surface\"><surface type=\"2D\">${`<init_from>${processTexture(m.normalMap)}</init_from>`}</surface></newparam><newparam sid=\"bump-sampler\"><sampler2D><source>bump-surface</source></sampler2D></newparam>` : ''}${techniqueNode}${m.side === DoubleSide ? '<extra><technique profile=\"THREEJS\"><double_sided sid=\"double_sided\" type=\"int\">1</double_sided></technique></extra>' : ''}</profile_COMMON></effect>`;\n        const materialName = m.name ? ` name=\"${m.name}\"` : '';\n        const materialNode = `<material id=\"${matid}\"${materialName}><instance_effect url=\"#${matid}-effect\" /></material>`;\n        libraryMaterials.push(materialNode);\n        libraryEffects.push(effectnode);\n        materialMap.set(m, matid);\n      }\n\n      return matid;\n    } // Recursively process the object into a scene\n\n\n    function processObject(o) {\n      let node = `<node name=\"${o.name}\">`;\n      node += getTransform(o);\n\n      if (o.isMesh === true && o.geometry !== null) {\n        // function returns the id associated with the mesh and a \"BufferGeometry\" version\n        // of the geometry in case it's not a geometry.\n        const geomInfo = processGeometry(o.geometry);\n        const meshid = geomInfo.meshid;\n        const geometry = geomInfo.bufferGeometry; // ids of the materials to bind to the geometry\n\n        let matids = null;\n        let matidsArray = []; // get a list of materials to bind to the sub groups of the geometry.\n        // If the amount of subgroups is greater than the materials, than reuse\n        // the materials.\n\n        const mat = o.material || new MeshBasicMaterial();\n        const materials = Array.isArray(mat) ? mat : [mat];\n\n        if (geometry.groups.length > materials.length) {\n          matidsArray = new Array(geometry.groups.length);\n        } else {\n          matidsArray = new Array(materials.length);\n        }\n\n        matids = matidsArray.fill().map((v, i) => processMaterial(materials[i % materials.length]));\n        node += `${`<instance_geometry url=\"#${meshid}\">` + (matids != null ? `<bind_material><technique_common>${matids.map((id, i) => `${`<instance_material symbol=\"MESH_MATERIAL_${i}\" target=\"#${id}\" >`}<bind_vertex_input semantic=\"TEXCOORD\" input_semantic=\"TEXCOORD\" input_set=\"0\" /></instance_material>`).join('')}</technique_common></bind_material>` : '')}</instance_geometry>`;\n      }\n\n      o.children.forEach(c => node += processObject(c));\n      node += '</node>';\n      return node;\n    }\n\n    var geometryInfo = new WeakMap();\n    var materialMap = new WeakMap();\n    var imageMap = new WeakMap();\n    var textures = [];\n    var libraryImages = [];\n    var libraryGeometries = [];\n    var libraryEffects = [];\n    var libraryMaterials = [];\n    const libraryVisualScenes = processObject(object);\n    const specLink = version === '1.4.1' ? 'http://www.collada.org/2005/11/COLLADASchema' : 'https://www.khronos.org/collada/';\n    let dae = `<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\" ?>${`<COLLADA xmlns=\"${specLink}\" version=\"${version}\">`}<asset><contributor><authoring_tool>three.js Collada Exporter</authoring_tool>${options.author !== null ? `<author>${options.author}</author>` : ''}</contributor>${`<created>${new Date().toISOString()}</created>`}${`<modified>${new Date().toISOString()}</modified>`}<up_axis>Y_UP</up_axis></asset>`;\n    dae += `<library_images>${libraryImages.join('')}</library_images>`;\n    dae += `<library_effects>${libraryEffects.join('')}</library_effects>`;\n    dae += `<library_materials>${libraryMaterials.join('')}</library_materials>`;\n    dae += `<library_geometries>${libraryGeometries.join('')}</library_geometries>`;\n    dae += `<library_visual_scenes><visual_scene id=\"Scene\" name=\"scene\">${libraryVisualScenes}</visual_scene></library_visual_scenes>`;\n    dae += '<scene><instance_visual_scene url=\"#Scene\"/></scene>';\n    dae += '</COLLADA>';\n    const res = {\n      data: format(dae),\n      textures\n    };\n\n    if (typeof onDone === 'function') {\n      requestAnimationFrame(() => onDone(res));\n    }\n\n    return res;\n  }\n};\n\nexport { ColladaExporter };\n"]},"metadata":{},"sourceType":"module"}