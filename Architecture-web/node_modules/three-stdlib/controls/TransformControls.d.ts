import { Mesh, MeshBasicMaterial, Object3D, PlaneGeometry, Camera } from 'three';
export interface TransformControlsPointerObject {
    x: number;
    y: number;
    button: number;
}
declare class TransformControls<TCamera extends Camera = Camera> extends Object3D {
    readonly isTransformControls = true;
    visible: boolean;
    private domElement;
    private raycaster;
    private _gizmo;
    private _plane;
    private _tempVector;
    private _tempVector2;
    private _tempQuaternion;
    private _unit;
    private _pointStart;
    private _pointEnd;
    private _offset;
    private _rotationAxis;
    private _startNorm;
    private _endNorm;
    private _rotationAngle;
    private _cameraPosition;
    private _cameraQuaternion;
    private _cameraScale;
    private _parentPosition;
    private _parentQuaternion;
    private _parentQuaternionInv;
    private _parentScale;
    private _worldPositionStart;
    private _worldQuaternionStart;
    private _worldScaleStart;
    private _worldPosition;
    private _worldQuaternion;
    private _worldQuaternionInv;
    private _worldScale;
    private _eye;
    private _positionStart;
    private _quaternionStart;
    private _scaleStart;
    private _camera;
    private _object;
    private _enabled;
    private _axis;
    private _mode;
    private _translationSnap;
    private _rotationSnap;
    private _scaleSnap;
    private _space;
    private _size;
    private _dragging;
    private _showX;
    private _showY;
    private _showZ;
    private changeEvent;
    private mouseDownEvent;
    private mouseUpEvent;
    private objectChangeEvent;
    constructor(camera: TCamera, domElement: HTMLElement);
    private intersectObjectWithRay;
    attach: (object: Object3D) => this;
    detach: () => this;
    updateMatrixWorld: () => void;
    private pointerHover;
    private pointerDown;
    private pointerMove;
    private pointerUp;
    private getPointer;
    private onPointerHover;
    private onPointerDown;
    private onPointerMove;
    private onPointerUp;
    getMode: () => TransformControls['_mode'];
    setMode: (mode: TransformControls['_mode']) => void;
    setTranslationSnap: (translationSnap: number) => void;
    setRotationSnap: (rotationSnap: number) => void;
    setScaleSnap: (scaleSnap: number) => void;
    setSize: (size: number) => void;
    setSpace: (space: string) => void;
    update: () => void;
    dispose: () => void;
}
declare type TransformControlsGizmoPrivateGizmos = {
    ['translate']: Object3D;
    ['scale']: Object3D;
    ['rotate']: Object3D;
    ['visible']: boolean;
};
declare class TransformControlsGizmo extends Object3D {
    private isTransformControlsGizmo;
    type: string;
    private tempVector;
    private tempEuler;
    private alignVector;
    private zeroVector;
    private lookAtMatrix;
    private tempQuaternion;
    private tempQuaternion2;
    private identityQuaternion;
    private unitX;
    private unitY;
    private unitZ;
    private gizmo;
    picker: TransformControlsGizmoPrivateGizmos;
    private helper;
    private _rotationAxis;
    private _cameraPosition;
    private _worldPositionStart;
    private _worldQuaternionStart;
    private _worldPosition;
    private _worldQuaternion;
    private _eye;
    private _camera;
    private _enabled;
    private _axis;
    private _mode;
    private _space;
    private _size;
    private _dragging;
    private _showX;
    private _showY;
    private _showZ;
    constructor();
    updateMatrixWorld: () => void;
}
declare class TransformControlsPlane extends Mesh<PlaneGeometry, MeshBasicMaterial> {
    private isTransformControlsPlane;
    type: string;
    constructor();
    private unitX;
    private unitY;
    private unitZ;
    private tempVector;
    private dirVector;
    private alignVector;
    private tempMatrix;
    private identityQuaternion;
    private _cameraQuaternion;
    private _worldPosition;
    private _worldQuaternion;
    private _eye;
    private _axis;
    private _mode;
    private _space;
    updateMatrixWorld: () => void;
}
export { TransformControls, TransformControlsGizmo, TransformControlsPlane };
