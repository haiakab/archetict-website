"use strict";Object.defineProperty(exports,"__esModule",{value:!0});var e=require("three"),t=require("mmd-parser");exports.MMDExporter=function(){let n;this.parseVpd=(r,o,s)=>{if(!0!==r.isSkinnedMesh)return console.warn("THREE.MMDExporter: parseVpd() requires SkinnedMesh instance."),null;function i(e){Math.abs(e)<1e-6&&(e=0);let t=e.toString();-1===t.indexOf(".")&&(t+="."),t+="000000";const n=t.indexOf(".");return`${t.slice(0,n)}.${t.slice(n+1,n+7)}`}function a(e){const t=[];for(let n=0,r=e.length;n<r;n++)t.push(i(e[n]));return t.join(",")}r.updateMatrixWorld(!0);const u=r.skeleton.bones,c=function(e){const t=e.clone();return t.pose(),t.skeleton.bones}(r),p=new e.Vector3,l=new e.Quaternion,h=new e.Quaternion,d=new e.Matrix4,f=[];f.push("Vocaloid Pose Data file"),f.push(""),f.push(`${""!==r.name?r.name.replace(/\s/g,"_"):"skin"}.osm;`),f.push(`${u.length};`),f.push("");for(let e=0,t=u.length;e<t;e++){const t=u[e],n=c[e];!0===s&&void 0!==t.userData.ik&&void 0!==t.userData.ik.originalMatrix?d.fromArray(t.userData.ik.originalMatrix):d.copy(t.matrix),p.setFromMatrixPosition(d),l.setFromRotationMatrix(d);const r=p.sub(n.position).toArray(),o=h.copy(n.quaternion).conjugate().multiply(l).toArray();r[2]=-r[2],o[0]=-o[0],o[1]=-o[1],f.push(`Bone${e}{${t.name}`),f.push(`  ${a(r)};`),f.push(`  ${a(o)};`),f.push("}"),f.push("")}f.push("");const x=f.join("\n");return!0===o?function(e){if(void 0===n){const e=(new t.CharsetEncoder).s2uTable;n={};const o=Object.keys(e);for(let t=0,s=o.length;t<s;t++){let s=o[t];var r=e[s];s=parseInt(s),n[r]=s}}const o=[];for(let t=0,s=e.length;t<s;t++){const s=e.charCodeAt(t);if(void 0===(r=n[s]))throw`cannot convert charcode 0x${s.toString(16)}`;r>255?(o.push(r>>8&255),o.push(255&r)):o.push(255&r)}return new Uint8Array(o)}(x):x}};
