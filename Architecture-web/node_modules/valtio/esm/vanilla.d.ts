export declare const ref: <T extends object>(o: T) => T;
export declare const proxy: <T extends object>(initialObject?: T) => T;
export declare const getVersion: (proxyObject: any) => number;
export declare const subscribe: (proxyObject: any, callback: () => void, notifyInSync?: boolean | undefined) => () => void;
export declare type NonPromise<T> = T extends Function ? T : T extends Promise<infer V> ? V : T extends object ? {
    [K in keyof T]: NonPromise<T[K]>;
} : T;
export declare const snapshot: <T extends object>(proxyObject: T) => NonPromise<T>;
