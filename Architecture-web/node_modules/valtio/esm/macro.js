import * as t from '@babel/types';
import { createMacro, MacroError } from 'babel-plugin-macros';
import { addNamed } from '@babel/helper-module-imports';

const macro = ({references}) => {
  var _a;
  (_a = references.useProxy) == null ? void 0 : _a.forEach((path) => {
    var _a2;
    const hook = addNamed(path, "useSnapshot", "valtio");
    const proxy = path.parentPath.get("arguments.0").node;
    if (!t.isIdentifier(proxy))
      throw new MacroError("no proxy object");
    const snap = t.identifier(`valtio_macro_snap_${proxy.name}`);
    path.parentPath.parentPath.replaceWith(t.variableDeclaration("const", [
      t.variableDeclarator(snap, t.callExpression(hook, [proxy]))
    ]));
    let inFunction = 0;
    (_a2 = path.parentPath.getFunctionParent()) == null ? void 0 : _a2.traverse({
      Identifier(p) {
        if (inFunction === 0 && p.node !== proxy && p.node.name === proxy.name) {
          p.node.name = snap.name;
        }
      },
      Function: {
        enter() {
          ++inFunction;
        },
        exit() {
          --inFunction;
        }
      }
    });
  });
};
var macro$1 = createMacro(macro, {configName: "valtio"});

export default macro$1;
