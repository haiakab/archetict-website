{"version":3,"file":"model-spec.js","sourceRoot":"","sources":["../../../../src/test/features/scene-graph/model-spec.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;GAaG;AAKH,OAAO,EAAC,KAAK,EAAC,MAAM,wCAAwC,CAAC;AAC7D,OAAO,EAAC,kBAAkB,EAAC,MAAM,oDAAoD,CAAC;AACtF,OAAO,EAAC,oBAAoB,EAAC,MAAM,mEAAmE,CAAC;AACvG,OAAO,EAAC,SAAS,EAAE,aAAa,EAAC,MAAM,kBAAkB,CAAC;AAE1D,MAAM,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC;AAE3B,MAAM,kBAAkB,GAAG,SAAS,CAAC,sBAAsB,CAAC,CAAC;AAC7D,MAAM,yBAAyB,GAC3B,SAAS,CAAC,2DAA2D,CAAC,CAAC;AAE3E,KAAK,CAAC,mBAAmB,EAAE,GAAG,EAAE;IAC9B,KAAK,CAAC,OAAO,EAAE,GAAG,EAAE;QAClB,IAAI,CAAC,sDAAsD,EAAE,KAAK,IAAI,EAAE;YACtE,MAAM,SAAS,GAAG,MAAM,aAAa,CAAC,yBAAyB,CAAC,CAAC;YACjE,MAAM,KAAK,GAAG,IAAI,KAAK,CAAC,oBAAoB,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC;YAE9D,MAAM,CAAC,KAAK,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;YAC3C,MAAM,CAAC,KAAK,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,SAAS,CAAC,CAAC;QACtD,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,IAAI,CAAC,0CAA0C,EAAE,KAAK,IAAI,EAAE;YAC/D,sEAAsE;YACtE,mEAAmE;YACnE,gEAAgE;YAChE,yEAAyE;YACzE,0EAA0E;YAC1E,sEAAsE;YACtE,4CAA4C;YAC5C,MAAM,SAAS,GAAG,MAAM,aAAa,CAAC,kBAAkB,CAAC,CAAC;YAC1D,MAAM,SAAS,GAA8B,IAAI,GAAG,EAAE,CAAC;YAEvD,SAAS,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC,MAAM,EAAE,EAAE;gBAClC,IAAK,MAAe,CAAC,MAAM,EAAE;oBAC3B,MAAM,QAAQ,GAAI,MAAe,CAAC,QAAQ,CAAC;oBAC3C,IAAI,KAAK,CAAC,OAAO,CAAC,QAAQ,CAAC,EAAE;wBAC3B,QAAQ,CAAC,OAAO,CACZ,CAAC,QAAQ,EAAE,EAAE,CAAC,SAAS,CAAC,GAAG,CAAC,QAAgC,CAAC,CAAC,CAAC;qBACpE;yBAAM;wBACL,SAAS,CAAC,GAAG,CAAC,QAAgC,CAAC,CAAC;qBACjD;iBACF;YACH,CAAC,CAAC,CAAC;YAEH,MAAM,KAAK,GAAG,IAAI,KAAK,CAAC,oBAAoB,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC;YAE9D,MAAM,kBAAkB,GAAG,IAAI,GAAG,EAAwB,CAAC;YAE3D,KAAK,CAAC,SAAS,CAAC,OAAO,CAAC,CAAC,QAAQ,EAAE,EAAE;gBACnC,KAAK,MAAM,aAAa,IAAI,QAAQ,CAAC,kBAAkB,CACzB,EAAE;oBAC9B,kBAAkB,CAAC,GAAG,CAAC,aAAa,CAAC,CAAC;oBACtC,MAAM,CAAC,SAAS,CAAC,GAAG,CAAC,aAAa,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,IAAI,CAAC;iBACjD;YACH,CAAC,CAAC,CAAC;YAEH,MAAM,CAAC,kBAAkB,CAAC,IAAI,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,KAAK,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC;QAC9D,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","sourcesContent":["/* @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the 'License');\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an 'AS IS' BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {MeshStandardMaterial} from 'three/src/materials/MeshStandardMaterial.js';\nimport {Mesh} from 'three/src/objects/Mesh.js';\n\nimport {Model} from '../../../features/scene-graph/model.js';\nimport {$correlatedObjects} from '../../../features/scene-graph/three-dom-element.js';\nimport {CorrelatedSceneGraph} from '../../../three-components/gltf-instance/correlated-scene-graph.js';\nimport {assetPath, loadThreeGLTF} from '../../helpers.js';\n\nconst expect = chai.expect;\n\nconst ASTRONAUT_GLB_PATH = assetPath('models/Astronaut.glb');\nconst KHRONOS_TRIANGLE_GLB_PATH =\n    assetPath('models/glTF-Sample-Models/2.0/Triangle/glTF/Triangle.gltf');\n\nsuite('scene-graph/model', () => {\n  suite('Model', () => {\n    test('creates a \"default\" material, when none is specified', async () => {\n      const threeGLTF = await loadThreeGLTF(KHRONOS_TRIANGLE_GLB_PATH);\n      const model = new Model(CorrelatedSceneGraph.from(threeGLTF));\n\n      expect(model.materials.length).to.be.eq(1);\n      expect(model.materials[0].name).to.be.eq('Default');\n    });\n\n    test.skip('exposes a list of materials in the scene', async () => {\n      // TODO: This test is skipped because [$correlatedObjects] can contain\n      // unused materials, because it can contain a base material and the\n      // derived material (from assignFinalMaterial(), if for instance\n      // vertexTangents are used) even if only the derived material is assigned\n      // to a mesh. These extras make the test fail. We may want to remove these\n      // unused materials from [$correlatedObjects] at which point this test\n      // will pass, but it's not hurting anything.\n      const threeGLTF = await loadThreeGLTF(ASTRONAUT_GLB_PATH);\n      const materials: Set<MeshStandardMaterial> = new Set();\n\n      threeGLTF.scene.traverse((object) => {\n        if ((object as Mesh).isMesh) {\n          const material = (object as Mesh).material;\n          if (Array.isArray(material)) {\n            material.forEach(\n                (material) => materials.add(material as MeshStandardMaterial));\n          } else {\n            materials.add(material as MeshStandardMaterial);\n          }\n        }\n      });\n\n      const model = new Model(CorrelatedSceneGraph.from(threeGLTF));\n\n      const collectedMaterials = new Set<MeshStandardMaterial>();\n\n      model.materials.forEach((material) => {\n        for (const threeMaterial of material[$correlatedObjects] as\n             Set<MeshStandardMaterial>) {\n          collectedMaterials.add(threeMaterial);\n          expect(materials.has(threeMaterial)).to.be.true;\n        }\n      });\n\n      expect(collectedMaterials.size).to.be.equal(materials.size);\n    });\n  });\n});\n"]}