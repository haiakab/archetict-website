{"version":3,"file":"CachingGLTFLoader.js","sourceRoot":"","sources":["../../src/three-components/CachingGLTFLoader.ts"],"names":[],"mappings":"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","sourcesContent":["/* @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the 'License');\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an 'AS IS' BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {Event as ThreeEvent, EventDispatcher, WebGLRenderer} from 'three';\nimport {DRACOLoader} from 'three/examples/jsm/loaders/DRACOLoader.js';\nimport {GLTF, GLTFLoader} from 'three/examples/jsm/loaders/GLTFLoader.js';\nimport {KTX2Loader} from 'three/examples/jsm/loaders/KTX2Loader';\n\nimport ModelViewerElementBase from '../model-viewer-base.js';\nimport {CacheEvictionPolicy} from '../utilities/cache-eviction-policy.js';\n\nimport {GLTFInstance, GLTFInstanceConstructor} from './GLTFInstance.js';\n\nexport type ProgressCallback = (progress: number) => void;\n\nexport interface PreloadEvent extends ThreeEvent {\n  type: 'preload';\n  element: ModelViewerElementBase;\n  src: String;\n}\n\n/**\n * A helper to Promise-ify a Three.js GLTFLoader\n */\nexport const loadWithLoader =\n    (url: string,\n     loader: GLTFLoader,\n     progressCallback: ProgressCallback = () => {}) => {\n      const onProgress = (event: ProgressEvent) => {\n        const fraction = event.loaded / event.total;\n        progressCallback!\n            (Math.max(0, Math.min(1, isFinite(fraction) ? fraction : 1)));\n      };\n      return new Promise<GLTF>((resolve, reject) => {\n        loader.load(url, resolve, onProgress, reject);\n      });\n    };\n\nconst cache = new Map<string, Promise<GLTFInstance>>();\nconst preloaded = new Map<string, boolean>();\n\nlet dracoDecoderLocation: string;\nconst dracoLoader = new DRACOLoader();\n\nlet ktx2TranscoderLocation: string;\nconst ktx2Loader = new KTX2Loader();\n\nexport const $loader = Symbol('loader');\nexport const $evictionPolicy = Symbol('evictionPolicy');\nconst $GLTFInstance = Symbol('GLTFInstance');\n\nexport class CachingGLTFLoader<T extends GLTFInstanceConstructor =\n                                             GLTFInstanceConstructor> extends\n    EventDispatcher {\n  static setDRACODecoderLocation(url: string) {\n    dracoDecoderLocation = url;\n    dracoLoader.setDecoderPath(url);\n  }\n\n  static getDRACODecoderLocation() {\n    return dracoDecoderLocation;\n  }\n\n  static setKTX2TranscoderLocation(url: string) {\n    ktx2TranscoderLocation = url;\n    ktx2Loader.setTranscoderPath(url);\n  }\n\n  static getKTX2TranscoderLocation() {\n    return ktx2TranscoderLocation;\n  }\n\n  static initializeKTX2Loader(renderer: WebGLRenderer) {\n    ktx2Loader.detectSupport(renderer);\n  }\n\n  static[$evictionPolicy]: CacheEvictionPolicy =\n      new CacheEvictionPolicy(CachingGLTFLoader);\n\n  static get cache() {\n    return cache;\n  }\n\n  /** @nocollapse */\n  static clearCache() {\n    cache.forEach((_value, url) => {\n      this.delete(url);\n    });\n    this[$evictionPolicy].reset();\n  }\n\n  static has(url: string) {\n    return cache.has(url);\n  }\n\n  /** @nocollapse */\n  static async delete(url: string) {\n    if (!this.has(url)) {\n      return;\n    }\n\n    const gltfLoads = cache.get(url);\n    preloaded.delete(url);\n    cache.delete(url);\n\n    const gltf = await gltfLoads;\n    // Dispose of the cached glTF's materials and geometries:\n\n    gltf!.dispose();\n  }\n\n  /**\n   * Returns true if the model that corresponds to the specified url is\n   * available in our local cache.\n   */\n  static hasFinishedLoading(url: string) {\n    return !!preloaded.get(url);\n  }\n\n  constructor(GLTFInstance: T) {\n    super();\n    this[$GLTFInstance] = GLTFInstance;\n    this[$loader].setDRACOLoader(dracoLoader);\n    this[$loader].setKTX2Loader(ktx2Loader);\n  }\n\n  protected[$loader]: GLTFLoader = new GLTFLoader();\n  protected[$GLTFInstance]: T;\n\n  protected get[$evictionPolicy](): CacheEvictionPolicy {\n    return (this.constructor as typeof CachingGLTFLoader)[$evictionPolicy];\n  }\n\n  /**\n   * Preloads a glTF, populating the cache. Returns a promise that resolves\n   * when the cache is populated.\n   */\n  async preload(\n      url: string, element: ModelViewerElementBase,\n      progressCallback: ProgressCallback = () => {}) {\n    this.dispatchEvent(\n        {type: 'preload', element: element, src: url} as PreloadEvent);\n    if (!cache.has(url)) {\n      const rawGLTFLoads =\n          loadWithLoader(url, this[$loader], (progress: number) => {\n            progressCallback(progress * 0.8);\n          });\n\n      const GLTFInstance = this[$GLTFInstance];\n      const gltfInstanceLoads = rawGLTFLoads\n                                    .then((rawGLTF) => {\n                                      return GLTFInstance.prepare(rawGLTF);\n                                    })\n                                    .then((preparedGLTF) => {\n                                      progressCallback(0.9);\n                                      return new GLTFInstance(preparedGLTF);\n                                    });\n\n      cache.set(url, gltfInstanceLoads);\n    }\n\n    await cache.get(url);\n\n    preloaded.set(url, true);\n\n    if (progressCallback) {\n      progressCallback(1.0);\n    }\n  }\n\n  /**\n   * Loads a glTF from the specified url and resolves a unique clone of the\n   * glTF. If the glTF has already been loaded, makes a clone of the cached\n   * copy.\n   */\n  async load(\n      url: string, element: ModelViewerElementBase,\n      progressCallback: ProgressCallback = () => {}): Promise<InstanceType<T>> {\n    await this.preload(url, element, progressCallback);\n\n    const gltf = await cache.get(url)!;\n    const clone = await gltf.clone() as InstanceType<T>;\n\n    this[$evictionPolicy].retain(url);\n\n    // Patch dispose so that we can properly account for instance use\n    // in the caching layer:\n    clone.dispose = (() => {\n      const originalDispose = clone.dispose;\n      let disposed = false;\n\n      return () => {\n        if (disposed) {\n          return;\n        }\n\n        disposed = true;\n        originalDispose.apply(clone);\n        this[$evictionPolicy].release(url);\n      };\n    })();\n\n    return clone;\n  }\n}\n"]}