{"version":3,"file":"TextureUtils.js","sourceRoot":"","sources":["../../src/three-components/TextureUtils.ts"],"names":[],"mappings":"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","sourcesContent":["/* @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the 'License');\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an 'AS IS' BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {EquirectangularReflectionMapping, EventDispatcher, GammaEncoding, NearestFilter, PMREMGenerator, RGBEEncoding, Texture, TextureLoader, WebGLRenderer, WebGLRenderTarget} from 'three';\nimport {RGBELoader} from 'three/examples/jsm/loaders/RGBELoader.js';\nimport {deserializeUrl} from '../utilities.js';\n\nimport {ProgressTracker} from '../utilities/progress-tracker.js';\n\nimport EnvironmentScene from './EnvironmentScene.js';\nimport EnvironmentSceneAlt from './EvironmentSceneAlt.js';\n\nexport interface EnvironmentMapAndSkybox {\n  environmentMap: WebGLRenderTarget;\n  skybox: Texture|null;\n}\n\nexport interface EnvironmentGenerationConfig {\n  progressTracker?: ProgressTracker;\n}\n\nconst GENERATED_SIGMA = 0.04;\n\nconst HDR_FILE_RE = /\\.hdr(\\.js)?$/;\nconst ldrLoader = new TextureLoader();\nconst hdrLoader = new RGBELoader();\n\n// Attach a `userData` object for arbitrary data on textures that\n// originate from TextureUtils, similar to Object3D's userData,\n// for help debugging, providing metadata for tests, and semantically\n// describe the type of texture within the context of this application.\nconst userData = {\n  url: null,\n};\n\nexport default class TextureUtils extends EventDispatcher {\n  private generatedEnvironmentMap: WebGLRenderTarget|null = null;\n  private generatedEnvironmentMapAlt: WebGLRenderTarget|null = null;\n  private PMREMGenerator: PMREMGenerator;\n\n  private skyboxCache = new Map<string, Promise<Texture>>();\n  private environmentMapCache = new Map<string, Promise<WebGLRenderTarget>>();\n\n  constructor(threeRenderer: WebGLRenderer) {\n    super();\n    this.PMREMGenerator = new PMREMGenerator(threeRenderer);\n  }\n\n  async load(\n      url: string, progressCallback: (progress: number) => void = () => {}):\n      Promise<Texture> {\n    try {\n      const isHDR: boolean = HDR_FILE_RE.test(url);\n      const loader = isHDR ? hdrLoader : ldrLoader;\n      const texture: Texture = await new Promise<Texture>(\n          (resolve, reject) => loader.load(\n              url, resolve, (event: {loaded: number, total: number}) => {\n                progressCallback(event.loaded / event.total * 0.9);\n              }, reject));\n\n      progressCallback(1.0);\n\n      this.addMetadata(texture, url);\n      texture.mapping = EquirectangularReflectionMapping;\n\n      if (isHDR) {\n        texture.encoding = RGBEEncoding;\n        texture.minFilter = NearestFilter;\n        texture.magFilter = NearestFilter;\n        texture.flipY = true;\n      } else {\n        texture.encoding = GammaEncoding;\n      }\n\n      return texture;\n\n    } finally {\n      if (progressCallback) {\n        progressCallback(1);\n      }\n    }\n  }\n\n  /**\n   * Returns a { skybox, environmentMap } object with the targets/textures\n   * accordingly. `skybox` is a WebGLRenderCubeTarget, and `environmentMap`\n   * is a Texture from a WebGLRenderCubeTarget.\n   */\n  async generateEnvironmentMapAndSkybox(\n      skyboxUrl: string|null = null, environmentMap: string|null = null,\n      options: EnvironmentGenerationConfig = {}):\n      Promise<EnvironmentMapAndSkybox> {\n    const {progressTracker} = options;\n    const updateGenerationProgress =\n        progressTracker != null ? progressTracker.beginActivity() : () => {};\n\n    const useAltEnvironment = environmentMap === 'neutral';\n    if (useAltEnvironment === true) {\n      environmentMap = null;\n    }\n    const environmentMapUrl = deserializeUrl(environmentMap);\n\n    try {\n      let skyboxLoads: Promise<Texture|null> = Promise.resolve(null);\n      let environmentMapLoads: Promise<WebGLRenderTarget>;\n\n      // If we have a skybox URL, attempt to load it as a cubemap\n      if (!!skyboxUrl) {\n        skyboxLoads = this.loadSkyboxFromUrl(skyboxUrl, progressTracker);\n      }\n\n      if (!!environmentMapUrl) {\n        // We have an available environment map URL\n        environmentMapLoads =\n            this.loadEnvironmentMapFromUrl(environmentMapUrl, progressTracker);\n      } else if (!!skyboxUrl) {\n        // Fallback to deriving the environment map from an available skybox\n        environmentMapLoads =\n            this.loadEnvironmentMapFromUrl(skyboxUrl, progressTracker);\n      } else {\n        // Fallback to generating the environment map\n        environmentMapLoads = useAltEnvironment === true ?\n            this.loadGeneratedEnvironmentMapAlt() :\n            this.loadGeneratedEnvironmentMap();\n      }\n\n      let [environmentMap, skybox] =\n          await Promise.all([environmentMapLoads, skyboxLoads]);\n\n      if (environmentMap == null) {\n        throw new Error('Failed to load environment map.');\n      }\n\n      return {environmentMap, skybox};\n    } finally {\n      updateGenerationProgress(1.0);\n    }\n  }\n\n  private addMetadata(texture: Texture|null, url: string|null) {\n    if (texture == null) {\n      return;\n    }\n    (texture as any).userData = {\n      ...userData,\n      ...({\n        url: url,\n      })\n    };\n  }\n\n  /**\n   * Loads an equirect Texture from a given URL, for use as a skybox.\n   */\n  private loadSkyboxFromUrl(url: string, progressTracker?: ProgressTracker):\n      Promise<Texture> {\n    if (!this.skyboxCache.has(url)) {\n      const progressCallback =\n          progressTracker ? progressTracker.beginActivity() : () => {};\n      const skyboxMapLoads = this.load(url, progressCallback);\n\n      this.skyboxCache.set(url, skyboxMapLoads);\n    }\n\n    return this.skyboxCache.get(url)!;\n  }\n\n  /**\n   * Loads a WebGLRenderTarget from a given URL. The render target in this\n   * case will be assumed to be used as an environment map.\n   */\n  private loadEnvironmentMapFromUrl(\n      url: string,\n      progressTracker?: ProgressTracker): Promise<WebGLRenderTarget> {\n    if (!this.environmentMapCache.has(url)) {\n      const environmentMapLoads =\n          this.loadSkyboxFromUrl(url, progressTracker).then((equirect) => {\n            const cubeUV = this.PMREMGenerator.fromEquirectangular(equirect);\n            this.addMetadata(cubeUV.texture, url);\n            return cubeUV;\n          });\n      this.PMREMGenerator.compileEquirectangularShader();\n\n      this.environmentMapCache.set(url, environmentMapLoads);\n    }\n\n    return this.environmentMapCache.get(url)!;\n  }\n\n  /**\n   * Loads a dynamically generated environment map.\n   */\n  private loadGeneratedEnvironmentMap(): Promise<WebGLRenderTarget> {\n    if (this.generatedEnvironmentMap == null) {\n      const defaultScene = new EnvironmentScene;\n      this.generatedEnvironmentMap =\n          this.PMREMGenerator.fromScene(defaultScene, GENERATED_SIGMA);\n      this.addMetadata(this.generatedEnvironmentMap.texture, null);\n    }\n\n    return Promise.resolve(this.generatedEnvironmentMap!);\n  }\n\n  /**\n   * Loads a dynamically generated environment map, designed to be neutral and\n   * color-preserving. Shows less contrast around the different sides of the\n   * object.\n   */\n  private loadGeneratedEnvironmentMapAlt(): Promise<WebGLRenderTarget> {\n    if (this.generatedEnvironmentMapAlt == null) {\n      const defaultScene = new EnvironmentSceneAlt;\n      this.generatedEnvironmentMapAlt =\n          this.PMREMGenerator.fromScene(defaultScene, GENERATED_SIGMA);\n      this.addMetadata(this.generatedEnvironmentMapAlt.texture, null);\n    }\n\n    return Promise.resolve(this.generatedEnvironmentMapAlt!);\n  }\n\n  async dispose() {\n    const allTargetsLoad: Array<Promise<WebGLRenderTarget>> = [];\n\n    // NOTE(cdata): We would use for-of iteration on the maps here, but\n    // IE11 doesn't have the necessary iterator-returning methods. So,\n    // disposal of these render targets is kind of convoluted as a result.\n\n    this.environmentMapCache.forEach((targetLoads) => {\n      allTargetsLoad.push(targetLoads);\n    });\n\n    this.environmentMapCache.clear();\n\n    for (const targetLoads of allTargetsLoad) {\n      try {\n        const target = await targetLoads;\n        target.dispose();\n      } catch (e) {\n        // Suppress errors, so that all render targets will be disposed\n      }\n    }\n\n    if (this.generatedEnvironmentMap != null) {\n      this.generatedEnvironmentMap!.dispose();\n      this.generatedEnvironmentMap = null;\n    }\n    if (this.generatedEnvironmentMapAlt != null) {\n      this.generatedEnvironmentMapAlt!.dispose();\n      this.generatedEnvironmentMapAlt = null;\n    }\n  }\n}\n"]}