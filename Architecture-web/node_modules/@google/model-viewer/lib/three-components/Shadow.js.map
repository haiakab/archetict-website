{"version":3,"file":"Shadow.js","sourceRoot":"","sources":["../../src/three-components/Shadow.ts"],"names":[],"mappings":"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","sourcesContent":["/* @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the 'License');\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an 'AS IS' BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {Box3, DirectionalLight, Mesh, PlaneBufferGeometry, ShadowMaterial, Vector3} from 'three';\n\nimport {ModelScene} from './ModelScene';\n\nexport type Side = 'back'|'bottom';\n\n// Nothing within Offset of the bottom of the scene casts a shadow\n// (this is to avoid having a baked-in shadow plane cast its own shadow).\nconst OFFSET = 0.002;\n// The softness [0, 1] of the shadow is mapped to a resolution between\n// 2^LOG_MAX_RESOLUTION and 2^LOG_MIN_RESOLUTION.\nconst LOG_MAX_RESOLUTION = 9;\nconst LOG_MIN_RESOLUTION = 6;\n// Animated models are not in general contained in their bounding box, as this\n// is calculated only for their resting pose. We create a cubic shadow volume\n// for animated models sized to their largest bounding box dimesion multiplied\n// by this scale factor.\nconst ANIMATION_SCALING = 2;\n\n/**\n * The Shadow class creates a shadow that fits a given scene and follows a\n * target. This shadow will follow the scene without any updates needed so long\n * as the shadow and scene are both parented to the same object (call it the\n * scene) and this scene is passed as the target parameter to the shadow's\n * constructor. We also must constrain the scene to motion within the horizontal\n * plane and call the setRotation() method whenever the scene's Y-axis rotation\n * changes. For motion outside of the horizontal plane, this.needsUpdate must be\n * set to true.\n *\n * The softness of the shadow is controlled by changing its resolution, making\n * softer shadows faster, but less precise.\n */\nexport class Shadow extends DirectionalLight {\n  private shadowMaterial = new ShadowMaterial;\n  private floor: Mesh;\n  private boundingBox = new Box3;\n  private size = new Vector3;\n  private shadowScale = 1;\n  private isAnimated = false;\n  private side: Side = 'bottom';\n  public needsUpdate = false;\n\n  constructor(scene: ModelScene, softness: number, side: Side) {\n    super();\n\n    // We use the light only to cast a shadow, not to light the scene.\n    this.intensity = 0;\n    this.castShadow = true;\n    this.frustumCulled = false;\n\n    this.floor = new Mesh(new PlaneBufferGeometry, this.shadowMaterial);\n    this.floor.rotateX(-Math.PI / 2);\n    this.floor.receiveShadow = true;\n    this.floor.castShadow = false;\n    this.floor.frustumCulled = false;\n    this.add(this.floor);\n\n    scene.target.add(this);\n    this.target = scene.target;\n\n    this.setScene(scene, softness, side);\n  }\n\n  /**\n   * Update the shadow's size and position for a new scene. Softness is also\n   * needed, as this controls the shadow's resolution.\n   */\n  setScene(scene: ModelScene, softness: number, side: Side) {\n    this.side = side;\n    this.isAnimated = scene.animationNames.length > 0;\n    this.boundingBox.copy(scene.boundingBox);\n    this.size.copy(scene.size);\n    if (this.side === 'back') {\n      const {min, max} = this.boundingBox;\n      [min.y, min.z] = [min.z, min.y];\n      [max.y, max.z] = [max.z, max.y];\n      [this.size.y, this.size.z] = [this.size.z, this.size.y];\n      this.rotation.x = Math.PI / 2;\n      this.rotation.y = Math.PI;\n    }\n    const {boundingBox, size} = this;\n\n    if (this.isAnimated) {\n      const maxDimension = Math.max(size.x, size.y, size.z) * ANIMATION_SCALING;\n      size.y = maxDimension;\n      boundingBox.expandByVector(\n          size.subScalar(maxDimension).multiplyScalar(-0.5));\n      boundingBox.max.y = boundingBox.min.y + maxDimension;\n      size.set(maxDimension, maxDimension, maxDimension);\n    }\n\n    boundingBox.getCenter(this.floor.position);\n    const shadowOffset = boundingBox.max.y + size.y * OFFSET;\n    if (side === 'bottom') {\n      this.position.y = shadowOffset;\n      this.shadow.camera.up.set(0, 0, 1);\n    } else {\n      this.position.y = 0;\n      this.position.z = shadowOffset;\n      this.shadow.camera.up.set(0, 1, 0);\n    }\n\n    this.setSoftness(softness);\n  }\n\n  /**\n   * Update the shadow's resolution based on softness (between 0 and 1). Should\n   * not be called frequently, as this results in reallocation.\n   */\n  setSoftness(softness: number) {\n    const resolution = Math.pow(\n        2,\n        LOG_MAX_RESOLUTION -\n            softness * (LOG_MAX_RESOLUTION - LOG_MIN_RESOLUTION));\n    this.setMapSize(resolution);\n  }\n\n  /**\n   * Lower-level version of the above function.\n   */\n  setMapSize(maxMapSize: number) {\n    const {camera, mapSize, map} = this.shadow;\n    const {size, boundingBox} = this;\n\n    if (map != null) {\n      (map as any).dispose();\n      (this.shadow.map as any) = null;\n    }\n\n    if (this.isAnimated) {\n      maxMapSize *= ANIMATION_SCALING;\n    }\n\n    const width =\n        Math.floor(size.x > size.z ? maxMapSize : maxMapSize * size.x / size.z);\n    const height =\n        Math.floor(size.x > size.z ? maxMapSize * size.z / size.x : maxMapSize);\n\n    mapSize.set(width, height);\n    // These pads account for the softening radius around the shadow.\n    const widthPad = 2.5 * size.x / width;\n    const heightPad = 2.5 * size.z / height;\n\n    camera.left = -boundingBox.max.x - widthPad;\n    camera.right = -boundingBox.min.x + widthPad;\n    camera.bottom = boundingBox.min.z - heightPad;\n    camera.top = boundingBox.max.z + heightPad;\n\n    this.setScaleAndOffset(this.shadowScale, 0);\n\n    this.floor.scale.set(size.x + 2 * widthPad, size.z + 2 * heightPad, 1);\n    this.needsUpdate = true;\n  }\n\n  /**\n   * Set the shadow's intensity (0 to 1), which is just its opacity. Turns off\n   * shadow rendering if zero.\n   */\n  setIntensity(intensity: number) {\n    this.shadowMaterial.opacity = intensity;\n    if (intensity > 0) {\n      this.visible = true;\n      this.floor.visible = true;\n    } else {\n      this.visible = false;\n      this.floor.visible = false;\n    }\n  }\n\n  getIntensity(): number {\n    return this.shadowMaterial.opacity;\n  }\n\n  /**\n   * The shadow does not rotate with its parent transforms, so the rotation must\n   * be manually updated here if it rotates in world space. The input is its\n   * absolute orientation about the Y-axis (other rotations are not supported).\n   */\n  setRotation(radiansY: number) {\n    if (this.side !== 'bottom') {\n      // We don't support rotation about a horizontal axis yet.\n      this.shadow.updateMatrices(this);\n      return;\n    }\n    this.shadow.camera.up.set(Math.sin(radiansY), 0, Math.cos(radiansY));\n    this.shadow.updateMatrices(this);\n  }\n\n  /**\n   * The scale is also not inherited from parents, so it must be set here in\n   * accordance with any transforms. An offset can also be specified to move the\n   * shadow vertically relative to the bottom of the scene. Positive is up, so\n   * values are generally negative.\n   */\n  setScaleAndOffset(scale: number, offset: number) {\n    const sizeY = this.size.y;\n    const {camera} = this.shadow;\n    this.shadowScale = scale;\n    camera.near = 0;\n    camera.far = sizeY - offset / scale;\n    camera.updateProjectionMatrix();\n    camera.scale.setScalar(scale);\n    // Floor plane is up slightly from the bottom of the bounding box to avoid\n    // Z-fighting with baked-in shadows and to stay inside the shadow camera.\n    const shadowOffset = sizeY * OFFSET;\n    this.floor.position.y = 2 * shadowOffset - camera.far;\n  }\n}"]}