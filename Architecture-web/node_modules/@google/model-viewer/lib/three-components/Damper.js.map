{"version":3,"file":"Damper.js","sourceRoot":"","sources":["../../src/three-components/Damper.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;GAaG;;AAEH,MAAM,CAAC,MAAM,aAAa,GAAG,KAAK,CAAC,CAAE,qBAAqB;AAC1D,MAAM,kBAAkB,GAAG,EAAE,CAAC;AAC9B,MAAM,iBAAiB,GAAG,CAAC,GAAG,kBAAkB,CAAC;AACjD,MAAM,SAAS,GAAG,MAAM,GAAG,iBAAiB,CAAC;AAE7C,MAAM,SAAS,GAAG,MAAM,CAAC,UAAU,CAAC,CAAC;AAErC;;;;;;;;GAQG;AACH,MAAM,OAAO,MAAM;IAAnB;QACS,QAAW,GAAW,CAAC,CAAC;IAoCjC,CAAC;IAlCC,MAAM,CACF,CAAS,EAAE,KAAa,EAAE,oBAA4B,EACtD,cAAsB;QACxB,IAAI,CAAC,IAAI,IAAI,IAAI,cAAc,KAAK,CAAC,EAAE;YACrC,OAAO,KAAK,CAAC;SACd;QACD,IAAI,CAAC,KAAK,KAAK,IAAI,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,EAAE;YACxC,OAAO,KAAK,CAAC;SACd;QACD,IAAI,oBAAoB,GAAG,CAAC,EAAE;YAC5B,OAAO,CAAC,CAAC;SACV;QACD,oEAAoE;QACpE,uEAAuE;QACvE,2CAA2C;QAC3C,MAAM,MAAM,GAAG,CAAC,CAAC,GAAG,KAAK,CAAC,CAAC;QAC3B,MAAM,oBAAoB,GAAG,IAAI,CAAC,SAAS,CAAC,GAAG,iBAAiB,GAAG,MAAM,CAAC;QAC1E,MAAM,aAAa,GAAG,MAAM,GAAG,oBAAoB,GAAG,oBAAoB,CAAC;QAC3E,MAAM,KAAK,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC,iBAAiB,GAAG,oBAAoB,CAAC,CAAC;QAClE,MAAM,WAAW,GACb,CAAC,oBAAoB,GAAG,iBAAiB,GAAG,aAAa,CAAC,GAAG,KAAK,CAAC;QACvE,MAAM,YAAY,GACd,CAAC,iBAAiB,GAAG,CAAC,WAAW,GAAG,oBAAoB,GAAG,KAAK,CAAC,CAAC;QACtE,IAAI,IAAI,CAAC,GAAG,CAAC,WAAW,CAAC,GAAG,SAAS,GAAG,IAAI,CAAC,GAAG,CAAC,cAAc,CAAC;YAC5D,YAAY,GAAG,MAAM,IAAI,CAAC,EAAE;YAC9B,0EAA0E;YAC1E,4CAA4C;YAC5C,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC;YACpB,OAAO,KAAK,CAAC;SACd;aAAM;YACL,IAAI,CAAC,SAAS,CAAC,GAAG,WAAW,CAAC;YAC9B,OAAO,KAAK,GAAG,aAAa,GAAG,KAAK,CAAC;SACtC;IACH,CAAC;CACF;KApCS,SAAS","sourcesContent":["/* @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the 'License');\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an 'AS IS' BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport const SETTLING_TIME = 10000;  // plenty long enough\nconst DECAY_MILLISECONDS = 50;\nconst NATURAL_FREQUENCY = 1 / DECAY_MILLISECONDS;\nconst NIL_SPEED = 0.0002 * NATURAL_FREQUENCY;\n\nconst $velocity = Symbol('velocity');\n\n/**\n * The Damper class is a generic second-order critically damped system that does\n * one linear step of the desired length of time. The only parameter is\n * DECAY_MILLISECONDS, which should be adjustable: TODO(#580). This common\n * parameter makes all states converge at the same rate regardless of scale.\n * xNormalization is a number to provide the rough scale of x, such that\n * NIL_SPEED clamping also happens at roughly the same convergence for all\n * states.\n */\nexport class Damper {\n  private[$velocity]: number = 0;\n\n  update(\n      x: number, xGoal: number, timeStepMilliseconds: number,\n      xNormalization: number): number {\n    if (x == null || xNormalization === 0) {\n      return xGoal;\n    }\n    if (x === xGoal && this[$velocity] === 0) {\n      return xGoal;\n    }\n    if (timeStepMilliseconds < 0) {\n      return x;\n    }\n    // Exact solution to a critically damped second-order system, where:\n    // acceleration = NATURAL_FREQUENCY * NATURAL_FREQUENCY * (xGoal - x) -\n    // 2 * NATURAL_FREQUENCY * this[$velocity];\n    const deltaX = (x - xGoal);\n    const intermediateVelocity = this[$velocity] + NATURAL_FREQUENCY * deltaX;\n    const intermediateX = deltaX + timeStepMilliseconds * intermediateVelocity;\n    const decay = Math.exp(-NATURAL_FREQUENCY * timeStepMilliseconds);\n    const newVelocity =\n        (intermediateVelocity - NATURAL_FREQUENCY * intermediateX) * decay;\n    const acceleration =\n        -NATURAL_FREQUENCY * (newVelocity + intermediateVelocity * decay);\n    if (Math.abs(newVelocity) < NIL_SPEED * Math.abs(xNormalization) &&\n        acceleration * deltaX >= 0) {\n      // This ensures the controls settle and stop calling this function instead\n      // of asymptotically approaching their goal.\n      this[$velocity] = 0;\n      return xGoal;\n    } else {\n      this[$velocity] = newVelocity;\n      return xGoal + intermediateX * decay;\n    }\n  }\n}\n"]}