{"version":3,"file":"material.js","sourceRoot":"","sources":["../../../src/features/scene-graph/material.ts"],"names":[],"mappings":"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","sourcesContent":["/* @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the 'License');\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an 'AS IS' BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {MeshStandardMaterial, Texture as ThreeTexture} from 'three';\n\nimport {GLTF, Material as GLTFMaterial} from '../../three-components/gltf-instance/gltf-2.0.js';\n\nimport {Material as MaterialInterface, RGB} from './api.js';\nimport {PBRMetallicRoughness} from './pbr-metallic-roughness.js';\nimport {TextureInfo} from './texture-info.js';\nimport {$correlatedObjects, $onUpdate, $sourceObject, ThreeDOMElement} from './three-dom-element.js';\n\n\nconst $pbrMetallicRoughness = Symbol('pbrMetallicRoughness');\nconst $normalTexture = Symbol('normalTexture');\nconst $occlusionTexture = Symbol('occlusionTexture');\nconst $emissiveTexture = Symbol('emissiveTexture');\n\n/**\n * Material facade implementation for Three.js materials\n */\nexport class Material extends ThreeDOMElement implements MaterialInterface {\n  private[$pbrMetallicRoughness]: PBRMetallicRoughness;\n\n  private[$normalTexture]: TextureInfo|null = null;\n  private[$occlusionTexture]: TextureInfo|null = null;\n  private[$emissiveTexture]: TextureInfo|null = null;\n\n  constructor(\n      onUpdate: () => void, gltf: GLTF, material: GLTFMaterial,\n      correlatedMaterials: Set<MeshStandardMaterial>|undefined) {\n    super(onUpdate, material, correlatedMaterials);\n\n    if (correlatedMaterials == null) {\n      return;\n    }\n\n    if (material.pbrMetallicRoughness == null) {\n      material.pbrMetallicRoughness = {};\n    }\n    this[$pbrMetallicRoughness] = new PBRMetallicRoughness(\n        onUpdate, gltf, material.pbrMetallicRoughness, correlatedMaterials);\n\n    const {normalTexture, occlusionTexture, emissiveTexture} = material;\n\n    const normalTextures = new Set<ThreeTexture>();\n    const occlusionTextures = new Set<ThreeTexture>();\n    const emissiveTextures = new Set<ThreeTexture>();\n\n    for (const material of correlatedMaterials) {\n      const {normalMap, aoMap, emissiveMap} = material;\n\n      if (normalTexture != null && normalMap != null) {\n        normalTextures.add(normalMap);\n      }\n\n      if (occlusionTexture != null && aoMap != null) {\n        occlusionTextures.add(aoMap);\n      }\n\n      if (emissiveTexture != null && emissiveMap != null) {\n        emissiveTextures.add(emissiveMap);\n      }\n    }\n\n    if (normalTextures.size > 0) {\n      this[$normalTexture] =\n          new TextureInfo(onUpdate, gltf, normalTexture!, normalTextures);\n    }\n\n    if (occlusionTextures.size > 0) {\n      this[$occlusionTexture] =\n          new TextureInfo(onUpdate, gltf, occlusionTexture!, occlusionTextures);\n    }\n\n    if (emissiveTextures.size > 0) {\n      this[$emissiveTexture] =\n          new TextureInfo(onUpdate, gltf, emissiveTexture!, emissiveTextures);\n    }\n  }\n\n  get name(): string {\n    return (this[$sourceObject] as any).name || '';\n  }\n\n  get pbrMetallicRoughness(): PBRMetallicRoughness {\n    return this[$pbrMetallicRoughness];\n  }\n\n  get normalTexture(): TextureInfo|null {\n    return this[$normalTexture];\n  }\n\n  get occlusionTexture(): TextureInfo|null {\n    return this[$occlusionTexture];\n  }\n\n  get emissiveTexture(): TextureInfo|null {\n    return this[$emissiveTexture];\n  }\n\n  get emissiveFactor(): RGB {\n    return (this[$sourceObject] as GLTFMaterial).emissiveFactor!;\n  }\n\n  setEmissiveFactor(rgb: RGB) {\n    for (const material of this[$correlatedObjects] as\n         Set<MeshStandardMaterial>) {\n      material.emissive.fromArray(rgb);\n    }\n    (this[$sourceObject] as GLTFMaterial).emissiveFactor = rgb;\n    this[$onUpdate]();\n  }\n}\n"]}