{"version":3,"file":"image.js","sourceRoot":"","sources":["../../../src/features/scene-graph/image.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;GAaG;;AAEH,OAAO,EAAC,WAAW,EAA0B,MAAM,OAAO,CAAC;AAK3D,OAAO,EAAC,kBAAkB,EAAE,SAAS,EAAE,aAAa,EAAE,eAAe,EAAC,MAAM,wBAAwB,CAAC;AAErG,MAAM,MAAM,GAAG,IAAI,WAAW,EAAE,CAAC;AAEjC,MAAM,cAAc,GAAG,MAAM,CAAC,eAAe,CAAC,CAAC;AAC/C,MAAM,IAAI,GAAG,MAAM,CAAC,KAAK,CAAC,CAAC;AAC3B,MAAM,iBAAiB,GAAG,MAAM,CAAC,kBAAkB,CAAC,CAAC;AAErD;;GAEG;AACH,MAAM,OAAO,KAAM,SAAQ,eAAe;IAQxC,YACI,QAAoB,EAAE,KAAgB,EACtC,kBAAqC;QACvC,KAAK,CAAC,QAAQ,EAAE,KAAK,EAAE,kBAAkB,CAAC,CAAC;QANtC,QAAM,GAAqB,SAAS,CAAC;QACrC,QAAmB,GAAmC,IAAI,OAAO,EAAE,CAAC;QAOzE,IAAK,KAA2B,CAAC,GAAG,IAAI,IAAI,EAAE;YAC5C,IAAI,CAAC,IAAI,CAAC,GAAI,KAA2B,CAAC,GAAG,CAAC;SAC/C;QAED,IAAK,KAA2B,CAAC,UAAU,IAAI,IAAI,EAAE;YACnD,KAAK,MAAM,OAAO,IAAI,kBAAkB,EAAE;gBACxC,IAAI,CAAC,iBAAiB,CAAC,CAAC,GAAG,CAAC,OAAO,EAAE,OAAO,CAAC,KAAK,CAAC,CAAC;aACrD;SACF;IACH,CAAC;IArBD,IAAW,CAAC,cAAc,CAAC;QACzB,OAAO,IAAI,CAAC,kBAAkB,CAAsB,CAAC;IACvD,CAAC;IAqBD,IAAI,IAAI;QACN,OAAQ,IAAI,CAAC,aAAa,CAAS,CAAC,IAAI,IAAI,EAAE,CAAC;IACjD,CAAC;IAED,IAAI,GAAG;QACL,OAAO,IAAI,CAAC,IAAI,CAAC,CAAC;IACpB,CAAC;IAED,IAAI,IAAI;QACN,OAAO,IAAI,CAAC,GAAG,IAAI,IAAI,CAAC,CAAC,CAAC,UAAU,CAAC,CAAC,CAAC,UAAU,CAAC;IACpD,CAAC;IAED,KAAK,CAAC,MAAM,CAAC,GAAW;QACtB,IAAI,CAAC,IAAI,CAAC,GAAG,GAAG,CAAC;QAEjB,MAAM,KAAK,GAAG,MAAM,IAAI,OAAO,CAAC,CAAC,OAAO,EAAE,MAAM,EAAE,EAAE;YAClD,MAAM,CAAC,IAAI,CAAC,GAAG,EAAE,OAAO,EAAE,SAAS,EAAE,MAAM,CAAC,CAAC;QAC/C,CAAC,CAAC,CAAC;QAEH,KAAK,MAAM,OAAO,IAAI,IAAI,CAAC,cAAc,CAAC,EAAE;YAC1C,wEAAwE;YACxE,uEAAuE;YACvE,+CAA+C;YAC/C,IAAI,KAAK,IAAI,IAAI;gBACZ,IAAI,CAAC,aAAa,CAAuB,CAAC,UAAU,IAAI,IAAI,EAAE;gBACjE,OAAO,CAAC,KAAK,GAAG,IAAI,CAAC,iBAAiB,CAAC,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC;aACtD;iBAAM;gBACL,OAAO,CAAC,KAAK,GAAG,KAAK,CAAC;aACvB;YAED,OAAO,CAAC,WAAW,GAAG,IAAI,CAAC;SAC5B;QACD,IAAI,CAAC,SAAS,CAAC,EAAE,CAAC;IACpB,CAAC;CACF;KArDS,IAAI,OACJ,iBAAiB","sourcesContent":["/* @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the 'License');\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an 'AS IS' BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {ImageLoader, Texture as ThreeTexture} from 'three';\n\nimport {EmbeddedImage as GLTFEmbeddedImage, ExternalImage as GLTFExternalImage, Image as GLTFImage} from '../../three-components/gltf-instance/gltf-2.0.js';\n\nimport {Image as ImageInterface} from './api.js';\nimport {$correlatedObjects, $onUpdate, $sourceObject, ThreeDOMElement} from './three-dom-element.js';\n\nconst loader = new ImageLoader();\n\nconst $threeTextures = Symbol('threeTextures');\nconst $uri = Symbol('uri');\nconst $bufferViewImages = Symbol('bufferViewImages');\n\n/**\n * Image facade implementation for Three.js textures\n */\nexport class Image extends ThreeDOMElement implements ImageInterface {\n  private get[$threeTextures]() {\n    return this[$correlatedObjects] as Set<ThreeTexture>;\n  }\n\n  private[$uri]: string|undefined = undefined;\n  private[$bufferViewImages]: WeakMap<ThreeTexture, unknown> = new WeakMap();\n\n  constructor(\n      onUpdate: () => void, image: GLTFImage,\n      correlatedTextures: Set<ThreeTexture>) {\n    super(onUpdate, image, correlatedTextures);\n\n    if ((image as GLTFExternalImage).uri != null) {\n      this[$uri] = (image as GLTFExternalImage).uri;\n    }\n\n    if ((image as GLTFEmbeddedImage).bufferView != null) {\n      for (const texture of correlatedTextures) {\n        this[$bufferViewImages].set(texture, texture.image);\n      }\n    }\n  }\n\n  get name(): string {\n    return (this[$sourceObject] as any).name || '';\n  }\n\n  get uri(): string|undefined {\n    return this[$uri];\n  }\n\n  get type(): 'embedded'|'external' {\n    return this.uri != null ? 'external' : 'embedded';\n  }\n\n  async setURI(uri: string): Promise<void> {\n    this[$uri] = uri;\n\n    const image = await new Promise((resolve, reject) => {\n      loader.load(uri, resolve, undefined, reject);\n    });\n\n    for (const texture of this[$threeTextures]) {\n      // If the URI is set to null but the Image had an associated buffer view\n      // (this would happen if it started out as embedded), then fall back to\n      // the cached object URL created by GLTFLoader:\n      if (image == null &&\n          (this[$sourceObject] as GLTFEmbeddedImage).bufferView != null) {\n        texture.image = this[$bufferViewImages].get(texture);\n      } else {\n        texture.image = image;\n      }\n\n      texture.needsUpdate = true;\n    }\n    this[$onUpdate]();\n  }\n}\n"]}