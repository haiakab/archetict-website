{"version":3,"file":"pbr-metallic-roughness.js","sourceRoot":"","sources":["../../../src/features/scene-graph/pbr-metallic-roughness.ts"],"names":[],"mappings":"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","sourcesContent":["/* @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the 'License');\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an 'AS IS' BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {MeshStandardMaterial, Texture as ThreeTexture} from 'three';\n\nimport {GLTF, PBRMetallicRoughness as GLTFPBRMetallicRoughness} from '../../three-components/gltf-instance/gltf-2.0.js';\n\nimport {RGBA} from './api.js';\nimport {PBRMetallicRoughness as PBRMetallicRoughnessInterface} from './api.js';\nimport {TextureInfo} from './texture-info.js';\nimport {$correlatedObjects, $onUpdate, $sourceObject, ThreeDOMElement} from './three-dom-element.js';\n\nconst $threeMaterials = Symbol('threeMaterials');\nconst $baseColorTexture = Symbol('baseColorTexture');\nconst $metallicRoughnessTexture = Symbol('metallicRoughnessTexture');\n\n/**\n * PBR material properties facade implementation for Three.js materials\n */\nexport class PBRMetallicRoughness extends ThreeDOMElement implements\n    PBRMetallicRoughnessInterface {\n  private[$baseColorTexture]: TextureInfo|null = null;\n  private[$metallicRoughnessTexture]: TextureInfo|null = null;\n\n  private get[$threeMaterials](): Set<MeshStandardMaterial> {\n    return this[$correlatedObjects] as Set<MeshStandardMaterial>;\n  }\n\n  constructor(\n      onUpdate: () => void, gltf: GLTF,\n      pbrMetallicRoughness: GLTFPBRMetallicRoughness,\n      correlatedMaterials: Set<MeshStandardMaterial>) {\n    super(onUpdate, pbrMetallicRoughness, correlatedMaterials);\n\n    // Assign glTF default values\n    if (pbrMetallicRoughness.baseColorFactor == null) {\n      pbrMetallicRoughness.baseColorFactor = [1, 1, 1, 1];\n    }\n    if (pbrMetallicRoughness.roughnessFactor == null) {\n      pbrMetallicRoughness.roughnessFactor = 0;\n    }\n    if (pbrMetallicRoughness.metallicFactor == null) {\n      pbrMetallicRoughness.metallicFactor = 0;\n    }\n\n    const {baseColorTexture, metallicRoughnessTexture} = pbrMetallicRoughness;\n    const baseColorTextures = new Set<ThreeTexture>();\n    const metallicRoughnessTextures = new Set<ThreeTexture>();\n\n    for (const material of correlatedMaterials) {\n      if (baseColorTexture != null && material.map != null) {\n        baseColorTextures.add(material.map);\n      }\n\n      // NOTE: GLTFLoader users the same texture for metalnessMap and\n      // roughnessMap in this case\n      // @see https://github.com/mrdoob/three.js/blob/b4473c25816df4a09405c7d887d5c418ef47ee76/examples/js/loaders/GLTFLoader.js#L2173-L2174\n      if (metallicRoughnessTexture != null && material.metalnessMap != null) {\n        metallicRoughnessTextures.add(material.metalnessMap);\n      }\n    }\n\n    if (baseColorTextures.size > 0) {\n      this[$baseColorTexture] =\n          new TextureInfo(onUpdate, gltf, baseColorTexture!, baseColorTextures);\n    }\n\n    if (metallicRoughnessTextures.size > 0) {\n      this[$metallicRoughnessTexture] = new TextureInfo(\n          onUpdate, gltf, metallicRoughnessTexture!, metallicRoughnessTextures);\n    }\n  }\n\n\n  get baseColorFactor(): RGBA {\n    return (this[$sourceObject] as GLTFPBRMetallicRoughness).baseColorFactor!;\n  }\n\n  get metallicFactor(): number {\n    return (this[$sourceObject] as GLTFPBRMetallicRoughness).metallicFactor!;\n  }\n\n  get roughnessFactor(): number {\n    return (this[$sourceObject] as GLTFPBRMetallicRoughness).roughnessFactor!;\n  }\n\n  get baseColorTexture(): TextureInfo|null {\n    return this[$baseColorTexture];\n  }\n\n  get metallicRoughnessTexture(): TextureInfo|null {\n    return this[$metallicRoughnessTexture];\n  }\n\n  setBaseColorFactor(rgba: RGBA) {\n    for (const material of this[$threeMaterials]) {\n      material.color.fromArray(rgba);\n      material.opacity = (rgba)[3];\n    }\n    const pbrMetallicRoughness =\n        this[$sourceObject] as GLTFPBRMetallicRoughness;\n    pbrMetallicRoughness.baseColorFactor = rgba;\n    this[$onUpdate]();\n  }\n\n  setMetallicFactor(value: number) {\n    for (const material of this[$threeMaterials]) {\n      material.metalness = value;\n    }\n    const pbrMetallicRoughness =\n        this[$sourceObject] as GLTFPBRMetallicRoughness;\n    pbrMetallicRoughness.metallicFactor = value;\n    this[$onUpdate]();\n  }\n\n  setRoughnessFactor(value: number) {\n    for (const material of this[$threeMaterials]) {\n      material.roughness = value;\n    }\n    const pbrMetallicRoughness =\n        this[$sourceObject] as GLTFPBRMetallicRoughness;\n    pbrMetallicRoughness.roughnessFactor = value;\n    this[$onUpdate]();\n  }\n}\n"]}