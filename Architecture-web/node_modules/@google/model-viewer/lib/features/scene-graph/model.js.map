{"version":3,"file":"model.js","sourceRoot":"","sources":["../../../src/features/scene-graph/model.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;GAaG;;AAOH,OAAO,EAAC,QAAQ,EAAC,MAAM,eAAe,CAAC;AAEvC,MAAM,UAAU,GAAG,MAAM,CAAC,WAAW,CAAC,CAAC;AAEvC;;;;GAIG;AACH,MAAM,OAAO,KAAK;IAGhB,YACI,oBAA0C,EAC1C,WAAuB,GAAG,EAAE,GAAE,CAAC;QAJ5B,QAAY,GAAoB,EAAE,CAAC;QAKxC,MAAM,EAAC,IAAI,EAAE,cAAc,EAAC,GAAG,oBAAoB,CAAC;QAEpD,IAAI,CAAC,SAAU,CAAC,OAAO,CAAC,QAAQ,CAAC,EAAE;YACjC,IAAI,CAAC,UAAU,CAAC,CAAC,IAAI,CAAC,IAAI,QAAQ,CAC9B,QAAQ,EACR,IAAI,EACJ,QAAQ,EACR,cAAc,CAAC,GAAG,CAAC,QAAQ,CAA8B,CAAC,CAAC,CAAC;QAClE,CAAC,CAAC,CAAC;IACL,CAAC;IAED;;;;;OAKG;IACH,IAAI,SAAS;QACX,OAAO,IAAI,CAAC,UAAU,CAAC,CAAC;IAC1B,CAAC;CACF;KAzBS,UAAU","sourcesContent":["/* @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the 'License');\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an 'AS IS' BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {MeshStandardMaterial} from 'three';\n\nimport {CorrelatedSceneGraph} from '../../three-components/gltf-instance/correlated-scene-graph.js';\n\nimport {Model as ModelInterface} from './api.js';\nimport {Material} from './material.js';\n\nconst $materials = Symbol('materials');\n\n/**\n * A Model facades the top-level GLTF object returned by Three.js' GLTFLoader.\n * Currently, the model only bothers itself with the materials in the Three.js\n * scene graph.\n */\nexport class Model implements ModelInterface {\n  private[$materials]: Array<Material> = [];\n\n  constructor(\n      correlatedSceneGraph: CorrelatedSceneGraph,\n      onUpdate: () => void = () => {}) {\n    const {gltf, gltfElementMap} = correlatedSceneGraph;\n\n    gltf.materials!.forEach(material => {\n      this[$materials].push(new Material(\n          onUpdate,\n          gltf,\n          material,\n          gltfElementMap.get(material) as Set<MeshStandardMaterial>));\n    });\n  }\n\n  /**\n   * Materials are listed in the order of the GLTF materials array, plus a\n   * default material at the end if one is used.\n   *\n   * TODO(#1003): How do we handle non-active scenes?\n   */\n  get materials(): Array<Material> {\n    return this[$materials];\n  }\n}\n"]}