{"version":3,"file":"sampler.js","sourceRoot":"","sources":["../../../src/features/scene-graph/sampler.ts"],"names":[],"mappings":"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","sourcesContent":["/* @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the 'License');\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an 'AS IS' BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {Texture as ThreeTexture} from 'three';\n\nimport {MagFilter, MinFilter, Sampler as GLTFSampler, WrapMode} from '../../three-components/gltf-instance/gltf-2.0.js';\n\nimport {Sampler as SamplerInterface} from './api.js';\nimport {$correlatedObjects, $onUpdate, $sourceObject, ThreeDOMElement} from './three-dom-element.js';\n\nconst isMinFilter = (() => {\n  const minFilterValues: Array<MinFilter> =\n      [9728, 9729, 9984, 9985, 9986, 9987];\n  return (value: unknown): value is MinFilter =>\n             minFilterValues.indexOf(value as MinFilter) > -1;\n})();\n\nconst isMagFilter = (() => {\n  const magFilterValues: Array<MagFilter> = [9728, 9729];\n  return (value: unknown): value is MagFilter =>\n             magFilterValues.indexOf(value as MagFilter) > -1;\n})();\n\nconst isWrapMode = (() => {\n  const wrapModes: Array<WrapMode> = [33071, 33648, 10497];\n  return (value: unknown): value is WrapMode =>\n             wrapModes.indexOf(value as WrapMode) > -1;\n})();\n\nconst isValidSamplerValue = <P extends 'minFilter'|'magFilter'|'wrapS'|'wrapT'>(\n    property: P, value: unknown): value is GLTFSampler[P] => {\n  switch (property) {\n    case 'minFilter':\n      return isMinFilter(value);\n    case 'magFilter':\n      return isMagFilter(value);\n    case 'wrapS':\n    case 'wrapT':\n      return isWrapMode(value);\n    default:\n      throw new Error(`Cannot configure property \"${property}\" on Sampler`);\n  }\n};\n\nconst $threeTextures = Symbol('threeTextures');\nconst $setProperty = Symbol('setProperty');\n\n/**\n * Sampler facade implementation for Three.js textures\n */\nexport class Sampler extends ThreeDOMElement implements SamplerInterface {\n  private get[$threeTextures]() {\n    return this[$correlatedObjects] as Set<ThreeTexture>;\n  }\n\n  constructor(\n      onUpdate: () => void, sampler: GLTFSampler,\n      correlatedTextures: Set<ThreeTexture>) {\n    // These defaults represent a convergence of glTF defaults for wrap mode and\n    // Three.js defaults for filters. Per glTF 2.0 spec, a renderer may choose\n    // its own defaults for filters.\n    // @see https://github.com/KhronosGroup/glTF/tree/master/specification/2.0#reference-sampler\n    // @see https://threejs.org/docs/#api/en/textures/Texture\n    if (sampler.minFilter == null) {\n      sampler.minFilter = 9987;\n    }\n    if (sampler.magFilter == null) {\n      sampler.magFilter = 9729;\n    }\n    if (sampler.wrapS == null) {\n      sampler.wrapS = 10497;\n    }\n    if (sampler.wrapT == null) {\n      sampler.wrapT = 10497;\n    }\n\n    super(onUpdate, sampler, correlatedTextures);\n  }\n\n  get name(): string {\n    return (this[$sourceObject] as any).name || '';\n  }\n\n  get minFilter(): MinFilter {\n    return (this[$sourceObject] as GLTFSampler).minFilter!;\n  }\n\n  get magFilter(): MagFilter {\n    return (this[$sourceObject] as GLTFSampler).magFilter!;\n  }\n\n  get wrapS(): WrapMode {\n    return (this[$sourceObject] as GLTFSampler).wrapS!;\n  }\n\n  get wrapT(): WrapMode {\n    return (this[$sourceObject] as GLTFSampler).wrapT!;\n  }\n\n  setMinFilter(filter: MinFilter) {\n    this[$setProperty]('minFilter', filter);\n  }\n\n  setMagFilter(filter: MagFilter) {\n    this[$setProperty]('magFilter', filter);\n  }\n\n  setWrapS(mode: WrapMode) {\n    this[$setProperty]('wrapS', mode);\n  }\n\n  setWrapT(mode: WrapMode) {\n    this[$setProperty]('wrapT', mode);\n  }\n\n  private[$setProperty]<P extends 'minFilter'|'magFilter'|'wrapS'|'wrapT'>(\n      property: P, value: MinFilter|MagFilter|WrapMode) {\n    const sampler = this[$sourceObject] as GLTFSampler;\n\n    if (isValidSamplerValue(property, value)) {\n      sampler[property] = value;\n\n      for (const texture of this[$threeTextures]) {\n        texture[property] = value;\n        texture.needsUpdate = true;\n      }\n    }\n    this[$onUpdate]();\n  }\n}\n"]}