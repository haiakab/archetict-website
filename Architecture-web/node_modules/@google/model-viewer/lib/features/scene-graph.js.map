{"version":3,"file":"scene-graph.js","sourceRoot":"","sources":["../../src/features/scene-graph.ts"],"names":[],"mappings":"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","sourcesContent":["/* @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the 'License');\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an 'AS IS' BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {property} from 'lit-element';\nimport {Euler, MeshStandardMaterial} from 'three';\nimport {GLTFExporter, GLTFExporterOptions} from 'three/examples/jsm/exporters/GLTFExporter';\n\nimport ModelViewerElementBase, {$needsRender, $onModelLoad, $renderer, $scene} from '../model-viewer-base.js';\nimport {normalizeUnit} from '../styles/conversions.js';\nimport {NumberNode, parseExpressions} from '../styles/parsers.js';\nimport {Variants} from '../three-components/gltf-instance/gltf-2.0.js';\nimport {ModelViewerGLTFInstance} from '../three-components/gltf-instance/ModelViewerGLTFInstance.js';\nimport {Constructor} from '../utilities.js';\n\nimport {Image, PBRMetallicRoughness, Sampler, Texture, TextureInfo} from './scene-graph/api.js';\nimport {Material} from './scene-graph/material.js';\nimport {Model} from './scene-graph/model.js';\n\nconst $currentGLTF = Symbol('currentGLTF');\nconst $model = Symbol('model');\nconst $variants = Symbol('variants');\n\ninterface SceneExportOptions {\n  binary?: boolean, trs?: boolean, onlyVisible?: boolean, embedImages?: boolean,\n      maxTextureSize?: number, forcePowerOfTwoTextures?: boolean,\n      includeCustomExtensions?: boolean,\n}\n\nexport interface SceneGraphInterface {\n  readonly model?: Model;\n  variantName: string|undefined;\n  readonly availableVariants: Array<string>;\n  orientation: string;\n  scale: string;\n  exportScene(options?: SceneExportOptions): Promise<Blob>;\n}\n\n/**\n * SceneGraphMixin manages exposes a model API in order to support operations on\n * the <model-viewer> scene graph.\n */\nexport const SceneGraphMixin = <T extends Constructor<ModelViewerElementBase>>(\n    ModelViewerElement: T): Constructor<SceneGraphInterface>&T => {\n  class SceneGraphModelViewerElement extends ModelViewerElement {\n    protected[$model]: Model|undefined = undefined;\n    protected[$currentGLTF]: ModelViewerGLTFInstance|null = null;\n    protected[$variants]: Array<string> = [];\n\n    @property({type: String, attribute: 'variant-name'})\n    variantName: string|undefined = undefined;\n\n    @property({type: String, attribute: 'orientation'})\n    orientation: string = '0 0 0';\n\n    @property({type: String, attribute: 'scale'}) scale: string = '1 1 1';\n\n    // Scene-graph API:\n    /** @export */\n    get model() {\n      return this[$model];\n    }\n\n    get availableVariants() {\n      return this[$variants];\n    }\n\n    /**\n     * References to each element constructor. Supports instanceof checks; these\n     * classes are not directly constructable.\n     */\n    static Model: Constructor<Model>;\n    static Material: Constructor<Material>;\n    static PBRMetallicRoughness: Constructor<PBRMetallicRoughness>;\n    static Sampler: Constructor<Sampler>;\n    static TextureInfo: Constructor<TextureInfo>;\n    static Texture: Constructor<Texture>;\n    static Image: Constructor<Image>;\n\n    updated(changedProperties: Map<string, any>) {\n      super.updated(changedProperties);\n\n      if (changedProperties.has('variantName')) {\n        const variants = this[$variants];\n        const threeGLTF = this[$currentGLTF];\n        const {variantName} = this;\n\n        const variantIndex = variants.findIndex((v) => v === variantName);\n        if (threeGLTF == null || variantIndex < 0) {\n          return;\n        }\n\n        const onUpdate = () => {\n          this[$needsRender]();\n        };\n\n        const updatedMaterials =\n            threeGLTF.correlatedSceneGraph.loadVariant(variantIndex, onUpdate);\n        const {gltf, gltfElementMap} = threeGLTF.correlatedSceneGraph;\n\n        for (const index of updatedMaterials) {\n          const material = gltf.materials![index];\n          this[$model]!.materials[index] = new Material(\n              onUpdate,\n              gltf,\n              material,\n              gltfElementMap.get(material) as Set<MeshStandardMaterial>);\n        }\n      }\n\n      if (changedProperties.has('orientation') ||\n          changedProperties.has('scale')) {\n        const {modelContainer} = this[$scene];\n\n        const orientation = parseExpressions(this.orientation)[0]\n                                .terms as [NumberNode, NumberNode, NumberNode];\n\n        const roll = normalizeUnit(orientation[0]).number;\n        const pitch = normalizeUnit(orientation[1]).number;\n        const yaw = normalizeUnit(orientation[2]).number;\n\n        modelContainer.quaternion.setFromEuler(\n            new Euler(pitch, yaw, roll, 'YXZ'));\n\n        const scale = parseExpressions(this.scale)[0]\n                          .terms as [NumberNode, NumberNode, NumberNode];\n\n        modelContainer.scale.set(\n            scale[0].number, scale[1].number, scale[2].number);\n\n        this[$scene].updateBoundingBox();\n        this[$scene].updateShadow();\n        this[$renderer].arRenderer.onUpdateScene();\n        this[$needsRender]();\n      }\n    }\n\n    [$onModelLoad]() {\n      super[$onModelLoad]();\n\n      this[$variants] = [];\n\n      const {currentGLTF} = this[$scene];\n\n      if (currentGLTF != null) {\n        const {correlatedSceneGraph} = currentGLTF;\n\n        if (correlatedSceneGraph != null &&\n            currentGLTF !== this[$currentGLTF]) {\n          this[$model] = new Model(correlatedSceneGraph, () => {\n            this[$needsRender]();\n          });\n        }\n\n        // KHR_materials_variants extension spec:\n        // https://github.com/KhronosGroup/glTF/tree/master/extensions/2.0/Khronos/KHR_materials_variants\n\n        const {gltfExtensions} = currentGLTF.userData;\n        if (gltfExtensions != null) {\n          const extension = gltfExtensions['KHR_materials_variants'];\n\n          if (extension != null) {\n            this[$variants] =\n                (extension.variants as Variants).map(variant => variant.name);\n            this.requestUpdate('variantName');\n          }\n        }\n      }\n\n      this[$currentGLTF] = currentGLTF;\n      // TODO: remove this event, as it is synonymous with the load event.\n      this.dispatchEvent(new CustomEvent('scene-graph-ready'));\n    }\n\n    /** @export */\n    async exportScene(options?: SceneExportOptions): Promise<Blob> {\n      const scene = this[$scene];\n      return new Promise<Blob>(async (resolve) => {\n        // Defaults\n        const opts = {\n          binary: true,\n          onlyVisible: true,\n          maxTextureSize: Infinity,\n          forcePowerOfTwoTextures: false,\n          includeCustomExtensions: false,\n          embedImages: true\n        } as GLTFExporterOptions;\n\n        Object.assign(opts, options);\n        // Not configurable\n        opts.animations = scene.animations;\n        opts.truncateDrawRange = true;\n\n        const shadow = scene.shadow;\n        let visible = false;\n        // Remove shadow from export\n        if (shadow != null) {\n          visible = shadow.visible;\n          shadow.visible = false;\n        }\n\n        const exporter = new GLTFExporter();\n        exporter.parse(scene.modelContainer, (gltf) => {\n          return resolve(\n              new Blob([opts.binary ? gltf as Blob : JSON.stringify(gltf)], {\n                type: opts.binary ? 'application/octet-stream' :\n                                    'application/json'\n              }));\n        }, opts);\n\n        if (shadow != null) {\n          shadow.visible = visible;\n        }\n      });\n    }\n  }\n\n  return SceneGraphModelViewerElement;\n};\n"]}